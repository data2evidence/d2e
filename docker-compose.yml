name: alp
networks:
  alp:
  data:

volumes:
  caddy:
  duckdb-data-1:
  cdw-config-duckdb-data-1:
  meilisearch-minerva-data-1:
  minio-data-1:
  pg-minerva-data-1:
  dicom-sqlite-storage:
  r-libs:
  trex:
  fhir-schema-file-1:
  dind-certs:

x-envs:
  db-svc: &x-dbsvc
    DB_SVC__IDP_SUBJECT_PROP: sub
    DB_SVC__LOG_LEVEL: info
    DB_SVC__PATH: /alpdb
    DISABLE_SSL: "TRUE"
    HANA__READ_ROLE: TENANT_READ_ROLE
    LB__LOG_LEVEL: ${LB__LOG_LEVEL:-FINE}
    PG__READ_ROLE: postgres_tenant_read_role
  env_converter: &x-converter
    DB_CREDENTIALS_MGR__API_URL: https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000/db-credentials/db/
    DB_CREDENTIALS__PRIVATE_KEY: ${DB_CREDENTIALS__INTERNAL__DECRYPT_PRIVATE_KEY}
    DB_CREDENTIALS__PRIVATE_KEY_PASSPHRASE: ${DB_CREDENTIALS__INTERNAL__PRIVATE_KEY_PASSPHRASE}
    IDP__ALP_SVC__CLIENT_ID: ${LOGTO__ALP_SVC__CLIENT_ID}
    IDP__ALP_SVC__CLIENT_SECRET: ${LOGTO__ALP_SVC__CLIENT_SECRET}
    IDP__SCOPE: https://alp-default
    IDP_SUBJECT_PROP: sub
  minio: &x-minio
    MINIO__ACCESS_KEY: ${MINIO__ACCESS_KEY:-root}
    MINIO__ENDPOINT: ${MINIO__ENDPOINT:-alp-minerva-s3}
    MINIO__PORT: ${MINIO__PORT:-9000}
    MINIO__REGION: ${MINIO__REGION:-ap-southeast-1}
    MINIO__SECRET_KEY: ${MINIO__SECRET_KEY}
    MINIO__SSL: ${MINIO__SSL:-false}
  pg: &x-pg
    PG__DB_NAME: alp
    ## Flag to display executed Knex queries in log
    PG__DEBUG: ${PG_DEBUG:-1}
    PG__HOST: ${PG_HOST:-alp-minerva-postgres-1}
    PG__MAX_POOL: 10
    PG__MIN_POOL: 0
    PG__PORT: ${PG_PORT:-5432}
    PG__IDLE_TIMEOUT_IN_MS: 1000
    PG__DIALECT: postgresql
  fhir: &x-fhir
    FHIR__CLIENT_ID: db6b2304-f236-45ec-b10c-a852681e7129
    FHIR__CLIENT_SECRET: ${FHIR__CLIENT_SECRET}
  perseus: &x-perseus
    PERSEUS__FILES_MANAGER_HOST: alp-perseus-files-manager-${BASE_PORT:-1}
  plugins: &x-plugins |
    {
      "researcher": [
        {
          "enabled": true,
          "featureFlag": "conceptSets",
          "name": "Concepts",
          "pluginPath": "plugins/Researcher/ConceptSets/module",
          "requiredRoles": [
            "RESEARCHER"
          ],
          "route": "concepts"
        },
        {
          "enabled": true,
          "featureFlag": "cohort",
          "name": "Cohorts",
          "pluginPath": "plugins/mri/PatientAnalytics/module",
          "requiredRoles": [
            "RESEARCHER"
          ],
          "route": "cohort"
        },
        { 
          "enabled": false,
          "featureFlag": "cohorts",
          "name": "Cohorts M", 
          "pluginPath": "plugins/Cohort/module",
          "requiredRoles": [ 
            "RESEARCHER" 
          ], 
          "route": "cohorts"
        },
        {
          "enabled": true,
          "featureFlag": "starboard",
          "name": "Notebooks",
          "pluginPath": "plugins/Starboard/module",
          "requiredRoles": [
            "RESEARCHER"
          ],
          "route": "starboard",
          "subMenus": "true"
        },
        {
          "enabled": false,
          "featureFlag": "analysisFlow",
          "name": "Analysis",
          "route": "analysis_parent",
          "requiredRoles": [
            "RESEARCHER"
          ],
          "children": [
            {
              "name": "Kaplan-Meier",
              "route": "kaplan-meier",
              "pluginPath": "plugins/Researcher/KaplanMeier/module",
              "featureFlag": "kaplanMeier",
              "requiredRoles": ["RESEARCHER"],
              "enabled": true
            },
            {
              "name": "Strategus",
              "route": "analysis",
              "data": {
                "dnBaseUrl": "https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}/"
              },
              "pluginPath": "https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}/analysis/module.js",
              "featureFlag": "strategus",
              "requiredRoles": ["RESEARCHER"],
              "enabled": true
            }
          ]
        }
      ],
      "setup": [
        {
          "description": "Database connection and credentials",
          "enabled": true,
          "name": "Databases",
          "notes": "",
          "pluginPath": "plugins/Setup/Db/module",
          "route": "db"
        },
        {
          "description": "Allow user to sign-in with Azure Active Directory",
          "enabled": false,
          "name": "Azure AD integration",
          "notes": "Notes: Require manual update of the environment variable to switch the identity provider to Azure",
          "pluginPath": "plugins/Setup/AzureAD/module",
          "route": "azure-ad"
        },
        {
          "description": "Enable / disable feature",
          "enabled": true,
          "name": "Feature flags",
          "pluginPath": "plugins/Setup/Feature/module",
          "route": "feature"
        },
        {
          "description": "Configure dataset metadata and tags",
          "enabled": true,
          "name": "Metadata",
          "notes": "",
          "pluginPath": "plugins/Setup/Metadata/module",
          "route": "metadata"
        },
        {
          "description": "Configure patient analytics",
          "enabled": true,
          "name": "Patient Analytics Config",
          "notes": "",
          "pluginPath": "plugins/mri/PatientAnalyticsConfig/module",
          "route": "pa-config"
        },
        {
          "description": "Configure CDM",
          "enabled": true,
          "name": "CDM Config",
          "notes": "",
          "pluginPath": "plugins/mri/CDM/module",
          "route": "cdm-config"
        },
        {
          "description": "Configure patient summary",
          "enabled": false,
          "name": "Patient Summary Config",
          "notes": "",
          "pluginPath": "plugins/mri/PatientSummaryConfig/module",
          "route": "ps-config"
        },
        {
          "description": "Configure hybrid search for concepts",
          "enabled": true,
          "name": "Hybrid Search",
          "notes": "",
          "pluginPath": "plugins/Setup/HybridSearch/module",
          "route": "hybrid-search"
        },
        {
          "description": "Configure overview description text",
          "enabled": true,
          "name": "Overview description",
          "notes": "",
          "pluginPath": "plugins/Setup/OverviewDescription/module",
          "route": "overview-description"
        },
        { 
          "description": "Upload / delete flows",
          "enabled": true,
          "name": "Plugins Table",
          "notes": "",
          "pluginPath": "plugins/Setup/PluginTable/module",
          "route": "plugins-table"
        }
      ],
      "systemadmin": [
        {
          "name": "Users",
          "pluginPath": "plugins/SystemAdmin/UserOverview/module",
          "route": "user-overview"
        },
        {
          "name": "Datasets",
          "pluginPath": "plugins/SystemAdmin/StudyOverview/module",
          "route": "dataset-overview"
        },
        {
          "name": "Jobs",
          "pluginPath": "plugins/SystemAdmin/Jobs/module",
          "route": "jobs"
        },
        {
          "name": "ETL",
          "route": "etl",
          "children": [
            {
              "name": "Concept mapping",
              "pluginPath": "plugins/SystemAdmin/ConceptMapping/module",
              "route": "concept-mapping"
            },
            {
          "data": {
            "dnBaseUrl": "https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}/"
          },
              "name": "Data mapping",
          "pluginPath": "https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}/mapping/module.js",
              "route": "data-mapping"
        },
        {
          "data": {
            "dnBaseUrl": "https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}/"
          },
              "name": "Data transformation",
          "pluginPath": "https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}/flow/module.js",
              "route": "dataflow"
            }
          ]
        },
        {
          "name": "Setup",
          "pluginPath": "plugins/Setup/module",
          "route": "setup"
        }
      ]
    }
  redis: &x-redis
    REDIS_HOST: ${REDIS_HOST:-alp-minerva-redis-1}
    REDIS_PORT: ${REDIS_PORT:-6379}
  service: &x-routes
    SERVICE_ROUTES: |-
      {
       "analytics": "https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000",
       "bookmark": "https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000/analytics-svc/api/services/bookmark",
       "cdw": "https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000",
       "paConfig": "https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000/pa-config-svc",
       "queryGen": "https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000",
       "dataflowMgmt": "https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000",
       "dbCredentialsMgr": "https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000/db-credentials",
       "meilisearch": "http://alp-minerva-meilisearch-svc-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41111",
       "portalServer": "http://alp-minerva-portal-server-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:33002",
       "usermgmt": "https://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33000/usermgmt/api",
       "terminology": "http://alp-minerva-terminology-svc-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41108",
       "prefect": "http://alp-dataflow-gen-${BASE_PORT:-1}:41${BASE_PORT:-1}20/api",
       "idIssuerUrl": "http://alp-logto-${BASE_PORT:-1}:3001/oidc",
       "minio": "",
       "fhir": "http://alp-minerva-fhir-server-${BASE_PORT:-1}:8103/fhir/R4",
       "fhirTokenUrl": "http://alp-minerva-fhir-server-1:8103/oauth2/token",
       "dicomServer": "http://alp-dicom-server:8042",
       "fhirSvc": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/gateway/api/fhir"
      }

  # "https://alp-minerva-portal-server-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41105",
  tls: &x-tls
    TLS__INTERNAL__CA_CRT: ${TLS__INTERNAL__CA_CRT}
    TLS__INTERNAL__CRT: ${TLS__INTERNAL__CRT}
    TLS__INTERNAL__DOMAIN: ${TLS__INTERNAL__DOMAIN:-alp.local}
    TLS__INTERNAL__KEY: ${TLS__INTERNAL__KEY}
  cachedb: &cachedb
    CACHEDB__HOST: alp-cachedb
    CACHEDB__PORT: 41191
    CACHEDB__POOL_SIZE: ${CACHEDB__POOL_SIZE:-10}
  python-internal-ssl: &python-internal-ssl
    PYTHON_VERIFY_SSL: false # Only use this for apis calling internal docker urls

services:
  trex:
    container_name: &c84 trex
    init: true
    command: npm run start
    depends_on:
      alp-minerva-pg-mgmt-init:
        condition: service_completed_successfully
      alp-logto-post-init:
        condition: service_completed_successfully
      alp-minio-post-init:
        condition: service_completed_successfully
    hostname: trex.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/${DOCKER_TREX_REPO_NAME:-alp-data-node/trex}:${DOCKER_TREX_TAG_NAME:-develop}
    pull_policy: always
    platform: linux/amd64
    logging:
      options:
        tag: *c84
    networks:
      alp:
        priority: 20
      data:
        priority: 10
    volumes:
      - trex:/usr/src/plugin
    healthcheck:
      interval: 60s
      retries: 30
      start_period: 60s
      test:
        - CMD
        - npm
        - run
        - health
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    environment:
      <<:
        - *x-converter
        - *x-tls
        - *x-fhir
        - *x-minio
        - *x-pg
      REP_PG: postgres://postgres:mypass@broadsea-atlasdb:5432/postgres
      SERVICE_ENV: |-
        {
          "_shared": {
            "DB_SVC__IDP_SUBJECT_PROP": "sub",
            "DB_SVC__LOG_LEVEL": "info",
            "DB_SVC__PATH": "/alpdb",
            "DISABLE_SSL": "TRUE",
            "HANA__READ_ROLE": "TENANT_READ_ROLE",
            "LB__LOG_LEVEL": "${LB__LOG_LEVEL:-FINE}",
            "PG__READ_ROLE": "postgres_tenant_read_role",
            "DB_CREDENTIALS_MGR__API_URL": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/db-credentials/db/",
            "DB_CREDENTIALS__PRIVATE_KEY_PASSPHRASE": "${DB_CREDENTIALS__INTERNAL__PRIVATE_KEY_PASSPHRASE}",
            "IDP__ALP_SVC__CLIENT_ID": "${LOGTO__ALP_SVC__CLIENT_ID}",
            "IDP__ALP_SVC__CLIENT_SECRET": "${LOGTO__ALP_SVC__CLIENT_SECRET}",
            "IDP__SCOPE": "https://alp-default",
            "IDP_SUBJECT_PROP": "sub",
            "MINIO__ACCESS_KEY": "${MINIO__ACCESS_KEY:-root}",
            "MINIO__ENDPOINT": "${MINIO__ENDPOINT:-alp-minerva-s3}",
            "MINIO__PORT": ${MINIO__PORT:-9000},
            "MINIO__REGION": "${MINIO__REGION:-ap-southeast-1}",
            "MINIO__SECRET_KEY": "${MINIO__SECRET_KEY}",
            "MINIO__SSL": "${MINIO__SSL:-false}",
            "CACHEDB__PORT": 41191,
            "CACHEDB__HOST": "alp-cachedb",
            "CACHEDB__POOL_SIZE": "${CACHEDB__POOL_SIZE:-10}",
            "NODE_ENV": "${NODE_ENV:-development}",
            "PG__DB_NAME": "alp",
            "PG__DEBUG": "${PG_DEBUG:-1}",
            "PG__HOST": "${PG_HOST:-alp-minerva-postgres-1}",
            "PG__MAX_POOL": 10,
            "PG__MIN_POOL": 0,
            "PG__PORT": ${PG_PORT:-5432},
            "PG__IDLE_TIMEOUT_IN_MS": 1000,
            "PG__DIALECT": "postgresql",
            "LOCAL_DEBUG": "false",
            "SERVICE_ROUTES": {
              "analytics": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001",
              "bookmark": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/analytics-svc/api/services/bookmark",
              "cdw": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001",
              "paConfig": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/pa-config-svc",
              "trex": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001",
              "queryGen": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001",
              "dataflowMgmt": "http://alp-minerva-dataflow-mgmt-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41107",
              "dbCredentialsMgr": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/db-credentials",
              "meilisearch": "http://alp-minerva-meilisearch-svc-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41111",
              "portalServer": "http://alp-minerva-portal-server-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:33002",
              "usermgmt": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/usermgmt/api",
              "terminology": "http://alp-minerva-terminology-svc-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41108",
              "prefect": "http://alp-dataflow-gen-${BASE_PORT:-1}:41${BASE_PORT:-1}20/api",
              "idIssuerUrl": "http://alp-logto-${BASE_PORT:-1}:3001/oidc",
              "minio": "",
              "fhir": "http://alp-minerva-fhir-server-${BASE_PORT:-1}:8103/fhir/R4",
              "fhirTokenUrl": "http://alp-minerva-fhir-server-1:8103/oauth2/token",
              "fhirSvc": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/gateway/api/fhir",
              "dicomServer": "http://alp-dicom-server:8042",
              "logto": "http://alp-logto-1:3001"
            }
          },
          "analytics-svc": {
            "ALP_GATEWAY_OAUTH__URL": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/oauth/token",
            "ALP__SYSTEM_ID": "${ALP__SYSTEM_ID:-alp-research}",
            "ANALYTICS_SVC__DEFAULT_ASSIGNMENT_NAME": "PUBLIC-CHART_DEFAULT-ASSIGNMENT",
            "ANALYTICS_SVC__PORT": 41${BASE_PORT:-1}02,
            "ANALYTICS_SVC__STUDIES_METADATA__TTL_IN_SECONDS": 600,
            "SQL_RETURN_ON": "${SQL_RETURN_ON:-false}",
            "DUCKDB__DATA_FOLDER": "/home/docker/src/alp-data-node/app/duckdb_data",
            "LOCAL_DEBUG": "false",
            "SKIP_AUTH": "${SKIP_AUTH:-FALSE}",
            "USE_DUCKDB": "${USE_DUCKDB:-true}",
            "USE_CACHEDB": "${USE_CACHEDB:-true}",
            "USE_EXTENSION_FOR_COHORT_CREATION": "false",
            "isHttpTestRun": "${isHttpTestRun}",
            "isTestEnv": "${isTestEnv}",
            "local": "${local}",
            "TESTSCHEMA": "${TESTSCHEMA}"
          },
          "mri-pg-config": {
            "PG_ADMIN_PASSWORD": "${PG_ADMIN_PASSWORD}",
            "PG_ADMIN_USER": "${PG_ADMIN_USER:-alp_pg_admin_user}",
            "PG_PASSWORD": "${PG_WRITE_PASSWORD}",
            "PG_SCHEMA": "cdw_config",
            "PG_USER": "${PG_WRITE_USER:-alp_pg_write_user}",
            "NODE_ENV": "development"
          },
          "alp-db-credentials": {
            "PG__DB_CREDENTIALS_MGR__MANAGE_PASSWORD": "${PG_ADMIN_PASSWORD}",
            "PG__DB_CREDENTIALS_MGR__MANAGE_USER": "${PG_ADMIN_USER:-alp_pg_admin_user}",
            "PG__DB_CREDENTIALS_MGR__PASSWORD": "${PG_WRITE_PASSWORD}",
            "PG__DB_CREDENTIALS_MGR__SCHEMA": "db_credentials_mgr",
            "PG__DB_CREDENTIALS_MGR__USER": "${PG_WRITE_USER:-alp_pg_write_user}",
            "DATABASE_CREDENTIALS": ${DATABASE_CREDENTIALS}
          },
          "alp-fhir-svc": {
            "FHIR__LOG_LEVEL": "debug",
            "PORT": 41${BASE_PORT:-1}12,
            "FHIR__CLIENT_ID": "db6b2304-f236-45ec-b10c-a852681e7129",
            "FHIR__CLIENT_SECRET": "${FHIR__CLIENT_SECRET}",
            "FHIR_SCHEMA_PATH": "/home/docker/fhir",
            "FHIR_SCHEMA_FILE_NAME": "fhir.schema.json",
            "ALP_GATEWAY_OAUTH__URL": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/oauth/token",
            "IDP__ALP_DATA_CLIENT_ID": "${LOGTO__ALP_DATA__CLIENT_ID}",
            "IDP__ALP_DATA__CLIENT_SECRET": "${LOGTO__ALP_DATA__CLIENT_SECRET}"
          },
          "alp-fhir-init": {
            "PG_SUPER_PASSWORD": "${PG_SUPER_PASSWORD}",
            "PG_SUPER_USER": "${PG_SUPER_USER:-postgres}",
            "FHIR__LOG_LEVEL": "debug",
            "PORT": 41${BASE_PORT:-1}12,
            "FHIR__CLIENT_ID": "db6b2304-f236-45ec-b10c-a852681e7129",
            "FHIR__CLIENT_SECRET": "${FHIR__CLIENT_SECRET}",
            "DUCKDB_PATH": "/home/docker/alp-data-node/app/src/duckdb",
            "PLUGIN_PATH": "/usr/src/plugins/d2ef/alp-fhir-init",
            "IDP__ALP_DATA_CLIENT_ID": "${LOGTO__ALP_DATA__CLIENT_ID}",
            "IDP__ALP_DATA__CLIENT_SECRET": "${LOGTO__ALP_DATA__CLIENT_SECRET}",
            "ALP_GATEWAY_OAUTH__URL": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/oauth/token"
          },
          "query-gen-svc": {
            "SQL_RETURN_ON": "${SQL_RETURN_ON:-false}",
            "isHttpTestRun": "${isHttpTestRun}",
            "isTestEnv": "${isTestEnv}",
            "TESTSCHEMA": "${TESTSCHEMA}",
            "NOT_EQ_CHECK_FILTERCARDS": "${NOT_EQ_CHECK_FILTERCARDS:-true}"
          },
          "alp-usermgmt": {
            "ALP__SYSTEM_NAME": "${ALP__SYSTEM_NAME:-Research System}",
            "APP__TENANT_ID": "${APP__TENANT_ID:-e0348e4d-2e17-43f2-a3c6-efd752d17c23}",
            "IDP__ALP_ADMIN__CLIENT_ID": "${LOGTO_API_M2M_CLIENT_ID}",
            "IDP__ALP_ADMIN__CLIENT_SECRET": "${LOGTO_API_M2M_CLIENT_SECRET}",
            "IDP__ALP_ADMIN__RESOURCE": "https://default.logto.app/api",
            "IDP__BASE_URL": "http://alp-logto-${BASE_PORT:-1}:3001",
            "IDP__FETCH_USER_INFO_TYPE": "logto",
            "IDP__INITIAL_USER__NAME": "${IDP__INITIAL_USER__NAME:-admin}",
            "IDP__INITIAL_USER__UUID": "a6660e40-261e-4782-873e-f76b4328aecf",
            "IDP__RELYING_PARTY": "${IDP__RELYING_PARTY}",
            "NIFI_MGMT__BASE_URL": "http://alp-minerva-nifi-mgmt-svc-${BASE_PORT:-1}:4444/alp-nifi-api/",
            "PG__USER_MGMT__ADMIN_PASSWORD": "${PG_ADMIN_PASSWORD}",
            "PG__USER_MGMT__ADMIN_USER": "${PG_ADMIN_USER:-alp_pg_admin_user}",
            "PG__USER_MGMT__DB_NAME": "${PG_DB_NAME:-alp}",
            "PG__USER_MGMT__PASSWORD": "${PG_WRITE_PASSWORD}",
            "PG__USER_MGMT__SCHEMA": "usermgmt",
            "PG__USER_MGMT__USER": "${PG_WRITE_USER:-alp_pg_write_user}",
            "USER_MGMT__IDP_SUBJECT_PROP": "sub",
            "USER_MGMT__LOG_LEVEL": "info",
            "USER_MGMT__PATH": "/usermgmt/",
            "USER_MGMT__PORT": 41${BASE_PORT:-1}04
          },
          "bookmark-svc": {
            "PG_USER": "${PG_WRITE_USER:-alp_pg_write_user}",
            "PG_PASSWORD": "${PG_WRITE_PASSWORD}"
          },
          "mri-pa-config": {
            "PG_ADMIN_PASSWORD": "${PG_ADMIN_PASSWORD}",
            "PG_ADMIN_USER": "${PG_ADMIN_USER:-alp_pg_admin_user}",
            "PG_PASSWORD": "${PG_WRITE_PASSWORD}",
            "PG_SCHEMA": "cdw_config",
            "PG_USER": "${PG_WRITE_USER:-alp_pg_write_user}"
          },
          "cdw-svc": {
            "PG_PASSWORD": "${PG_WRITE_PASSWORD}",
            "PG_SCHEMA": "cdw_config",
            "PG_USER": "${PG_WRITE_USER:-alp_pg_write_user}",
            "PORT": 41114,
            "USE_CACHEDB": "${USE_CACHEDB:-true}",
            "USE_DUCKDB": "${USE_DUCKDB:-true}",
            "isHttpTestRun": "${isHttpTestRun}",
            "isTestEnv": "${isTestEnv}",
            "DUCKDB_PATH": "/home/docker/src/services/app/src/duckdb",
            "BUILT_IN_DUCKDB_PATH": "/home/docker/src/services/app/src/duckdb"
          },
          "jobplugins": {
            "PREFECT_API_URL": "http://alp-dataflow-gen-${BASE_PORT:-1}:41${BASE_PORT:-1}20/api",
            "PG_USER": "${PG_WRITE_USER:-alp_pg_write_user}",
            "PG_PASSWORD": "${PG_WRITE_PASSWORD}"
          },
          "dataset": {
            "GATEWAY_WO_PROTOCOL_FQDN": "${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}"
          },
          "alpdb": {},
          "concept-mapping": {}
        }
      SERVICE_ROUTES: |-
        {
        "analytics": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001",
        "bookmark": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/analytics-svc/api/services/bookmark",
        "cdw": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001",
        "paConfig": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/pa-config-svc",
        "trex": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001",
        "queryGen": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001",
        "dataflowMgmt": "http://alp-minerva-dataflow-mgmt-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41107",
        "dbCredentialsMgr": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/db-credentials",
        "meilisearch": "http://alp-minerva-meilisearch-svc-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41111",
        "portalServer": "http://alp-minerva-portal-server-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:33002",
        "usermgmt": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/usermgmt/api",
        "terminology": "http://alp-minerva-terminology-svc-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}:41108",
        "prefect": "http://alp-dataflow-gen-${BASE_PORT:-1}:41${BASE_PORT:-1}20/api",
        "appRouter": "https://alp-mercury-approuter:41000",
        "idIssuerUrl": "http://alp-logto-${BASE_PORT:-1}:3001/oidc",
        "minio": "",
        "fhir": "http://alp-minerva-fhir-server-${BASE_PORT:-1}:8103/fhir/R4",
        "fhirTokenUrl": "http://alp-minerva-fhir-server-1:8103/oauth2/token",
        "dicomServer": "http://alp-dicom-server:8042",
        "logto": "http://alp-logto-1:3001",
        "fhirSvc": "http://trex.${TLS__INTERNAL__DOMAIN:-alp.local}:33001/gateway/api/fhir"
        }
      PG_SUPER_PASSWORD: ${PG_SUPER_PASSWORD}
      PG_SUPER_USER: ${PG_SUPER_USER:-postgres}
      PG_MANAGE_PASSWORD: ${PG_ADMIN_PASSWORD}
      PG_MANAGE_USER: ${PG_ADMIN_USER:-alp_pg_admin_user}
      PG_PASSWORD: ${PG_WRITE_PASSWORD}
      PG_USER: ${PG_WRITE_USER:-alp_pg_write_user}
      PREFECT_API_URL: http://alp-dataflow-gen-${BASE_PORT:-1}:41${BASE_PORT:-1}20/api
      DB_CREDENTIALS__PUBLIC_KEYS: |-
        {
         "DataPlatform": "",
         "Internal": "${DB_CREDENTIALS__INTERNAL__PUBLIC_KEY}"
        }
      DB_CREDENTIALS__PRIVATE_KEY: ${DB_CREDENTIALS__INTERNAL__DECRYPT_PRIVATE_KEY}
      GATEWAY__IDP_AUTH_TYPE: logto
      GATEWAY__IDP_SUBJECT_PROP: sub
      GATEWAY__WO_PROTOCOL_FQDN: ${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}
      CADDY__ALP__PUBLIC_FQDN: ${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}
      IDP__ALP_DATA_CLIENT_ID: ${LOGTO__ALP_DATA__CLIENT_ID}
      IDP__ALP_SVC_CLIENT_ID: ${LOGTO__ALP_SVC__CLIENT_ID}
      IDP__RELYING_PARTY: ${IDP__RELYING_PARTY}
      LOGTO__AUDIENCES: https://alp-default
      LOGTO__CLIENT_ID: ${LOGTO__ALP_APP__CLIENT_ID}
      LOGTO__CLIENT_SECRET: ${LOGTO__ALP_APP__CLIENT_SECRET}
      LOGTO__ISSUER: http://alp-logto-${BASE_PORT:-1}:3001/oidc
      LOGTO__RESOURCE_API: https://alp-default
      LOGTO__SCOPE: openid offline_access profile email
      LOGTO__SVC_CLIENT_ID: ${LOGTO__ALP_SVC__CLIENT_ID}
      LOGTO__SVC_CLIENT_SECRET: ${LOGTO__ALP_SVC__CLIENT_SECRET}
      LOGTO__TOKEN_URL: http://alp-logto-${BASE_PORT:-1}:3001/oidc/token
      NODE_ENV: development
      PREFECT_DOCKER_VOLUMES: '["alp_duckdb-data-1:/app/duckdb_data", "alp_cdw-config-duckdb-data-1:/app/cdw-config/duckdb_data", "alp_r-libs:/home/docker/plugins/R/site-library", "alp_fhir-schema-file-1:/home/docker/fhir"]'
      GH_TOKEN: ${GH_TOKEN}
      PLUGINS_SEED: '["d2e-functions", "d2e-ui", "d2e-plugins"]'
      PLUGINS_API_VERSION: ${PLUGINS_API_VERSION:-latest}
      WATCH_FUNCTIONS: false
      PLUGINS_SEED_UPDATE: ${PLUGINS_SEED_UPDATE:-false}

  alp-minerva-pg-mgmt-init:
    container_name: &c15 alp-minerva-pg-mgmt-init-${BASE_PORT:-1}
    depends_on:
      alp-minerva-postgres:
        condition: service_healthy
    hostname: alp-minerva-pg-mgmt-init-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/alp-data-node/alp-pg-mgmt-init:${DOCKER_TAG_NAME:-develop}
    logging:
      options:
        tag: *c15
    networks:
      alp:
        priority: 20
    environment:
      <<:
        - *x-tls
      NODE_ENV: development
      POSTGRES_CONNECTION_CONFIG: |-
        {
         "connectionTimeoutMillis": 60000,
         "database": "${PG_DB_NAME:-alp}",
         "host": "${PG_HOST:-alp-minerva-postgres-1}",
         "idle_in_transaction_session_timeout": 60000,
         "password": "${PG_SUPER_PASSWORD}",
         "port": "${PG_PORT:-5432}",
         "query_timeout": 60000,
         "statement_timeout": 60000,
         "user": "${PG_SUPER_USER:-postgres}"
        }
      POSTGRES_MANAGE_CONFIG: |-
        {
         "databases": {
          "+${PG_DB_NAME:-alp}": {
           "schemas": {
            "+cdw_config": {},
            "+dataflow": {},
            "+db_credentials_mgr": {},
            "+portal": {},
            "+public": {},
            "+qe_config": {},
            "+terminology": {},
            "+usermgmt": {},
            "+files_manager": {},
            "+perseus": {},
            "+source": {},
            "+white_rabbit": {},
            "+trex": {}
           }
          }
         }
        }
      POSTGRES_MANAGE_USERS: |-
        {
         "${PG_DB_NAME:-alp}": {
          "manager": "${PG_ADMIN_USER:-alp_pg_admin_user}",
          "managerPassword": "${PG_ADMIN_PASSWORD}",
          "reader": "${PG_WRITE_USER:-alp_pg_write_user}",
          "readerPassword": "${PG_WRITE_PASSWORD}",
          "writer": "${PG_WRITE_USER:-alp_pg_write_user}",
          "writerPassword": "${PG_WRITE_PASSWORD}"
         }
        }
      POSTGRES_SUPERUSER: ${PG_SUPER_USER:-postgres}
      POSTGRES_SUPERUSER_PASSWORD: ${PG_SUPER_PASSWORD}
      PORT: 41110
      sqlOnly: false

  alp-caddy:
    command: caddy run --environ --config /srv/caddy-config/Caddyfile --adapter caddyfile
    container_name: &c1 alp-caddy
    hostname: alp-caddy.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: caddy:2.8-alpine
    logging:
      options:
        tag: *c1
    networks:
      alp:
        priority: 20
    platform: linux/amd64
    ports:
      - 80:80
      - 443:443
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    volumes:
      - caddy:/data
      - ./deploy/caddy-config:/srv/caddy-config
    environment:
      CADDY__ALP__PUBLIC_FQDN: ${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}
      TLS__CADDY_DIRECTIVE: ${TLS__CADDY_DIRECTIVE:-tls internal}

  alp-dataflow-gen:
    command:
      - sh
      - -c
      - "apt-get update && apt-get install -y curl && prefect server start"
    container_name: &c2 alp-dataflow-gen-${BASE_PORT:-1}
    depends_on:
      trex:
        condition: service_healthy
      alp-logto-post-init:
        condition: service_completed_successfully
    healthcheck:
      interval: 30s
      retries: 30
      start_period: 30s
      test:
        - CMD
        - curl
        - -f
        - http://localhost:41120/api/health
      timeout: 30s
    hostname: alp-dataflow-gen-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: prefecthq/prefect:3.0.3-python3.11
    logging:
      options:
        tag: *c2
    networks:
      alp:
        priority: 20
      data:
        priority: 10
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    environment:
      <<:
        - *x-converter
        - *x-pg
        - *x-tls
      LOCAL_DEBUG: "false"
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://${PG_SUPER_USER:-postgres}:${PG_SUPER_PASSWORD}@${PG_HOST:-alp-minerva-postgres-1}:${PG_PORT:-5432}/${PG_DB_NAME:-alp}
      PREFECT_API_DEFAULT_LIMIT: 5000
      PREFECT_API_URL: http://0.0.0.0:41${BASE_PORT:-1}20/api
      PREFECT_LOGGING_LEVEL: DEBUG
      PREFECT_LOGGING_SERVER_LEVEL: WARNING
      PREFECT_SERVER_ANALYTICS_ENABLED: "false"
      PREFECT_SERVER_API_HOST: 0.0.0.0
      PREFECT_UI_STATIC_DIRECTORY: /app/ui-files
      PREFECT_SERVER_API_PORT: 41${BASE_PORT:-1}20
      PREFECT_API_ENABLE_HTTP2: False
      SKIP_AUTH: ${SKIP_AUTH:-FALSE}

  alp-dataflow-gen-worker:
    command:
      - sh
      - -c
      - "apt-get update && apt-get install -y curl && pip install prefect[docker]==3.0.3 && prefect work-pool create 'docker-pool' --type docker; prefect worker start --pool 'docker-pool' --type  docker"
    container_name: &c83 alp-dataflow-gen-worker
    depends_on:
      alp-minio-post-init:
        condition: service_completed_successfully
      trex:
        condition: service_healthy
      alp-logto-post-init:
        condition: service_completed_successfully
      alp-dataflow-gen-init:
        condition: service_completed_successfully
      alp-dataflow-gen:
        condition: service_healthy
    healthcheck:
      interval: 30s
      retries: 30
      start_period: 30s
      test:
        - CMD
        - curl
        - -f
        - http://alp-dataflow-gen-1:41120/api/health
      timeout: 30s
    hostname: alp-dataflow-gen-worker.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: prefecthq/prefect:3.0.3-python3.11
    logging:
      options:
        tag: *c83
    networks:
      data:
        priority: 20
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      PREFECT_API_URL: http://alp-dataflow-gen-${BASE_PORT:-1}:41${BASE_PORT:-1}20/api
      PREFECT_API_ENABLE_HTTP2: False

  alp-dataflow-gen-init:
    command:
      - sh
      - -c
      - "yarn generate:envs -s alp-minerva-db-mgmt-svc && . ../generated-env.sh && python ../init.py"
    container_name: &c4 alp-dataflow-gen-init-${BASE_PORT:-1}
    depends_on:
      alp-dataflow-gen:
        condition: service_healthy
      trex:
        condition: service_healthy
      alp-minio-post-init:
        condition: service_completed_successfully
    hostname: alp-dataflow-gen-init-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/alp-data-node/alp-dataflow-gen:${DOCKER_TAG_NAME:-develop}
    logging:
      options:
        tag: *c4
    networks:
      alp:
        priority: 20
    platform: linux/amd64
    volumes:
      - ./services/alp-dataflow-gen/init.py:/opt/prefect/libs/init.py
    environment:
      <<:
        - *x-minio
        - *x-tls
        - *x-dbsvc
        - *x-converter
        - *x-routes
        - *cachedb
        - *python-internal-ssl
      NODE_ENV: development
      DATAFLOW_MGMT__FLOWS__RESULTS_SB_NAME: flow-results
      DATAFLOW_MGMT__FLOWS__RESULTS__S3_DIR_PATH: s3://flows/results
      PREFECT_API_URL: http://alp-dataflow-gen-${BASE_PORT:-1}:41${BASE_PORT:-1}20/api
      R_LIBS_USER: /home/docker/plugins/R/site-library
      DUCKDB__DATA_FOLDER: /app/duckdb_data
      CDW_CONFIG_DUCKDB__DATA_FOLDER: /app/cdw-config/duckdb_data
      ALP__SYSTEM_ID: ${ALP__SYSTEM_ID:-alp-research}
      OHDSI__R_COHORT_GENERATOR_MODULE_SETTINGS_URL: https://raw.githubusercontent.com/OHDSI/CohortGeneratorModule/v0.3.0/SettingsFunctions.R
      OHDSI__R_COHORT_DIAGNOSTICS_MODULE_SETTINGS_URL: https://raw.githubusercontent.com/OHDSI/CohortDiagnosticsModule/v0.2.0/SettingsFunctions.R
      STRATEGUS__KEYRING_PASSWORD: ${STRATEGUS__KEYRING_PASSWORD}
      IDP__ALP_DATA__CLIENT_ID: ${LOGTO__ALP_DATA__CLIENT_ID}
      IDP__ALP_DATA__CLIENT_SECRET: ${LOGTO__ALP_DATA__CLIENT_SECRET}
      FHIR_SCHEMA_JSON_PATH: /home/docker/fhir

  alp-fhir-server:
    container_name: &c6 alp-minerva-fhir-server-${BASE_PORT:-1}
    depends_on:
      trex:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      interval: 20s
      retries: 5
      start_period: 120s
      test:
        - CMD
        - wget
        - -O
        - fhir.status
        - http://localhost:8103/healthcheck
    hostname: alp-minerva-fhir-server-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/alp-data-node/alp-fhir-server:${DOCKER_TAG_NAME:-develop}
    logging:
      options:
        tag: *c6
    networks:
      alp:
        priority: 20
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    volumes:
      - fhir-schema-file-1:/home/docker/app/medplum/packages/definitions/dist/fhir/r4
    environment:
      <<:
        - *x-pg
        - *x-redis
        - *x-fhir
      PG_SUPER_PASSWORD: ${PG_SUPER_PASSWORD}
      PG_SUPER_USER: ${PG_SUPER_USER:-postgres}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DUCKDB_PATH: /home/docker/app
      FHIR_SCHEMA_PATH: /home/docker/app/medplum/packages/definitions/dist/fhir/r4
      FHIR_SCHEMA_FILE_NAME: fhir.schema.json

  # Needed only for future alterations of schema when version upgrades
  # alp-logto-db-post-alterations-init:
  #   depends_on:
  #       alp-minerva-postgres:
  #         condition: service_healthy
  #   image: ghcr.io/logto-io/logto:1.12
  #   entrypoint: ["sh", "-c", "npm run alteration deploy latest"]
  #   environment:
  #     CI: true
  #     DB_URL: postgres://${PG_SUPER_USER:-postgres}:${PG_SUPER_PASSWORD}@alp-minerva-postgres-1:${PG_PORT:-5432}/${PG_DB_NAME:-postgres}
  #   networks:
  #     - alp

  alp-logto-post-init:
    container_name: alp-logto-post-init-${BASE_PORT:-1}
    depends_on:
      alp-logto:
        condition: service_healthy
    image: alpcr.azurecr.io/alp-data-node/alp-logto-post-init:${DOCKER_TAG_NAME:-develop}
    networks:
      alp:
        priority: 20
    volumes:
      - ./.env.${ENV_TYPE:-local}:/run/envs/.env.${ENV_TYPE:-local}:rw
    environment:
      ENV_TYPE: ${ENV_TYPE:-local}
      PG__DB_NAME: logto
      PG__HOST: ${PG_HOST:-alp-minerva-postgres-1}
      PG__PASSWORD: ${PG_SUPER_PASSWORD}
      PG__PORT: ${PG_PORT:-5432}
      PG__USER: ${PG_SUPER_USER:-postgres}
      LOGTO__CLIENT_APPS: '[{"name":"alp-svc","description":"alp-svc","type":"MachineToMachine"},{"name":"alp-data","description":"alp-data","type":"MachineToMachine"},{"name":"alp-app","description":"alp-app","type":"Traditional","oidcClientMetadata":{"redirectUris":["https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}/portal/login-callback","https://localhost:4000/portal/login-callback","https://localhost:8081"],"postLogoutRedirectUris":["https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}/portal","https://localhost:4000/portal","https://localhost:8081"]},"customClientMetadata":{"corsAllowedOrigins":[],"refreshTokenTtlInDays":14,"alwaysIssueRefreshToken":true,"rotateRefreshToken":true}}]'
      LOGTO__RESOURCE: '{"name":"alp-default","indicator":"https://alp-default","accessTokenTtl":3600}'
      LOGTO__USER: '{"username":"admin","initialPassword":"Updatepassword12345"}'
      LOGTO__ROLES: '[{"name":"role.systemadmin","description":"ALP System admin","type":"User"},{"name":"role.useradmin","description":"ALP User admin","type":"User"},{"name":"role.tenantviewer","description":"ALP Tenant viewer","type":"User"},{"name":"role.dashboardviewer","description":"ALP Dashboard viewer","type":"User"}]'
      LOGTO__SCOPES: '[{"name":"role.systemadmin","description":"ALP System admin"},{"name":"role.useradmin","description":"ALP User admin"},{"name":"role.tenantviewer","description":"ALP Tenant viewer"},{"name":"role.dashboardviewer","description":"ALP Dashboard viewer"}]'
      LOGTO__ADMIN_SERVER__FQDN_URL: "http://alp-logto-1:3002"
      LOGTO__CLIENTID_PASSWORD__BASIC_AUTH: ${LOGTO__CLIENTID_PASSWORD__BASIC_AUTH}
      LOGTO__ALP_ADMIN_APP: '{"application": {"id": "${LOGTO_API_M2M_CLIENT_ID}", "name":"alp-admin","description":"alp-admin", "secret": "${LOGTO_API_M2M_CLIENT_SECRET}"}, "role": { "name":"api-access","description":"Logto API access"}}'

  alp-logto:
    container_name: &c8 alp-logto-${BASE_PORT:-1}
    depends_on:
      alp-minerva-pg-mgmt-init:
        condition: service_completed_successfully
    healthcheck:
      interval: 20s
      retries: 30
      start_period: 120s
      test:
        - CMD
        - wget
        - -O
        - logto.status
        - http://localhost:3001/api/status
    hostname: alp-logto-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/alp-data-node/alp-logto:${DOCKER_TAG_NAME:-develop}
    logging:
      options:
        tag: *c8
    networks:
      alp:
        priority: 20
      data:
        priority: 10
    # Enable if need to access admin console
    # ports:
    #  - 3002:3002
    entrypoint:
      - sh
      - -c
      - npm run cli db seed -- --swe && npx @logto/cli db alteration deploy 1.18.0 && npm start
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    environment:
      <<:
        - *x-tls
      ADMIN_DISABLE_LOCALHOST: ${LOGTO__DISABLE_ADMIN_CONSOLE:-false}
      # ADMIN_ENDPOINT: http://${CADDY__ALP__PUBLIC_FQDN:-localhost}:3002 # Enable if need to access admin console
      DB_URL: postgres://postgres:${PG_SUPER_PASSWORD}@alp-minerva-postgres-1:${PG_PORT:-5432}/logto
      ENDPOINT: https://${CADDY__ALP__PUBLIC_FQDN:-localhost:41100}
      LOGTO_API_M2M_CLIENT_ID: ${LOGTO_API_M2M_CLIENT_ID}
      LOGTO_API_M2M_CLIENT_SECRET: ${LOGTO_API_M2M_CLIENT_SECRET}
      LOGTO_ROLES_AZ_GROUPS_MAPPING: ${LOGTO_ROLES_AZ_GROUPS_MAPPING:-{"role.systemadmin":"37b5364a-348c-494f-b67f-a59a40e52ab7","role.useradmin":"90597adc-92af-4649-8151-68c3b7feb66c","role.tenantviewer":"50a3b140-21eb-46dd-9d81-61a77cbc81f5","role.dashboardviewer":"50a3b140-21eb-46dd-9d81-61a77cbc81f5"}}
      NODE_ENV: test
      PORT: 3001
      TRUST_PROXY_HEADER: true

  alp-minerva-dataflow-mgmt:
    container_name: &c11 alp-minerva-dataflow-mgmt-${BASE_PORT:-1}
    init: true
    depends_on:
      trex:
        condition: service_healthy
      alp-minio-post-init:
        condition: service_completed_successfully
    healthcheck:
      interval: 20s
      retries: 30
      start_period: 120s
      test:
        - CMD
        - wget
        - --no-check-certificate
        - -O
        - liveness
        - http://localhost:41107/check-liveness
      timeout: 30s
    hostname: alp-minerva-dataflow-mgmt-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/alp-data-node/alp-dataflow:${DOCKER_TAG_NAME:-develop}
    logging:
      options:
        tag: *c11
    networks:
      alp:
        priority: 20
    platform: linux/amd64
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    environment:
      <<:
        - *x-minio
        - *x-pg
        - *x-tls
        - *x-routes
      DATAFLOW_MGMT__ADHOC_FLOWS__PREFECT_SB_NAME: dataflow-adhoc-flows-sb
      DATAFLOW_MGMT__FLOWS__RESULTS_SB_NAME: flow-results
      DATAFLOW_MGMT__LOG_LEVEL: info
      DATAFLOW_MGMT__PORT: 41${BASE_PORT:-1}07
      DATAFLOW_MGMT__PREFECT__DEPLOYMENT_NAME: testflow
      DATAFLOW_MGMT__PREFECT__FLOW_NAME: exec-flow
      NODE_ENV: production
      PG__DATAFLOW_MGMT__DB_NAME: ${PG_DB_NAME:-alp}
      PG__DATAFLOW_MGMT__MANAGE_PASSWORD: ${PG_ADMIN_PASSWORD}
      PG__DATAFLOW_MGMT__MANAGE_USER: ${PG_ADMIN_USER:-alp_pg_admin_user}
      PG__DATAFLOW_MGMT__PASSWORD: ${PG_WRITE_PASSWORD}
      PG__DATAFLOW_MGMT__SCHEMA: dataflow
      PG__DATAFLOW_MGMT__USER: ${PG_WRITE_USER:-alp_pg_write_user}

  alp-minerva-meilisearch-svc:
    container_name: &c13 alp-minerva-meilisearch-svc-${BASE_PORT:-1}
    depends_on:
      alp-minerva-postgres:
        condition: service_healthy
    healthcheck:
      interval: 20s
      retries: 30
      start_period: 60s
      timeout: 30s
      test:
        - CMD
        - curl
        - http://alp-minerva-meilisearch-svc-1:41111/health
    hostname: alp-minerva-meilisearch-svc-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: getmeili/meilisearch:v1.6
    logging:
      options:
        tag: *c13
    networks:
      alp:
        priority: 20
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    volumes:
      - meilisearch-minerva-data-1:/meili_data
    environment:
      <<:
        - *x-tls
      MEILI_HTTP_ADDR: 0.0.0.0:41${BASE_PORT:-1}11
      MEILI_LOG_LEVEL: INFO
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}

  alp-minerva-portal-server:
    container_name: &c16 alp-minerva-portal-server-${BASE_PORT:-1}
    init: true
    depends_on:
      trex:
        condition: service_healthy
      alp-minerva-pg-mgmt-init:
        condition: service_completed_successfully
      alp-minio-post-init:
        condition: service_completed_successfully
    healthcheck:
      interval: 20s
      retries: 30
      start_period: 60s
      test:
        - CMD
        - wget
        - --no-check-certificate
        - -O
        - liveness
        - http://localhost:33002/check-liveness
      timeout: 30s
    hostname: alp-minerva-portal-server-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/alp-data-node/alp-portal-server:${DOCKER_TAG_NAME:-develop}
    logging:
      options:
        tag: *c16
    networks:
      alp:
        priority: 20
    platform: linux/amd64
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    environment:
      <<:
        - *x-minio
        - *x-pg
        - *x-tls
        - *x-routes
      ALP__SYSTEM_NAME: ${ALP__SYSTEM_NAME:-Research System}
      APP__DEPLOY_MODE: standalone
      APP__TENANT_ID: ${APP__TENANT_ID:-e0348e4d-2e17-43f2-a3c6-efd752d17c23}
      APP__TENANT_NAME: ${APP__TENANT_NAME:-Tenant}
      NODE_ENV: production
      PG__PORTAL_SERVER__DB_NAME: ${PG_DB_NAME:-alp}
      PG__PORTAL_SERVER__MANAGE_PASSWORD: ${PG_ADMIN_PASSWORD}
      PG__PORTAL_SERVER__MANAGE_USER: ${PG_ADMIN_USER:-alp_pg_admin_user}
      PG__PORTAL_SERVER__PASSWORD: ${PG_WRITE_PASSWORD}
      PG__PORTAL_SERVER__SCHEMA: portal
      PG__PORTAL_SERVER__USER: ${PG_WRITE_USER:-alp_pg_write_user}
      PLUGINS__JSON: *x-plugins
      PORTAL_SERVER__LOG_LEVEL: info
      PORTAL_SERVER__PORT: 33002

  alp-minerva-postgres:
    container_name: &c17 alp-minerva-postgres-${BASE_PORT:-1}
    healthcheck:
      interval: 20s
      retries: 30
      start_period: 60s
      test:
        - CMD-SHELL
        - pg_isready
        - -d
        - ${POSTGRES_DB}
      timeout: 30s
    hostname: alp-minerva-postgres-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: postgres:15-alpine
    logging:
      options:
        tag: *c17
    networks:
      alp:
        priority: 20
      data:
        priority: 10
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    shm_size: 1gb
    volumes:
      - pg-minerva-data-1:/var/lib/postgresql/data
      - ./cache/pgbackup:/backup
      - ./cache/vocab:/vocab
    environment:
      <<:
        - *x-tls
      POSTGRES_DB: ${PG_DB_NAME:-alp}
      POSTGRES_PASSWORD: ${PG_SUPER_PASSWORD}

  alp-minerva-s3:
    command:
      - server
      - /data
      - --console-address
      - :9090
    container_name: &c19 alp-minerva-s3
    healthcheck:
      interval: 20s
      retries: 30
      start_period: 60s
      test:
        - CMD
        - curl
        - -I
        - http://alp-minerva-s3:9000/minio/health/live
      timeout: 30s
    hostname: alp-minerva-s3.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    logging:
      options:
        tag: *c19
    networks:
      alp:
        priority: 20
      data:
        priority: 10
    ports:
      # - 9000:9000 #Port for API connectivity, internal communication is good enough. Needs to be uncommented only when testing from outside the alp docker network
      - 9090:9090
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    volumes:
      - minio-data-1:/data
    environment:
      <<:
        - *x-tls
      MINIO_ROOT_PASSWORD: ${MINIO__SECRET_KEY}
      MINIO_ROOT_USER: ${MINIO__ACCESS_KEY:-root}

  alp-minerva-terminology-svc:
    container_name: &c21 alp-minerva-terminology-svc-${BASE_PORT:-1}
    init: true
    depends_on:
      trex:
        condition: service_healthy
      alp-minerva-postgres:
        condition: service_healthy
      alp-meilisearch-post-init:
        condition: service_completed_successfully
    healthcheck:
      interval: 20s
      retries: 30
      start_period: 60s
      timeout: 30s
      test:
        - CMD
        - wget
        - --no-check-certificate
        - -O
        - liveness
        - http://localhost:41108/check-liveness
    hostname: alp-minerva-terminology-svc-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/alp-data-node/alp-terminology-svc:${DOCKER_TAG_NAME:-develop}
    logging:
      options:
        tag: *c21
    networks:
      alp:
        priority: 20
    platform: linux/amd64
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    environment:
      <<:
        - *x-converter
        - *x-tls
        - *x-routes
        - *x-pg
        - *cachedb
      FHIR_TERMINOLOGY_SVC__PORT: 41${BASE_PORT:-1}11
      LOCAL_DEBUG: "false"
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      NODE_ENV: development
      PG_MANAGE_PASSWORD: ${PG_ADMIN_PASSWORD}
      PG_MANAGE_USER: ${PG_ADMIN_USER:-alp_pg_admin_user}
      PG_PASSWORD: ${PG_WRITE_PASSWORD}
      PG_SCHEMA: terminology
      PG_USER: ${PG_WRITE_USER:-alp_pg_write_user}
      TERMINOLOGY_SVC__LOG_LEVEL: info
      TERMINOLOGY_SVC__PATH: terminology
      TERMINOLOGY_SVC__PORT: 41${BASE_PORT:-1}08
      USE_DUCKDB_FTS: ${USE_DUCKDB_FTS:-false}

  alp-minio-post-init:
    container_name: &c23 alp-minio-post-init
    depends_on:
      alp-minerva-s3:
        condition: service_healthy
    hostname: alp-minio-post-init.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: minio/mc
    logging:
      options:
        tag: *c23
    networks:
      alp:
        priority: 20
    entrypoint: |
      /bin/sh -c " /usr/bin/mc config host add myminio http://alp-minerva-s3:9000 ${MINIO__ACCESS_KEY:-root} ${MINIO__SECRET_KEY};
      /usr/bin/mc mb -p myminio/dataflow-adhoc-flows;
      /usr/bin/mc mb -p myminio/flows/results;
      /usr/bin/mc mb -p myminio/dicom-images;
      /usr/bin/mc policy download myminio/dataflow-adhoc-flows;
      exit 0;
      "

  redis:
    command: redis-server --requirepass ${REDIS_PASSWORD}
    container_name: &c26 alp-minerva-redis-${BASE_PORT:-1}
    healthcheck:
      interval: 20s
      retries: 10
      start_period: 60s
      timeout: 30s
      test: redis-cli --no-auth-warning -a ${REDIS_PASSWORD} ping | grep PONG
    hostname: alp-minerva-redis-${BASE_PORT:-1}.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: redis:7
    logging:
      options:
        tag: *c26
    networks:
      alp:
        priority: 20
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}

  alp-fhir-fe-server:
    container_name: &c28 alp-minerva-fhir-fe-server-${BASE_PORT:-1}
    image: alpcr.azurecr.io/alp-data-node/alp-fhir-fe-server:${DOCKER_TAG_NAME:-develop}
    logging:
      options:
        tag: *c28
    depends_on:
      alp-fhir-server:
        condition: service_started
      # alp-fhir-server-post-init:
      #   condition: service_completed_successfully
    networks:
      alp:
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    profiles: [fhir]

  alp-meilisearch-post-init:
    container_name: &c29 alp-meilisearch-post-init
    depends_on:
      alp-minerva-meilisearch-svc:
        condition: service_healthy
    image: getmeili/meilisearch:v1.6
    logging:
      options:
        tag: *c29
    entrypoint:
      - curl
      - -X
      - PATCH
      - "http://alp-minerva-meilisearch-svc-1:41${BASE_PORT:-1}11/experimental-features/"
      - -H
      - "Content-Type: application/json"
      - -H
      - "Authorization: Bearer ${MEILI_MASTER_KEY}"
      - --data-binary
      - '{ "vectorStore": true }'
    networks:
      alp:
        priority: 20
    hostname: alp-meilisearch-post-init.${TLS__INTERNAL__DOMAIN:-alp.local}
    environment:
      <<:
        - *x-tls
      MEILI_HTTP_ADDR: 0.0.0.0:41${BASE_PORT:-1}11
      MEILI_LOG_LEVEL: INFO
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}

  alp-cachedb:
    container_name: &c30 alp-cachedb
    hostname: alp-cachedb.${TLS__INTERNAL__DOMAIN:-alp.local}
    image: alpcr.azurecr.io/alp-data-node/cachedb:${DOCKER_TAG_NAME:-develop}
    platform: linux/amd64
    depends_on:
      trex:
        condition: service_healthy
      alp-logto-post-init:
        condition: service_completed_successfully
      alp-minerva-pg-mgmt-init:
        condition: service_completed_successfully
    healthcheck:
      interval: 20s
      retries: 5
      start_period: 120s
      test: ["CMD", "python", "src/utils/healthcheck.py", "41191"]
      timeout: 10s
    logging:
      options:
        tag: *c30
    networks:
      alp:
        priority: 20
      data:
        priority: 10
    restart: ${DOCKER__RESTART_POLICY:-unless-stopped}
    ports:
      - 41191:41191
    volumes:
      - duckdb-data-1:/home/docker/duckdb_data
      - cdw-config-duckdb-data-1:/home/docker/cdw_svc/duckdb_data # Volume for dynamically generated cdw-config duckdb file (refer to docs/3-configure/9-create-cdw-config-duckdb-file.md for information)
      - fhir-schema-file-1:/home/docker/fhir
    environment:
      <<:
        - *x-converter
        - *x-routes
        - *x-tls
        - *cachedb
        - *python-internal-ssl
      DUCKDB__DATA_FOLDER: /home/docker/duckdb_data
      CDW_SVC_DUCKDB_DATA_FOLDER: /home/docker/cdw_svc/duckdb_data
      CDW_SVC_BUILT_IN_DUCKDB_DATA_FOLDER: /home/docker/cdw_svc/built_in_duckdb_data
      DUCKDB_EXTENSIONS_FOLDER: /home/docker/duckdb_extensions
      IDP__ALP_DATA_CLIENT_ID: ${LOGTO__ALP_DATA__CLIENT_ID}
      LOCAL_DEBUG: "false"
    deploy:
      resources:
        limits:
          cpus: ${D2E_CPU_LIMIT:-2}
          memory: ${D2E_MEMORY_LIMIT:-7G}

  alp-perseus-files-manager:
    image: alpcr.azurecr.io/alp-data-node/alp-perseus-files-manager:${DOCKER_TAG_NAME:-develop}
    container_name: &c34 alp-perseus-files-manager-${BASE_PORT:-1}
    depends_on:
      alp-minerva-postgres:
        condition: service_healthy
      alp-minerva-pg-mgmt-init:
        condition: service_completed_successfully
    environment:
      <<:
        - *x-pg
      SPRING_PROFILES_ACTIVE: docker
      PG_ADMIN_PASSWORD: ${PG_ADMIN_PASSWORD}
      PG_ADMIN_USER: ${PG_ADMIN_USER:-alp_pg_admin_user}
    networks:
      alp:
        priority: 20
    profiles: [perseus]

  alp-perseus-backend:
    image: alpcr.azurecr.io/alp-data-node/alp-perseus-backend:${DOCKER_TAG_NAME:-develop}
    container_name: &c35 alp-perseus-backend-${BASE_PORT:-1}
    environment:
      <<:
        - *x-pg
        - *x-perseus
      PERSEUS_ENV: Docker
      PG_ADMIN_PASSWORD: ${PG_ADMIN_PASSWORD}
      PG_ADMIN_USER: ${PG_ADMIN_USER:-alp_pg_admin_user}
    depends_on:
      alp-minerva-postgres:
        condition: service_healthy
      alp-minerva-pg-mgmt-init:
        condition: service_completed_successfully
      alp-perseus-files-manager:
        condition: service_started
    networks:
      alp:
        priority: 20
    profiles: [perseus]

  alp-perseus-white-rabbit:
    image: alpcr.azurecr.io/whiterabbit:master
    container_name: &c36 alp-perseus-white-rabbit-${BASE_PORT:-1}
    platform: linux/amd64
    environment:
      <<:
        - *x-pg
        - *x-perseus
      SPRING_PROFILES_ACTIVE: docker
      PG_ADMIN_PASSWORD: ${PG_ADMIN_PASSWORD}
      PG_ADMIN_USER: ${PG_ADMIN_USER:-alp_pg_admin_user}
    depends_on:
      alp-minerva-postgres:
        condition: service_healthy
      alp-minerva-pg-mgmt-init:
        condition: service_completed_successfully
      alp-perseus-files-manager:
        condition: service_started
    networks:
      alp:
        priority: 20
    entrypoint: ["sh", "-c", "./init.sh"]
    profiles: [perseus]
