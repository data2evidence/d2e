services:
  trex:
    command: npm run startdev
    ports:
      - 9229:9229
    volumes:
      - ./functions:/usr/src/plugins/d2ef
      # - ../trex/core:/usr/src/core # For debugging trex with local code
    environment:
      LOCAL_DEBUG: "true"
      DATABASE_CREDENTIALS: ${DATABASE_CREDENTIALS:-{}}
      PLUGINS_SEED: '["d2e-flows", "d2e-ui"]'
      PLUGINS_SEED_UPDATE: ${PLUGINS_SEED_UPDATE:-false}
      PLUGINS_DEV_PATH: "./plugins"
      WATCH: |-
        {
          "analytics-svc": false,
          "mri-pg-config": false,
          "alp-db-credentials": false,
          "alp-fhir-svc": false,
          "alp-fhir-init": false,
          "query-gen-svc": false,
          "alp-usermgmt": false,
          "bookmark-svc": false,
          "mri-pa-config": false,
          "cdw-svc": false,
          "jobplugins": false,
          "dataset": false,
          "alpdb": false,
          "concept-mapping": false,
          "terminology-svc": false,
          "code-suggestion": false,
          "portal": false,
          "files-manager": false,
          "demo": false
        }

  alp-caddy:
    command: caddy run --environ --config /srv/caddy-config/Caddyfile --adapter caddyfile --watch
    image: caddy:2.8-alpine
    ports:
      - 41100:41100
      - 41000:41000
      - 41130:41130
    environment:
      CADDY__FHIR_SERVER__PUBLIC_FQDN: ${CADDY__FHIR_SERVER__PUBLIC_FQDN:-localhost}
      CADDY__CORS_LOCAL_UI: "import cors"

  alp-dataflow-gen:
    ports:
      - 41120:41120
    environment:
      PORTAL__API_URL: https://trex:33000/portalsvc/graphql
      SYSTEM_PORTAL__API_URL: https://trex:33000/system-portal/

  alp-dataflow-gen-worker:
    volumes:
      - ./services/alp-dataflow-gen/create_workpool_json.py:/opt/prefect/create_workpool_json.py

  alp-dataflow-gen-init:
    build:
      context: .
      dockerfile: ./services/alp-dataflow-gen/Dockerfile
    volumes:
      - ./services/alp-dataflow-gen/init.py:/opt/prefect/libs/init.py

  alp-logto:
    build:
      context: ./services/alp-logto
      dockerfile: Dockerfile

  alp-minerva-pg-mgmt-init:
    build:
      context: services/alp-pg-management
      dockerfile: Dockerfile
    volumes:
      - ./services/alp-pg-management/app:/home/docker/app
    environment:
      LOCAL_DEBUG: "true"

  alp-minerva-postgres:
    ports:
      - 41190:5432
      - 5432:5432

  broadsea-atlasdb:
    ports:
      - "15432:5432"

  alp-minerva-s3:
    ports:
      # - 9000:9000 #Port for API connectivity, internal communication is good enough. Needs to be uncommented only when testing from outside the alp docker network
      - 9090:9090
  #alp-dicom-server:
  # uses 8042 port on the container
  #  ports:
  #    - 8042:8042

  alp-logto-post-init:
    build:
      context: ./services/alp-logto/post-init
      dockerfile: Dockerfile
    # volumes:
    #   - ./services/alp-logto/post-init:/home/docker

  # alp-fhir-server-post-init:
  #   build:
  #     context: .
  #     dockerfile: ./services/alp-fhir/Dockerfile.client
  #   volumes:
  #     - ./services/alp-fhir/dist:/home/docker/src/alp-data-node/app/dist
  #     - ./services/alp-fhir/src:/home/docker/src/alp-data-node/app/src
  #   environment:
  #     LOCAL_DEBUG: "true"
  #   ports:
  #     - 9226:9226

  alp-cachedb:
    build:
      context: .
      dockerfile: ./services/cachedb/Dockerfile
      target: development
    volumes:
      - ./services/cachedb/src:/home/docker/src
    ports:
      - 9235:9235
      - 41191:41191
    environment:
      LOCAL_DEBUG: "true"

  alp-perseus-white-rabbit:
    environment:
      JAVA_OPTs: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    # mapping debug port 5005 for local development
    ports:
      - 5005:5005
      - 8000:8000
