namespace hc.hph.cdw.db.models;

using hc.hph.cdw.db.models::DWEntities as DWEnt;
using hc.hph.cdw.db.models::Ref as Ref;
using hc.hph.cdw.db.models::DWDocuments as DWDoc;
using hc.hph.cdw.db.models::Config as Config;
using "hc.hph.cdw.db.models::Document_SearchIndex" as "DocumentSearchIndex";
using "hc.hph.collections.db.models::CollectionModel" as "CollectionModel";
using hc.hph.ots::Views as OTSViews;
using hc.hph.di.documents.staging.db.models::DocumentProcessing as DP;
using hc.hph.cdw.db.models::Helper as Helper;
using hc.hph.cdw.db.models::DWViewsEAV as DWViewsEAV;
using hc.hph.um.user.db::userTable as UserTable;

context DWViews {

    /*********************
     *     CONDITION     *
     *********************/

    view "Condition" as select from DWEnt.Condition_Attr {
        DWID as ConditionID,
        Condition_Key_Assoc.ConditionID as SourceConditionID,
        Condition_Key_Assoc.DWSource as Source,
        ConditionType,
        Description
    } where DWDateTo is null;

    /*********************
     *      PATIENT      *
     *********************/

    // Returns all the Orgs and descendant orgs assigned via role-attribute
	
    view AllowedOrgIDs as select from Config.OrgAncestors {
		key AncestorOrgID as AncestorOrgID,
		key OrgID as OrgID
	} With Structured Privilege Check;

	// Returns all the patients which are accessible for user based on the role and org value assigned
	
    view AllowedPatientIdsWithDuplicates as select from DWViews.Interactions as _i 
		inner join AllowedOrgIDs as _o on _o.OrgID = _i.OrgID {
        key _i.InteractionID as InteractionID,
		_i.PatientID as PatientID		
    };
	
    view AllowedPatientIds as select from AllowedPatientIdsWithDuplicates distinct {
        PatientID
    };

    // Returns all patients With time dependency
    view PatientTD as select from DWEnt.Patient_Attr mixin {
        TitleVocabulary         : association[1..1] to OTSViews.Vocabularies on TitleVocabulary.ExternalID = Title.CodeSystem;
        GenderVocabulary        : association[1..1] to OTSViews.Vocabularies on GenderVocabulary.ExternalID = Gender.CodeSystem;
        MaritalStatusVocabulary : association[1..1] to OTSViews.Vocabularies on MaritalStatusVocabulary.ExternalID = MaritalStatus.CodeSystem;
        NationalityVocabulary   : association[1..1] to OTSViews.Vocabularies on NationalityVocabulary.ExternalID = Nationality.CodeSystem;
        CountryVocabulary       : association[1..1] to OTSViews.Vocabularies on CountryVocabulary.ExternalID = Address.Country.CodeSystem;
    } into {
        DWID as PatientID,
        Patient_Key_Assoc.PatientID as SourcePatientID,
        Patient_Key_Assoc.DWSource as Source,
        ValidFrom,
        ValidTo,
        OrgID,
        FamilyName,
        GivenName,
        Title.OriginalValue as TitleValue,
        Title.Code as TitleCode,
        TitleVocabulary.ID as TitleVocabularyID,
        Title.CodeSystem as TitleCodeSystem,
        Title.CodeSystemVersion as TitleCodeSystemVersion,
        Gender.OriginalValue as GenderValue,
        Gender.Code as GenderCode,
        GenderVocabulary.ID as GenderVocabularyID,
        Gender.CodeSystem as GenderCodeSystem,
        Gender.CodeSystemVersion as GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatus.OriginalValue as MaritalStatusValue,
        MaritalStatus.Code as MaritalStatusCode,
        MaritalStatusVocabulary.ID as MaritalStatusVocabularyID,
        MaritalStatus.CodeSystem as MaritalStatusCodeSystem,
        MaritalStatus.CodeSystemVersion as MaritalStatusCodeSystemVersion,
        Nationality.OriginalValue as NationalityValue,
        Nationality.Code as NationalityCode,
        NationalityVocabulary.ID as NationalityVocabularyID,
        Nationality.CodeSystem as NationalityCodeSystem,
        Nationality.CodeSystemVersion as NationalityCodeSystemVersion,
        Address.StreetName,
        Address.StreetNumber,
        Address.PostOfficeBox,
        Address.City,
        Address.PostalCode,
        Address.State,
        Address.Region,
        Address.Country.OriginalValue as CountryValue,
        Address.Country.Code as CountryCode,
        CountryVocabulary.ID as CountryVocabularyID,
        Address.Country.CodeSystem as CountryCodeSystem,
        Address.Country.CodeSystemVersion as CountryCodeSystemVersion,
        Telecom.Phone,
        Telecom.Mobile,
        Telecom.Fax,
        Telecom.Email
    } where DWDateTo is null;

    // Patients that are semantically valid in current_utctimestamp
    // The time intervall is left-closed and right-open
    view Patient as select from DWViews.PatientTD {
        PatientID,
        SourcePatientID,
        Source,
        OrgID,
        FamilyName,
        GivenName,
        TitleValue,
        TitleCode,
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email
    } where (ValidFrom is null or ValidFrom = to_date('0000-00-00') or ValidFrom <= current_utcdate)
        and (current_utcdate < ValidTo or ValidTo IS NULL or ValidTo = to_date('0000-00-00'));

    // Returns a list of allowed patients, including time-dependent information.
    // Restricts access to patients by joining with the AllowedPatientIds view.
    view V_GuardedPatientTD as select from DWViews.PatientTD  as _ptd
        inner join AllowedPatientIds as _apid on _ptd.PatientID = _apid.PatientID{
        _ptd.PatientID,
        _ptd.SourcePatientID,
        _ptd.Source,
        _ptd.OrgID,
        _ptd.ValidFrom,
        _ptd.ValidTo,
        _ptd.FamilyName,
        _ptd.GivenName,
        _ptd.TitleValue,
        _ptd.TitleCode,
        _ptd.TitleVocabularyID,
        _ptd.TitleCodeSystem,
        _ptd.TitleCodeSystemVersion,
        _ptd.GenderValue,
        _ptd.GenderCode,
        _ptd.GenderVocabularyID,
        _ptd.GenderCodeSystem,
        _ptd.GenderCodeSystemVersion,
        _ptd.BirthDate,
        _ptd.MultipleBirthOrder,
        _ptd.DeceasedDate,
        _ptd.MaritalStatusValue,
        _ptd.MaritalStatusCode,
        _ptd.MaritalStatusVocabularyID,
        _ptd.MaritalStatusCodeSystem,
        _ptd.MaritalStatusCodeSystemVersion,
        _ptd.NationalityValue,
        _ptd.NationalityCode,
        _ptd.NationalityVocabularyID,
        _ptd.NationalityCodeSystem,
        _ptd.NationalityCodeSystemVersion,
        _ptd.StreetName,
        _ptd.StreetNumber,
        _ptd.PostOfficeBox,
        _ptd.City,
        _ptd.PostalCode,
        _ptd.State,
        _ptd.Region,
        _ptd.CountryValue,
        _ptd.CountryCode,
        _ptd.CountryVocabularyID,
        _ptd.CountryCodeSystem,
        _ptd.CountryCodeSystemVersion,
        _ptd.Phone,
        _ptd.Mobile,
        _ptd.Fax,
        _ptd.Email
    };

    // Returns a list of allowed Patients.
    // All required analytic privileges/DCLs shall be applied on this view to restrict patient access.
    // Deprecated since FP02. Kept for legacy reasons until FP03
    view GuardedPatientTD as select from DWViews.PatientTD {
        PatientID,
        SourcePatientID,
        Source,
        OrgID,
        ValidFrom,
        ValidTo,
        FamilyName,
        GivenName,
        TitleValue,
        TitleCode,
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email
    };



    // Returns a list of allowed patients (only the most recent entry of each).
    view V_GuardedPatient as select from DWViews.V_GuardedPatientTD as _gptd {
        _gptd.PatientID,
        _gptd.SourcePatientID,
        _gptd.Source,
        _gptd.OrgID,
        _gptd.FamilyName,
        _gptd.GivenName,
        _gptd.TitleValue,
        _gptd.TitleCode,
        _gptd.TitleVocabularyID,
        _gptd.TitleCodeSystem,
        _gptd.TitleCodeSystemVersion,
        _gptd.GenderValue,
        _gptd.GenderCode,
        _gptd.GenderVocabularyID,
        _gptd.GenderCodeSystem,
        _gptd.GenderCodeSystemVersion,
        _gptd.BirthDate,
        _gptd.MultipleBirthOrder,
        _gptd.DeceasedDate,
        _gptd.MaritalStatusValue,
        _gptd.MaritalStatusCode,
        _gptd.MaritalStatusVocabularyID,
        _gptd.MaritalStatusCodeSystem,
        _gptd.MaritalStatusCodeSystemVersion,
        _gptd.NationalityValue,
        _gptd.NationalityCode,
        _gptd.NationalityVocabularyID,
        _gptd.NationalityCodeSystem,
        _gptd.NationalityCodeSystemVersion,
        _gptd.StreetName,
        _gptd.StreetNumber,
        _gptd.PostOfficeBox,
        _gptd.City,
        _gptd.PostalCode,
        _gptd.State,
        _gptd.Region,
        _gptd.CountryValue,
        _gptd.CountryCode,
        _gptd.CountryVocabularyID,
        _gptd.CountryCodeSystem,
        _gptd.CountryCodeSystemVersion,
        _gptd.Phone,
        _gptd.Mobile,
        _gptd.Fax,
        _gptd.Email
    } where (_gptd.ValidFrom is null or _gptd.ValidFrom = to_date('0000-00-00') or _gptd.ValidFrom <= current_utcdate)
        and (current_utcdate < _gptd.ValidTo or _gptd.ValidTo IS NULL or _gptd.ValidTo = to_date('0000-00-00'));

    // Returns all allowed patients with time dependency
    // All required analytic privileges/DCLs shall be applied on this view to restrict patient access.
    // Deprecated since FP02. Kept for legacy reasons until FP03
    view GuardedPatient as select from DWViews.PatientTD {
        PatientID,
        SourcePatientID,
        Source,
        OrgID,
        FamilyName,
        GivenName,
        TitleValue,
        TitleCode,
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email
    } where (ValidFrom is null or ValidFrom = to_date('0000-00-00') or ValidFrom <= current_utcdate)
        and (current_utcdate < ValidTo or ValidTo IS NULL or ValidTo = to_date('0000-00-00')) with structured privilege check;

    /***********************
     * PATIENT BEST RECORD *
     ***********************/

    view Patient_BestRecord as select from DWEnt.Patient_BestRecord_Attr {
        DWID as DWID_Patient,
        Patient_Key_Assoc.PatientID as SourcePatientID,
        Patient_Key_Assoc.DWSource as Source,
        PatientBestRecordID
    } where DWDateTo is Null;

    view AllowedPatientBestRecordIdsWithDuplicates as select from Patient_BestRecord as _pbr
        inner join AllowedPatientIdsWithDuplicates as _ap on _pbr.DWID_Patient = _ap.PatientID {
        PatientBestRecordID,
        _ap.PatientID,
        SourcePatientID,
        Source,
        _ap.InteractionID
    };

    view AllowedPatientBestRecordIds as select from AllowedPatientBestRecordIdsWithDuplicates distinct {
        PatientBestRecordID
    };

    view PatientBestRecord as select from Ref.PatientBestRecord mixin {
        TitleVocabulary         : association[1..1] to OTSViews.Vocabularies on TitleVocabulary.ExternalID = Title.CodeSystem;
        GenderVocabulary        : association[1..1] to OTSViews.Vocabularies on GenderVocabulary.ExternalID = Gender.CodeSystem;
        MaritalStatusVocabulary : association[1..1] to OTSViews.Vocabularies on MaritalStatusVocabulary.ExternalID = MaritalStatus.CodeSystem;
        NationalityVocabulary   : association[1..1] to OTSViews.Vocabularies on NationalityVocabulary.ExternalID = Nationality.CodeSystem;
        CountryVocabulary       : association[1..1] to OTSViews.Vocabularies on CountryVocabulary.ExternalID = Address.Country.CodeSystem;
        } into {
        PatientBestRecordID as PatientBestRecordID,
        FamilyName,
        GivenName,
        Title.OriginalValue as TitleValue,
        Title.Code as TitleCode,
        TitleVocabulary.ID as TitleVocabularyID,
        Title.CodeSystem as TitleCodeSystem,
        Title.CodeSystemVersion as TitleCodeSystemVersion,
        Gender.OriginalValue as GenderValue,
        Gender.Code as GenderCode,
        GenderVocabulary.ID as GenderVocabularyID,
        Gender.CodeSystem as GenderCodeSystem,
        Gender.CodeSystemVersion as GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatus.OriginalValue as MaritalStatusValue,
        MaritalStatus.Code as MaritalStatusCode,
        MaritalStatusVocabulary.ID as MaritalStatusVocabularyID,
        MaritalStatus.CodeSystem as MaritalStatusCodeSystem,
        MaritalStatus.CodeSystemVersion as MaritalStatusCodeSystemVersion,
        Nationality.OriginalValue as NationalityValue,
        Nationality.Code as NationalityCode,
        NationalityVocabulary.ID as NationalityVocabularyID,
        Nationality.CodeSystem as NationalityCodeSystem,
        Nationality.CodeSystemVersion as NationalityCodeSystemVersion,
        Address.StreetName,
        Address.StreetNumber,
        Address.PostOfficeBox,
        Address.City,
        Address.PostalCode,
        Address.State,
        Address.Region,
        Address.Country.OriginalValue as CountryValue,
        Address.Country.Code as CountryCode,
        CountryVocabulary.ID as CountryVocabularyID,
        Address.Country.CodeSystem as CountryCodeSystem,
        Address.Country.CodeSystemVersion as CountryCodeSystemVersion,
        Telecom.Phone,
        Telecom.Mobile,
        Telecom.Fax,
        Telecom.Email
    } where DWDateTo is null;

    // Restricted patient list from PatientBestRecord entries.
    view V_GuardedPatientBestRecord as select from PatientBestRecord as pbr
        inner join AllowedPatientBestRecordIds as apbr on pbr.PatientBestRecordID = apbr.PatientBestRecordID{
        pbr.PatientBestRecordID,
        pbr.FamilyName,
        pbr.GivenName,
        pbr.TitleValue,
        pbr.TitleCode,
        pbr.TitleVocabularyID,
        pbr.TitleCodeSystem,
        pbr.TitleCodeSystemVersion,
        pbr.GenderValue,
        pbr.GenderCode,
        pbr.GenderVocabularyID,
        pbr.GenderCodeSystem,
        pbr.GenderCodeSystemVersion,
        pbr.BirthDate,
        pbr.MultipleBirthOrder,
        pbr.DeceasedDate,
        pbr.MaritalStatusValue,
        pbr.MaritalStatusCode,
        pbr.MaritalStatusVocabularyID,
        pbr.MaritalStatusCodeSystem,
        pbr.MaritalStatusCodeSystemVersion,
        pbr.NationalityValue,
        pbr.NationalityCode,
        pbr.NationalityVocabularyID,
        pbr.NationalityCodeSystem,
        pbr.NationalityCodeSystemVersion,
        pbr.StreetName,
        pbr.StreetNumber,
        pbr.PostOfficeBox,
        pbr.City,
        pbr.PostalCode,
        pbr.State,
        pbr.Region,
        pbr.CountryValue,
        pbr.CountryCode,
        pbr.CountryVocabularyID,
        pbr.CountryCodeSystem,
        pbr.CountryCodeSystemVersion,
        pbr.Phone,
        pbr.Mobile,
        pbr.Fax,
		pbr.Email
    };

    view InteractionsWithPatientBestRecord as select from DWViews.Interactions as int
        inner join Patient_BestRecord pbr on int.PatientID = pbr.DWID_Patient {
        int.InteractionID as InteractionID,
        int.SourceInteractionID as SourceInteractionID,
        int.Source as Source,
        pbr.PatientBestRecordID as PatientID,
        int.ParentInteractionID as ParentInteractionID,
        int.ConditionID as ConditionID,
        int.InteractionTypeValue as InteractionTypeValue,
        int.InteractionTypeCode as InteractionTypeCode,
        int.InteractionTypeVocabularyID as InteractionTypeVocabularyID,
        int.InteractionTypeCodeSystem as InteractionTypeCodeSystem,
        int.InteractionTypeCodeSystemVersion as InteractionTypeCodeSystemVersion,
        int.InteractionStatus as InteractionStatus,
        int.PeriodStart as PeriodStart,
        int.PeriodEnd as PeriodEnd,
        int.PeriodTimezone as PeriodTimezone,
        int.OrgID as OrgID
    };

    view V_GuardedInteractionsWithPatientBestRecord as select from V_GuardedInteractions as int
            inner join Patient_BestRecord pbr on int.PatientID = pbr.DWID_Patient {
        int.InteractionID as InteractionID,
        int.SourceInteractionID as SourceInteractionID,
        int.Source as Source,
        pbr.PatientBestRecordID as PatientID,
        int.ParentInteractionID as ParentInteractionID,
        int.ConditionID as ConditionID,
        int.InteractionTypeValue as InteractionTypeValue,
        int.InteractionTypeCode as InteractionTypeCode,
        int.InteractionTypeVocabularyID as InteractionTypeVocabularyID,
        int.InteractionTypeCodeSystem as InteractionTypeCodeSystem,
        int.InteractionTypeCodeSystemVersion as InteractionTypeCodeSystemVersion,
        int.InteractionStatus as InteractionStatus,
        int.PeriodStart as PeriodStart,
        int.PeriodEnd as PeriodEnd,
        int.PeriodTimezone as PeriodTimezone,
        int.OrgID as OrgID
    };

    view GuardedPatientDocumentCount as select from V_GuardedPatient mixin {
        _PatientDocumentsCnt: association[1..1] to PatientDocumentsCnt on _PatientDocumentsCnt.PatientID = PatientID;
    }into{
        PatientID as PatientID,
        SourcePatientID,
        Source,
        OrgID,
        FamilyName,
        GivenName,
        TitleValue,
        TitleCode,
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email,
        _PatientDocumentsCnt.cnt as DocumentCount
    };

    /*********************
    *    PRACTITIONER    *
    *********************/

    // Returns all practitioners With time dependency
    view PractitionerTD as select from DWEnt.Practitioner_Attr mixin {
        TitleVocabulary         : association[1..1] to OTSViews.Vocabularies on TitleVocabulary.ExternalID = Title.CodeSystem;
        GenderVocabulary        : association[1..1] to OTSViews.Vocabularies on GenderVocabulary.ExternalID = Gender.CodeSystem;
        RoleVocabulary          : association[1..1] to OTSViews.Vocabularies on RoleVocabulary.ExternalID = Role.CodeSystem;
        SpecialityVocabulary    : association[1..1] to OTSViews.Vocabularies on SpecialityVocabulary.ExternalID = Speciality.CodeSystem;
        MaritalStatusVocabulary : association[1..1] to OTSViews.Vocabularies on MaritalStatusVocabulary.ExternalID = MaritalStatus.CodeSystem;
        NationalityVocabulary   : association[1..1] to OTSViews.Vocabularies on NationalityVocabulary.ExternalID = Nationality.CodeSystem;
        CountryVocabulary       : association[1..1] to OTSViews.Vocabularies on CountryVocabulary.ExternalID = Address.Country.CodeSystem;
    } into {
        DWID as PractitionerID,
        Practitioner_Key_Assoc.PractitionerID as SourcePractitionerID,
        Practitioner_Key_Assoc.DWSource as Source,
        ValidFrom,
        ValidTo,
        OrgID,
        FamilyName,
        GivenName,
        BirthDate,
        Title.OriginalValue as TitleValue,
        Title.Code as TitleCode,
        TitleVocabulary.ID as TitleVocabularyID,
        Title.CodeSystem as TitleCodeSystem,
        Title.CodeSystemVersion as TitleCodeSystemVersion,
        Gender.OriginalValue as GenderValue,
        Gender.Code as GenderCode,
        GenderVocabulary.ID as GenderVocabularyID,
        Gender.CodeSystem as GenderCodeSystem,
        Gender.CodeSystemVersion as GenderCodeSystemVersion,
        Role.OriginalValue as RoleValue,
        Role.Code as RoleCode,
        RoleVocabulary.ID as RoleVocabularyID,
        Role.CodeSystem as RoleCodeSystem,
        Role.CodeSystemVersion as RoleCodeSystemVersion,
        Speciality.OriginalValue as SpecialityValue,
        Speciality.Code as SpecialityCode,
        SpecialityVocabulary.ID as SpecialityVocabularyID,
        Speciality.CodeSystem as SpecialityCodeSystem,
        Speciality.CodeSystemVersion as SpecialityCodeSystemVersion,
        MaritalStatus.OriginalValue as MaritalStatusValue,
        MaritalStatus.Code as MaritalStatusCode,
        MaritalStatusVocabulary.ID as MaritalStatusVocabularyID,
        MaritalStatus.CodeSystem as MaritalStatusCodeSystem,
        MaritalStatus.CodeSystemVersion as MaritalStatusCodeSystemVersion,
        Nationality.OriginalValue as NationalityValue,
        Nationality.Code as NationalityCode,
        NationalityVocabulary.ID as NationalityVocabularyID,
        Nationality.CodeSystem as NationalityCodeSystem,
        Nationality.CodeSystemVersion as NationalityCodeSystemVersion,
        Address.StreetName,
        Address.StreetNumber,
        Address.PostOfficeBox,
        Address.City,
        Address.PostalCode,
        Address.State,
        Address.Region,
        Address.Country.OriginalValue as CountryValue,
        Address.Country.Code as CountryCode,
        CountryVocabulary.ID as CountryVocabularyID,
        Address.Country.CodeSystem as CountryCodeSystem,
        Address.Country.CodeSystemVersion as CountryCodeSystemVersion,
        Telecom.Phone,
        Telecom.Mobile,
        Telecom.Fax,
        Telecom.Email,
        PreferredLanguage
    } where DWDateTo is null;

    // Semantically valid Practitioner records
    view Practitioner as select from DWViews.PractitionerTD {
        PractitionerID,
        SourcePractitionerID,
        Source,
        OrgID,
        FamilyName,
        GivenName,
        TitleValue,
        TitleCode,
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        RoleValue,
        RoleCode,
        RoleVocabularyID,
        RoleCodeSystem,
        RoleCodeSystemVersion,
        SpecialityValue,
        SpecialityCode,
        SpecialityVocabularyID,
        SpecialityCodeSystem,
        SpecialityCodeSystemVersion,
        BirthDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email,
        PreferredLanguage
    } where (ValidFrom is null or ValidFrom = to_date('0000-00-00') or ValidFrom <= current_utcdate)
        and (current_utcdate < ValidTo or ValidTo IS NULL or ValidTo = to_date('0000-00-00'));

    view _Patient_Practitioner_Attr as select from DWEnt.Patient_Practitioner_Link_Attr mixin {
        RoleVocabulary  : association[1..1] to OTSViews.Vocabularies on RoleVocabulary.ExternalID = Role.CodeSystem;
    } into {
        DWLinkID,
        Role.OriginalValue as RoleValue,
        Role.Code as RoleCode,
        RoleVocabulary.ID as RoleVocabularyID,
        Role.CodeSystem as RoleCodeSystem,
        Role.CodeSystemVersion as RoleCodeSystemVersion
    } where DWDateTo is null;

    view Patient_Practitioner as select from DWEnt.Patient_Practitioner_Link mixin {
        Patient_Practitioner_Link_Attr  : association[1..1] to _Patient_Practitioner_Attr on Patient_Practitioner_Link_Attr.DWLinkID = DWLinkID;
    } into {
        DWLinkID as ID,
        DWID_Patient as PatientID,
        Patient_Key_Assoc.PatientID as SourcePatientID,
        Patient_Key_Assoc.DWSource as SourcePatient,
        DWID_Practitioner as PractitionerID,
        Practitioner_Key_Assoc.PractitionerID as SourcePractitionerID,
        Practitioner_Key_Assoc.DWSource as SourcePractitioner,
        Patient_Practitioner_Link_Attr.RoleValue,
        Patient_Practitioner_Link_Attr.RoleCode,
        Patient_Practitioner_Link_Attr.RoleVocabularyID,
        Patient_Practitioner_Link_Attr.RoleCodeSystem,
        Patient_Practitioner_Link_Attr.RoleCodeSystemVersion
    } where DWDateTo is null;

    /*********************
     *    OBSERVATIONS   *
     *********************/

    view Observations as select from DWEnt.Observations_Attr {
        DWID as ObsID,
        Observations_Key_Assoc.ObsID as SourceObsID,
        Observations_Key_Assoc.DWSource as Source,
        ObsType,
        DWID_Patient AS PatientID,
        ObsCharValue,
        ObsNumValue,
        ObsUnit,
        ObsTime,
        OrgID
    } where DWDateTo is null;


    /*********************
     *    INTERACTIONS   *
     *********************/
    view AllowedInteractionIds as select from Config.UserOrgMapping as _u
                    inner join Config.OrgAncestors as _o on _u.OrgID = _o.AncestorOrgID
                    inner join DWViews.Interactions as _i on _i.OrgID = _o.OrgID distinct{

        _i.InteractionID
    } WHERE _u."UserName" = SESSION_CONTEXT ( 'APPLICATIONUSER' )
;

    view Interactions as select from DWEnt.Interactions_Attr mixin {
        InteractionTypeVocabulary : association[1..1] to OTSViews.Vocabularies on InteractionTypeVocabulary.ExternalID = InteractionType.CodeSystem;
    } into {
        DWID as InteractionID,
        Interactions_Key_Assoc.InteractionID as SourceInteractionID,
        Interactions_Key_Assoc.DWSource as Source,
        DWID_Patient as PatientID,
        DWID_ParentInteraction as ParentInteractionID,
        DWID_Condition as ConditionID,
        InteractionType.OriginalValue as InteractionTypeValue,
        InteractionType.Code as InteractionTypeCode,
        InteractionTypeVocabulary.ID as InteractionTypeVocabularyID,
        InteractionType.CodeSystem as InteractionTypeCodeSystem,
        InteractionType.CodeSystemVersion as InteractionTypeCodeSystemVersion,
        InteractionStatus,
        PeriodStart,
        PeriodEnd,
        PeriodTimezone,
        OrgID
    } where DWDateTo is null;


    // Returns all allowed interactions
    view V_GuardedInteractions as select from DWViews.Interactions as _i
        inner join AllowedInteractionIds _a on _a.InteractionID = _i.InteractionID {
        _i.InteractionID,
        _i.SourceInteractionID,
        _i.Source,
        _i.PatientID,
        _i.ParentInteractionID,
        _i.ConditionID,
        _i.InteractionTypeValue,
        _i.InteractionTypeCode,
        _i.InteractionTypeVocabularyID,
        _i.InteractionTypeCodeSystem,
        _i.InteractionTypeCodeSystemVersion,
        _i.InteractionStatus,
        _i.PeriodStart,
        _i.PeriodEnd,
        _i.PeriodTimezone,
        _i.OrgID
    };

    // Returns all allowed Interactions.
    // All required analytic privileges/DCLs shall be applied on this view to restrict interaction access.
    // Deprecated since FP02. Kept for legacy reasons until FP03
    view GuardedInteractions as select from DWViews.Interactions {
        InteractionID,
        SourceInteractionID,
        Source,
        PatientID,
        ParentInteractionID,
        ConditionID,
        InteractionTypeValue,
        InteractionTypeCode,
        InteractionTypeVocabularyID,
        InteractionTypeCodeSystem,
        InteractionTypeCodeSystemVersion,
        InteractionStatus,
        PeriodStart,
        PeriodEnd,
        OrgID
    } with structured privilege check;


    view DocumentTypeSessionLangDescription as select from DWDoc.Document_Type mixin {
        _SpecificDescription: association[1..1] to DWDoc.Document_Type_Description on _SpecificDescription.DWDocumentType = DWDocumentType;
        _UILang: association[1..1] to UserTable.USER_ATTRIBUTES on _UILang.attribute_id = 'chplocale' and _UILang.username=SESSION_CONTEXT ( 'APPLICATIONUSER' );
    }into{
        DWDocumentType,
        _SpecificDescription.LanguageCode,
        _SpecificDescription.ShortText,
        _UILang.entry as SessionLang
    } where _SpecificDescription.LanguageCode = _UILang.entry;

    view DocumentTypePreferredText as select from DWDoc.Document_Type mixin {
        _EnglishDescription: association[1..1] to DWDoc.Document_Type_Description on _EnglishDescription.DWDocumentType = DWDocumentType and _EnglishDescription.LanguageCode = 'en';
        _PreferredDescription: association[1..1] to DocumentTypeSessionLangDescription on _PreferredDescription.DWDocumentType = DWDocumentType;
    } into {
    DWDocumentType,
    coalesce(_PreferredDescription.LanguageCode, _EnglishDescription.LanguageCode, '') as LanguageCode,
    coalesce(_PreferredDescription.ShortText, _EnglishDescription.ShortText, DWDocumentType) as ShortText
    };

    view Document as select from DWDoc.Document_Attr mixin{
        _PreferredTypeText: association[1..1] to DocumentTypePreferredText on _PreferredTypeText.DWDocumentType = Type;
    }into {
        DWID AS DocumentID,
        Document_Key_Assoc.DocumentID as OriginalDocumentID,
        Document_Key_Assoc.DWSource as Source,
        //IFNULL(Title,Document_Key_Assoc.DocumentID) as Title,
        Title,
        Author,
        FileName,
        Type,
        _PreferredTypeText.ShortText as TypeText,
        MIMEType,
        LanguageCode,
        CreatedAt,
        CreatedBy,
        ChangedAt,
        ChangedBy
    } where DWDateTo is null;

    //Only necessary because of row table
    view DocumentWithoutUserParameters as select from DWDoc.Document_Attr {
        DWID AS DocumentID,
        Document_Key_Assoc.DocumentID as OriginalDocumentID,
        Document_Key_Assoc.DWSource as Source,
        Title,
        Author,
        FileName,
        Type,
        Type as TypeText,
        MIMEType,
        LanguageCode,
        CreatedAt,
        CreatedBy,
        ChangedAt,
        ChangedBy
    } where DWDateTo is null;

    view DocumentTypeDescriptions as select from DWDoc.Document_Type {
        Document_Type.DWDocumentType,
        Document_Type.Document_Type_Description_Assoc.LanguageCode,
        Document_Type.Document_Type_Description_Assoc.ShortText
    };



    view InteractionDocuments as select from DWDoc.Interaction_Documents_Link_Attr  {
        Int_Doc_Lnk_Ass.DWID_Interaction as InteractionID,
        Int_Doc_Lnk_Ass.DWID_Document as DocumentID,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.Title,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.Author,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.FileName,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.Type,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.Type as TypeText,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.MIMEType,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.LanguageCode,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.CreatedAt,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.CreatedBy,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.ChangedAt,
        Int_Doc_Lnk_Ass.Documents_Key_Assoc.Document_Attr_Assoc.ChangedBy
    } where DWDateTo is null and Int_Doc_Lnk_Ass.DWDateTo is null and
       Int_Doc_Lnk_Ass.Documents_Key_Assoc.DWID is not null and
       Int_Doc_Lnk_Ass.Interactions_Key_Assoc.Int_Atr_Ass.DWDateTo is null
       and LinkType is null;



    view PatientDocuments as select from DWDoc.Interaction_Documents_Link_Attr as Int_Attr
    inner join DWDoc.Interaction_Documents_Link as Int_Link on Int_Attr.DWLinkID = Int_Link.DWLinkID
    inner join Document as _Document on Int_Link.DWID_Document = _Document.DocumentID
    inner join Interactions as Interactions on Int_Link.DWID_Interaction = Interactions.InteractionID {
    	Int_Link.DWID_Interaction as InteractionID,
        Int_Link.DWID_Document as DocumentID,
        Interactions.PatientID,
        _Document.Title,
        _Document.Author,
        _Document.FileName,
        _Document.Type,
        _Document.TypeText,
        _Document.MIMEType,
        _Document.LanguageCode,
        _Document.CreatedAt,
        _Document.CreatedBy,
        _Document.ChangedAt,
        _Document.ChangedBy
    }where Int_Attr.DWDateTo is null and Int_Link.DWDateTo is null and Int_Attr.LinkType is null;

    //Only necessary because of row table
    view PatientDocumentsWithoutUserParameters as select from DWDoc.Interaction_Documents_Link_Attr as Int_Attr
    inner join DWDoc.Interaction_Documents_Link as Int_Link on Int_Attr.DWLinkID = Int_Link.DWLinkID
    inner join DocumentWithoutUserParameters as _DocumentWithoutUserParameters on Int_Link.DWID_Document = _DocumentWithoutUserParameters.DocumentID
    inner join Interactions as Interactions on Int_Link.DWID_Interaction = Interactions.InteractionID {
    	Int_Link.DWID_Interaction as InteractionID,
        Int_Link.DWID_Document as DocumentID,
        Interactions.PatientID,
        _DocumentWithoutUserParameters.Title,
        _DocumentWithoutUserParameters.Author,
        _DocumentWithoutUserParameters.FileName,
        _DocumentWithoutUserParameters.Type,
        _DocumentWithoutUserParameters.TypeText,
        _DocumentWithoutUserParameters.MIMEType,
        _DocumentWithoutUserParameters.LanguageCode,
        _DocumentWithoutUserParameters.CreatedAt,
        _DocumentWithoutUserParameters.CreatedBy,
        _DocumentWithoutUserParameters.ChangedAt,
        _DocumentWithoutUserParameters.ChangedBy
    }where Int_Attr.DWDateTo is null and Int_Link.DWDateTo is null and Int_Attr.LinkType is null;


    view PatientDocumentsCnt as select from PatientDocumentsWithoutUserParameters {
        PatientID,
        count(PatientID) as cnt
    } group by PatientID;


    view PatientDocumentContent as select from PatientDocumentsWithoutUserParameters as PatientDocuments join DocumentSearchIndex as _dsi
        on PatientDocuments.DocumentID = _dsi.DWID {
        PatientDocuments.PatientID as PatientID,
        _dsi.DWID as DocumentID,
        PatientDocuments.Title,
        PatientDocuments.Author,
        PatientDocuments.FileName,
        PatientDocuments.Type,
        PatientDocuments.TypeText,
        PatientDocuments.MIMEType,
        PatientDocuments.LanguageCode,
        PatientDocuments.CreatedAt,
        PatientDocuments.CreatedBy,
        PatientDocuments.ChangedAt,
        PatientDocuments.ChangedBy,
        _dsi.Content as Content
    };


    view V_GuardedPatientDocuments as select from PatientDocumentsWithoutUserParameters mixin {
        _Interactions: association[1..1] to V_GuardedInteractions on _Interactions.InteractionID = InteractionID;
    } into {
        _Interactions.PatientID as PatientID,
        _Interactions.InteractionID as InteractionID,
        DocumentID,
        Title,
        Author,
        FileName,
        Type,
        TypeText,
        MIMEType,
        LanguageCode
        LanguageCode,
        CreatedAt,
        CreatedBy,
        ChangedAt,
        ChangedBy
    } where _Interactions.InteractionID is not null;

    view DWDocumentType as select from DWDoc.Document_Type mixin {
    _Document : association [1..*] to Document on DWDocumentType = _Document.Type;
    }into{
        DWDocumentType,
        count(_Document.Type) as DocTypeCount
    }GROUP BY DWDocumentType;

    view InteractionDetailsOTS as select from DWViewsEAV.Interaction_Details details
        inner join OTSViews.Classification class
        on  class.VocabularyID = details.ValueVocabularyID
        and class.Code         = details.ValueCode
        inner join OTSViews.ConceptPreferredTerms terms
        on  terms.ConceptVocabularyID = class.ClassVocabularyID
        and terms.ConceptCode         = class.ClassCode {
            details.InteractionID                 as InteractionID,
            details.AttributeValue                as AttributeValue,
            details.AttributeCode                 as AttributeCode,
            details.AttributeCodeSystem           as AttributeCodeSystem,
            details.AttributeCodeSystemVersion    as AttributeCodeSystemVersion,
            details.Value                         as Value,
            details.ValueCode                     as ValueCode,
            details.ValueCodeSystem				  as ValueCodeSystem,
            details.ValueCodeSystemVersion        as ValueCodeSystemVersion,
            class.ClassCode                       as TARGET_CODE,
            class.ClassVocabularyID               as TARGET_VOCABULARY_ID,
            class.ClassHierarchyLevel             as HIERARCHY_LEVEL,
            class.Context                         as SUBJECT,
            terms.TermContext                     as TERM_CONTEXT,
            terms.TermText                        as DESCRIPTION,
            terms.TermLanguage                    as LANGUAGE
        };

view CollectionsAsObservation as select from CollectionModel.Collection  C
    inner join CollectionModel.Item I  on C.Id = I.Collection.Id
    inner join Patient P on I.Id = P.PatientID
    inner join CollectionModel.Participant U on U.Collection.Id = C.Id
    {
     P.PatientID,
     C.Title || ' -- ' || U.CreatedBy AS ObsCharValue,
     'COLLECTION' AS ObsType,
     I.Status.Id AS StatusId
    } where U.HANAUserName = SESSION_CONTEXT ( 'APPLICATIONUSER' ) ;

view CohortStatusAsObservation as select from CollectionModel.Collection C
    inner join CollectionModel.Item I on C.Id = I.Collection.Id
    inner join CollectionModel.CohortsStatusConfig S on S.Id = I.Status.Id
    inner join Patient P on I.Id = P.PatientID
    inner join CollectionModel.Participant U on U.Collection.Id = C.Id
    {
     P.PatientID,
     S.TextKey AS ObsCharValue,
     'COLLECTION_STATUS' AS ObsType,
     I.Status.Id AS ObsID,
     S.Language as Language
     } where U.HANAUserName = SESSION_CONTEXT ( 'APPLICATIONUSER' )
        AND S.Language = IFNULL(SUBSTR(session_context('LOCALE'),1,2), 'en') ; 

view CohortAsInteraction as select from CollectionModel.Collection  C
    inner join CollectionModel.Item I  on C.Id = I.Collection.Id
    inner join Patient P on I.Id = P.PatientID
    inner join CollectionModel.Participant U on U.Collection.Id = C.Id
    left join CollectionModel.CohortsStatusConfig S on S.Id = I.Status.Id
    {
     P.PatientID,
     P.PatientID as InteractionID,
     C.Title || ' -- ' || U.CreatedBy as CohortName, 
     U.CreatedBy as CreatedBy, 
     S.TextKey as CohortStatus,
     I.Status.Id AS StatusId,
     S.Language,
     C.CreatedAt as PeriodStart,
     C.CreatedAt as PeriodEnd
    } where U.HANAUserName = SESSION_CONTEXT ( 'APPLICATIONUSER' ) 
        AND S.Language = IFNULL(SUBSTR(session_context('LOCALE'),1,2), 'en');

};
