PROCEDURE "hc.hph.um.org.db.procs::update_org" 
		( IN i_org_details "hc.hph.um.org.db.models::ConfigTypes.Org_Details",
		  IN i_org_details_eav "hc.hph.um.org.db.models::ConfigTypes.OrgAttrEAVForProc", 
		  OUT o_message TABLE ("Status" NVARCHAR(1), "Code" NVARCHAR(100), "Message" NVARCHAR(100))) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	AS
BEGIN
	
	--declare ot_message "hc.hph.um.org.db.models.TT_UM_ERROR";
	declare v_creator NVARCHAR(256); 
	declare v_current_timestamp TIMESTAMP;
	declare v_end_timestamp TIMESTAMP; 
	declare v_org_id NVARCHAR(100);
	declare v_org_id_eav NVARCHAR(100);
	declare v_eav_details_exist INTEGER;
	declare c_parent_org_id NVARCHAR(100);
	declare u_parent_org_id NVARCHAR(100);
	declare status NVARCHAR(1);
	declare message NVARCHAR(100);
	declare org_ids "hc.hph.um.org.db.models::ConfigTypes.OrgIdStructForProc";
	declare org_id_org "hc.hph.um.org.db.models::ConfigTypes.OrgIdStructForProc";
	declare org_id_parent "hc.hph.um.org.db.models::ConfigTypes.OrgIdStructForProc";
	
	declare org_ids_change_require_for_ancestor "hc.hph.um.org.db.models::ConfigTypes.OrgIdStructForProc";
	declare count INT;
	declare parent_change_count INT;
	
	declare cursor organizations for select * from :i_org_details;
	
	
	declare no_org_data condition for SQL_ERROR_CODE 10001;
	declare cyclic_org_hierarchy condition for SQL_ERROR_CODE 10001;
	declare error_in_manage_ancestors_for_orgs condition for SQL_ERROR_CODE 10001;
	declare error_inactive_parent_found condition for SQL_ERROR_CODE 10001;
	
	declare exit handler for error_in_manage_ancestors_for_orgs
    begin
       o_message = select 'E' as "Status",
                            ::SQL_ERROR_CODE as "Code",
                            ::SQL_ERROR_MESSAGE as "Message"
                    from "hc::DUMMY";    
    end;
    	
	declare exit handler for error_inactive_parent_found
    begin
       o_message = select 'E' as "Status",
                            ::SQL_ERROR_CODE as "Code",
                            ::SQL_ERROR_MESSAGE as "Message"
                    from "hc::DUMMY";    
    end;
    	
    declare exit handler for cyclic_org_hierarchy
    begin
       o_message = select 'E' as "Status",
                            ::SQL_ERROR_CODE as "Code",
                            ::SQL_ERROR_MESSAGE as "Message"
                    from "hc::DUMMY";    
    end;
	declare exit handler for no_org_data
	begin
		o_message = select 	'E' as "Status",
							::SQL_ERROR_CODE as "Code",
		       				::SQL_ERROR_MESSAGE as "Message"
		   			from "hc::DUMMY";
	end;
	
	declare exit handler for sqlexception
	begin
		o_message = select 	'E' as "Status",
							::SQL_ERROR_CODE as "Code",
		       				::SQL_ERROR_MESSAGE as "Message"
		   			from "hc::DUMMY";    
	end;
	
	select session_context('XS_APPLICATIONUSER') into v_creator from "hc::DUMMY";
	select current_utctimestamp into v_current_timestamp from "hc::DUMMY";
	select to_timestamp('9999-12-31') into v_end_timestamp from "hc::DUMMY";
	
	-- Checking the input, if there is exact one then check, is there OrgID present or not inside current DB
	-- Currently all case is not checked here, it should be done before
	select count(*) into count from :i_org_details;
	if count = 1 then
		select "OrgID" into v_org_id from "hc.hph.cdw.db.models::Config.Org"
			where "OrgID" = (select "OrgID" from :i_org_details) limit 1; 
				
		if :v_org_id is null then	
			signal no_org_data set MESSAGE_TEXT = 'Not Valid ORG ID';					
		end if;
	else if count = 0 then
			signal no_org_data set MESSAGE_TEXT = 'No data found to update';
		end if;
	end if;
	
	--org_id_org= select "OrgID" from :i_org_details;
	--org_id_parent=select "ParentOrgID" from :i_org_details;
	
	ord_ids = select '' as "OrgID" from "hc::DUMMY";
	
	-- Getting the records where parent org id is changed
	
	select count(*) into parent_change_count from 
					(select "OrgID", "ParentOrgID" from "hc.hph.cdw.db.models::Config.Org" where "ValidTo" > current_utctimestamp) as org
					inner join
					:i_org_details as i_org
					on org."OrgID" = i_org."OrgID" where org."ParentOrgID" <> i_org."ParentOrgID";
	
	if parent_change_count > 0 then
		org_ids = select org."OrgID" from 
					(select "OrgID", "ParentOrgID" from "hc.hph.cdw.db.models::Config.Org" where "ValidTo" > current_utctimestamp) as org
					inner join
					:i_org_details as i_org
					on org."OrgID" = i_org."OrgID" where org."ParentOrgID" <> i_org."ParentOrgID";
	else
		org_ids = select "OrgID" from :i_org_details;
		 
	end if;

	for organization AS organizations do
		-- Reseting the count	
		count := 0;
		
		-- Get the active ParentOrgID 
		select count("ParentOrgID") into count from "hc.hph.cdw.db.models::Config.Org"
			WHERE "OrgID" = organization."OrgID" and current_utctimestamp >= "ValidFrom" and (current_utctimestamp < "ValidTo" or "ValidTo" IS NULL);
		
		if count > 0 then
			select "ParentOrgID" into c_parent_org_id from "hc.hph.cdw.db.models::Config.Org"
				WHERE "OrgID" = organization."OrgID" and current_utctimestamp >= "ValidFrom" and (current_utctimestamp < "ValidTo" or "ValidTo" IS NULL);
		else 
			c_parent_org_id := null;
		end if;
		
		-- Check : parent org must not Inactive 
		if organization."ParentOrgID" = '' or organization."ParentOrgID" = null then
			-- Do nothing, as this org is root org
		else
			select count("OrgID") into count from "hc.hph.cdw.db.models::Config.Org"
				where "OrgID" = organization."ParentOrgID" and "ValidTo" > current_utctimestamp and "Status" = 'Inactive';
			
			if count = 1 then
				signal error_inactive_parent_found set MESSAGE_TEXT = 'Error! Inactive parent found';
			end if;
		end if;
		
		select count(*) into v_eav_details_exist from :i_org_details_eav;
		 
		--Adjust the validity of the ORG ID details records.
		update "hc.hph.cdw.db.models::Config.Org" 
			set "ValidTo" = :v_current_timestamp, "ChangeDetails.ChangedBy" = :v_creator, "ChangeDetails.ChangedAt" = :v_current_timestamp, "Status" = 'Inactive'
			where "OrgID" = organization."OrgID" and ("ValidTo" > current_utctimestamp or "ValidTo" = null);
	
		
		if :v_eav_details_exist > 0 then
			update "hc.hph.cdw.db.models::Config.OrgAttrEAV"
				set "ValidTo" = :v_current_timestamp, "ChangeDetails.ChangedBy" = :v_creator, "ChangeDetails.ChangedAt" = :v_current_timestamp
				where "OrgID" = organization."OrgID";
		end if;
		
		-- Add new records.
		insert into "hc.hph.cdw.db.models::Config.Org"
		(
			"OrgID",
			"ValidFrom",
			"ValidTo",
			"ParentOrgID",
			"OrgName", 
			"Type", 
			"Status",
			"Address.StreetName",
			"Address.StreetNumber", 
			"Address.PostOfficeBox",
			"Address.City", 
			"Address.PostalCode", 
			"Address.State",
			"Address.Country.OriginalValue", 
			"Address.Region", 
			"Telecom.Phone",
			"URL", 
			"ChangeDetails.CreatedBy", 
			"ChangeDetails.CreatedAt", 
			"ChangeDetails.ChangedBy", 
			"ChangeDetails.ChangedAt",
			"ExternalOrgID",
			"ExternalSource" 
		) values (
			organization."OrgID",
			:v_current_timestamp,
			:v_end_timestamp,
			organization."ParentOrgID",
			organization."Name",
			organization."Type",
			organization."Status",
			organization."Address.StreetName",
			organization."Address.StreetNumber",
			organization."Address.PostOfficeBox",
			organization."Address.City",
			organization."Address.PostalCode",
			organization."Address.State",
			organization."Address.Country.OriginalValue",
			organization."Address.Region",
			organization."Telecom.Phone",
			organization."URL",
			:v_creator,
			:v_current_timestamp,
			:v_creator,
			:v_current_timestamp,
			organization."ExternalOrgID",
			organization."ExternalSource"
			
		);
	
		if :v_eav_details_exist > 0 then
			insert into "hc.hph.cdw.db.models::Config.OrgAttrEAV"
				( select "OrgID", :v_current_timestamp as "ValidFrom", :v_end_timestamp as "ValidTo", 
						 "Attribute", "Value",
						 :v_creator, :v_current_timestamp, :v_creator, :v_current_timestamp			 
						 from :i_org_details_eav);
		end if;
		
		-- Get the new org id
		count := 0;
	
	end for;

	count := 0;
	select count(*) into count from (select distinct * 
				from "hc.hph.cdw.db.models::CVOrg/hier/ORG_PC_HIER" ('expression' = 'AscendantsOrSelf(nodes(),0)')
				where "QUERY_NODE" = "RESULT_NODE" and "DISTANCE" < 0 limit 1);

	if count > 0 then
		signal cyclic_org_hierarchy set MESSAGE_TEXT = 'Error! Cyclic hierarchy found';
	end if;
	-- Handel org reassignment update case, if reassignment happens then update the org ascestores table
	-- If parent changed then re-structure the flat organcestor table 
	
	if parent_change_count > 0 then
		-- Get the all child for current
			
		org_ids_change_require_for_ancestor = select "org"."OrgID" from "hc.hph.cdw.db.models::Config.OrgAncestors" as "org" 
			inner join :org_ids as "orgdet"
			on "org"."AncestorOrgID"="orgdet"."OrgID";
			
		CALL "hc.hph.um.org.db.procs::manage_ancestors_for_orgs"(:org_ids_change_require_for_ancestor, 'I', :o_message);
	end if;

	count := 0;
	select count(*) into count from :o_message;
	if count > 0 then
	    select "Status" into status from :o_message;
	    if status = 'E' then 
	    	select "Message" into message from :o_message;
	    	signal error_in_manage_ancestors_for_orgs set MESSAGE_TEXT = message;
	    end if;
	end if;
	o_message = select 'S' as "Status",
					   null as "Code",
	       			   'Organizational details are updated successfully' as "Message"
	   			from "hc::DUMMY";    
	
			
END;
