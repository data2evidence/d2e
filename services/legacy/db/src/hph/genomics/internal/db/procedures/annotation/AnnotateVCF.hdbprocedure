PROCEDURE "hc.hph.genomics.internal.db.procedures.annotation::AnnotateVCF" ( 
		IN dwAuditID BIGINT,
	 	IN dwAuditIDFeatureTable BIGINT
	 ) 
	 Language SQLSCRIPT 
	 SQL SECURITY DEFINER 
	 AS 
begin 

declare referenceID String ;
select distinct "ReferenceID" 
into referenceID 
from "hc.hph.genomics.db.models::Reference.FeaturesAnnotation" 
where "DWAuditID"= :dwAuditIDFeatureTable ;

delete from "hc.hph.genomics.db.models::SNV.VariantAnnotations"  where "DWAuditID"=:dwAuditID;

 geneAnnotationNonCoding = select
	 va."DWAuditID",
	 va."VariantIndex",
	 variants."ChromosomeIndex",
	 variants."Position",
	 va."AlleleIndex",
	 va."Allele" as ALTALLELE,
	 ref."Allele" as REFALLELE,
 	 featAnnotate."FeatureName" as "FeatureName",
	 featAnnotate."Class",
	 case when length(ref."Allele") = length(va."Allele") 
THEN case when length(ref."Allele") =1 
THEN 'SNP' 
ELSE 'MNP' 
END 
ELSE case WHEN length(ref."Allele") > length(va."Allele") 
THEN CASE WHEN locate(ref."Allele",
	 va."Allele") > 0 
THEN 'DEL' 
ELSE 'MIXED' 
END 
ELSE CASE WHEN length(va."Allele") >length(ref."Allele") 
THEN CASE WHEN locate(va."Allele",
	 ref."Allele") >0 
THEN 'INS' 
ELSE 'MIXED' 
END 
END 
END 
END as vt,
	 (case when featAnnotate."Class" = 'intergenic_region' 
	then null 
	else innerFeat."FeatureID" 
	end) as "GENENAME",
	 featAnnotate."Class" as "Region",
	 featAnnotate."Strand" 
	 
from "hc.hph.genomics.db.models::SNV.VariantAlleles" as va 
inner join "hc.hph.genomics.db.models::SNV.Variants" as variants on (va."VariantIndex" = variants."VariantIndex" 
	and va."AlleleIndex" >0 
	and (variants."DWAuditID" = :dwAuditID 
		or :dwAuditID is null) 
	and variants."DWAuditID" = va."DWAuditID") 
inner join "hc.hph.genomics.db.models::Reference.Chromosomes" as chromosomes on (variants."ChromosomeIndex" = chromosomes."ChromosomeIndex" 
	and (va."DWAuditID" = :dwAuditID 
		or :dwAuditID is null) 
	and chromosomes."ReferenceID"=:referenceID) 
inner join (select
	 "Allele",
	 "DWAuditID",
	 "VariantIndex" 
	from "hc.hph.genomics.db.models::SNV.VariantAlleles" 
	where "AlleleIndex" =0 
	and ("DWAuditID"=:dwAuditID 
		or :dwAuditID is null))as ref on (ref."VariantIndex" = va."VariantIndex" 
	and ref."DWAuditID" = va."DWAuditID" 
	and (ref."DWAuditID"=:dwAuditID 
		or :dwAuditID is null) 
	and va."AlleleIndex" >0) 
left outer join "hc.hph.genomics.db.models::Reference.Features" as innerFeat on (innerFeat."ChromosomeIndex" = variants."ChromosomeIndex" 
	and innerFeat."Class" ='gene' 
	and variants."Position" between innerFeat."Region.Begin" 
	and innerFeat."Region.End"-1 
	and (variants."DWAuditID" = :dwAuditID 
		or :dwAuditID is null) --can we skip this and use only FA table
	and innerFeat."DWAuditID"= :dwAuditIDFeatureTable) 
left outer join "hc.hph.genomics.db.models::Reference.FeaturesAnnotation" as featAnnotate on (featAnnotate."ChromosomeIndex" = variants."ChromosomeIndex" 
	and variants."Position" between featAnnotate."Region.Begin" 
	and featAnnotate."Region.End"-1 
	and featAnnotate."DWAuditID" = :dwAuditIDFeatureTable 
	and (va."DWAuditID" = :dwAuditID 
		or :dwAuditID is null)) 
where va."AlleleIndex" >0 
and (va."DWAuditID" = :dwAuditID 
	or :dwAuditID is null) 
and va."DWAuditID" = variants."DWAuditID" -- and featAnnotate."Class" in ('five_prime_UTR','intergenic_region','intron','three_prime_UTR','trans_splice_acceptor_site','trans_splice_donor_site')
;
geneAnnotationNonCodingNeg=select * from :geneAnnotationNonCoding where "Strand"='-' order by "VariantIndex";
geneAnnotationNonCodingPos=select * from :geneAnnotationNonCoding where "Strand"='+' order by "VariantIndex";

call "hc.hph.plugins.vcf.db.procedures.annotation::VCFNegativeStrandAnnotation"(:geneAnnotationNonCodingNeg,:dwAuditID,:dwAuditIDFeatureTable,geneAnnotationCodingNeg);
call "hc.hph.plugins.vcf.db.procedures.annotation::VCFPositiveStrandAnnotation"(:geneAnnotationNonCodingPos,:dwAuditID,:dwAuditIDFeatureTable,geneAnnotationCodingPos);
geneAnnotationCoding = 
select * from :geneAnnotationCodingPos 
union all
select * from :geneAnnotationCodingNeg;

--select * from :geneAnnotationCoding;


aminoAcid = select
	 vtfinal."DWAuditID",
	 vtfinal."VariantIndex",
	 vtfinal."AlleleIndex",
	 vtfinal."ChromosomeIndex",
	 vtfinal."Position",
	 vtfinal."GENENAME",
	 vtfinal."Region",
	 vtfinal.vt,
 	 vtfinal.REFCODON ,
	 vtfinal."ALTALLELE",
	 vtfinal."REFALLELE",
	 vtfinal."CDSPosition",
	 (select
	 "AminoAcid" 
	from "hc.hph.genomics.db.models::Reference.Codons" as codons 
	where codons."ChromosomeIndex" = vtfinal."ChromosomeIndex" 
	and codons."ReferenceID" = :referenceID 
	and codons."Codon"= (case when vtfinal."Strand" = '-' 
		then "hc.hph.genomics.db.procedures.annotation::GetReverseComplement" (vtfinal.ALTCODON) 
		else vtfinal.ALTCODON 
		end)) as "ALTAMINO",
	 (select
	 "AminoAcid" 
	from "hc.hph.genomics.db.models::Reference.Codons" as codons 
	where codons."ChromosomeIndex" = vtfinal."ChromosomeIndex" 
	and codons."ReferenceID" = :referenceID 
	and codons."Codon"= (case when vtfinal."Strand" = '-' 
		then "hc.hph.genomics.db.procedures.annotation::GetReverseComplement" (vtfinal.REFCODON) 
		else vtfinal.REFCODON 
		end)) as "REFAMINO" 
from :geneAnnotationCoding as vtfinal 
;
 insert 
into "hc.hph.genomics.db.models::SNV.VariantAnnotations" ("DWAuditID",
	 "VariantIndex",
	 "AlleleIndex",
	 "ChromosomeIndex",
	 "Position",
	 "GeneName",
	 "Region",
	 "SequenceAlteration",
	 "AminoAcid.Reference",
	 "AminoAcid.Alternative",
	 "MutationType") (select
	 distinct geneAnnotationNonCoding."DWAuditID",
	 geneAnnotationNonCoding."VariantIndex",
	 geneAnnotationNonCoding."AlleleIndex",
	 geneAnnotationNonCoding."ChromosomeIndex",
	 geneAnnotationNonCoding."Position",
	 geneAnnotationNonCoding."GENENAME",
	 geneAnnotationNonCoding."Region",
	 geneAnnotationNonCoding.vt,
	 null,
	 null,
	 "hc.hph.genomics.db.procedures.annotation::GetMutationType" (geneAnnotationNonCoding."Region",
	 null,
	 null,
	 null,
	 null,
	 geneAnnotationNonCoding.vt)
    from :geneAnnotationNonCoding as geneAnnotationNonCoding -- where geneAnnotationNonCoding."Region" in ('five_prime_UTR','intergenic_region','intron','three_prime_UTR','trans_splice_acceptor_site','trans_splice_donor_site',null,''));
 
	where geneAnnotationNonCoding."Region" not in ('CDS_region',
	 'start_codon',
	 'stop_codon',
	 'five_prime_UTR',
	 'three_prime_UTR') 
	or geneAnnotationNonCoding."Region" is null) 
;

insert 
into "hc.hph.genomics.db.models::SNV.VariantAnnotations" ("DWAuditID",
	 "VariantIndex",
	 "AlleleIndex",
	 "ChromosomeIndex",
	 "Position",
	 "GeneName",
	 "Region",
	 "SequenceAlteration",
	 "AminoAcid.Reference",
	 "AminoAcid.Alternative",
	 "MutationType","CDSPosition") (select
	 distinct aminoAcid."DWAuditID",
	 aminoAcid."VariantIndex",
	 aminoAcid."AlleleIndex",
	 aminoAcid."ChromosomeIndex",
	 aminoAcid."Position",
	 aminoAcid."GENENAME",
	 aminoAcid."Region",
	 aminoAcid.vt,
	 (case when aminoAcid.vt = 'INS' 
		or aminoAcid.vt = 'DEL' 
		then null 
		else aminoAcid.REFAMINO 
		end),
	 (case when aminoAcid.vt = 'INS' 
		or aminoAcid.vt = 'DEL' 
		then null 
		else aminoAcid.ALTAMINO 
		end),
	 "hc.hph.genomics.db.procedures.annotation::GetMutationType" (aminoAcid."Region",
	 aminoAcid."REFALLELE",
	 aminoAcid."ALTALLELE",
	 aminoAcid."REFAMINO",
	 aminoAcid."ALTAMINO",
	 aminoAcid.vt),
	 aminoAcid."CDSPosition"
	from :aminoAcid as aminoAcid ) 
;





END;