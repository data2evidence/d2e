PROCEDURE "hc.hph.genomics.db.procedures.vb::DisplayVariants" (
        IN sample_list "hc.hph.genomics.db.models::General.SampleList",
        IN variant_grouping "hc.hph.genomics.db.models::VariantBrowser.VariantAnnotationGrouping",
        IN chromosome_index INTEGER,
        IN begin_position INTEGER,
        IN end_position INTEGER,
        OUT display_variants "hc.hph.genomics.db.models::VariantBrowser.GroupedDisplayVariants",
        OUT sample_count INTEGER
    )
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    READS SQL DATA AS
BEGIN
    DECLARE position_array INTEGER ARRAY;
    DECLARE allele_array VARCHAR( 255 ) ARRAY;
    DECLARE grouping_array TINYINT ARRAY;
    DECLARE allele_count_array INTEGER ARRAY;
    DECLARE copy_number_array INTEGER ARRAY;
    DECLARE reference_allele VARCHAR( 255 );
    DECLARE variant_group TINYINT;
    DECLARE alternative_allele VARCHAR( 255 );
    DECLARE position_cursor INTEGER;
    DECLARE inner_position_cursor INTEGER;
    DECLARE outer_position_cursor INTEGER;
    DECLARE row_index INTEGER := 1;
    DECLARE groupingCount INTEGER;
    DECLARE last_reference_allele VARCHAR( 255 );
    DECLARE CURSOR grouped_variants ( data_model_variants "hc.hph.genomics.db.models::VariantBrowser.GroupedDataModelVariants" ) FOR
        SELECT
            "Position",
            "AlleleIndex",
            "Allele",
            "AlleleCount",
            SUM( "AlleleCount" / "GroupCount" ) OVER ( PARTITION BY "Position" ) AS "CopyNumber",
            "Grouping"
        FROM
            :data_model_variants 
        ORDER BY
            "Position" ASC,
            "AlleleIndex" ASC;

    -- find sites overlapping selected area
    variant_positions = SELECT DISTINCT
            "Position"
        FROM
            "hc.hph.genomics.db.models::VariantBrowser.DataModelVariants"
        WHERE
            "ChromosomeIndex" = :chromosome_index AND
            "Position" < :end_position AND
            "Position" + LENGTH( "Allele" ) >= :begin_position AND
            ( "AlleleIndex" = 0 OR "AlleleCount" > 0 );

    SELECT COUNT( * ) INTO groupingCount FROM :variant_grouping;
    IF groupingCount > 0 THEN
        -- query data model variants
        SELECT COUNT( DISTINCT "PatientDWID" ) INTO sample_count FROM :sample_list AS samples INNER JOIN "hc.hph.genomics.db.models::General.Samples" AS all_samples ON samples."SampleIndex" = all_samples."SampleIndex";
        IF :sample_count = 1 THEN
            DECLARE sample_index INTEGER;
            SELECT "SampleIndex" INTO sample_index FROM :sample_list;
    
            data_model_variants = SELECT
                    variants."Position",
                    variants."AlleleIndex",
                    variants."Allele",
                    SUM( variants."AlleleCount" ) AS "AlleleCount"
                FROM
                    "hc.hph.genomics.db.models::VariantBrowser.DataModelVariants" AS variants
                WHERE
                    variants."ChromosomeIndex" = :chromosome_index AND
                    variants."Position" IN ( SELECT * FROM :variant_positions ) AND
                    variants."SampleIndex" = :sample_index AND
                    ( variants."AlleleIndex" = 0 OR variants."AlleleCount" > 0 )
                GROUP BY
                    variants."Position",
                    variants."AlleleIndex",
                    variants."Allele";
        ELSEIF :sample_count > 1 THEN
            data_model_variants = SELECT
                    variants."Position",
                    variants."AlleleIndex",
                    variants."Allele",
                    SUM( variants."AlleleCount" ) AS "AlleleCount"
                FROM
                    "hc.hph.genomics.db.models::VariantBrowser.DataModelVariants" AS variants
                WHERE
                    variants."ChromosomeIndex" = :chromosome_index AND
                    variants."Position" IN ( SELECT * FROM :variant_positions ) AND
                    variants."SampleIndex" IN ( SELECT * FROM :sample_list ) AND
                    ( variants."AlleleIndex" = 0 OR variants."AlleleCount" > 0 )
                GROUP BY
                    variants."Position",
                    variants."AlleleIndex",
                    variants."Allele";
        END IF;
            
        allele_grouping = SELECT 
            variants."Position",
            variants."AlleleIndex", 
            groups."Grouping"
            FROM :variant_grouping AS groups
            JOIN "hc.hph.genomics.db.models::VariantBrowser.DataModelVariants" AS variants
                ON groups."DWAuditID" = variants."DWAuditID" AND
                groups."VariantIndex" = variants."VariantIndex" AND
                groups."AlleleIndex" = variants."AlleleIndex";            
    
        grouped_data_model_variants = SELECT 
            variants."Position",
            variants."AlleleIndex",
            variants."Allele",
            groups."Grouping",
            COUNT(*) OVER ( PARTITION BY variants."Position", variants."AlleleIndex" ) AS "GroupCount",
            variants."AlleleCount"
            FROM :data_model_variants AS variants
            LEFT OUTER JOIN :allele_grouping AS groups
                ON variants."Position" = groups."Position" AND
                variants."AlleleIndex" = groups."AlleleIndex"
            ORDER BY
                variants."Position",
                variants."AlleleIndex",
                groups."Grouping";
    
        -- iterate over data model variants transforming them into display variants
        IF :sample_count > 0 THEN
        	FOR variant AS grouped_variants ( :grouped_data_model_variants ) DO
        	    IF variant."Position" = :outer_position_cursor THEN
        	        reference_allele := last_reference_allele;
        	    ELSE
        	        reference_allele := 'N';
        	    END IF;
        	    IF variant."AlleleIndex" = 0 THEN
        	        reference_allele := variant."Allele";
        	        last_reference_allele := variant."Allele";
        	        outer_position_cursor := variant."Position";
        	    ELSEIF variant."AlleleIndex" > 0 AND variant."AlleleCount" > 0 THEN
        	        variant_group := variant."Grouping";
        	        grouping_array[ :row_index ] := variant_group;
        	        alternative_allele := variant."Allele";
        	        inner_position_cursor := variant."Position";
        	        WHILE LENGTH( :reference_allele ) > 0 OR LENGTH( :alternative_allele ) > 0 DO
        	            IF LENGTH( :reference_allele ) <= 1 AND LENGTH( :alternative_allele ) > LENGTH( :reference_allele ) THEN -- insertion
                            position_array[ :row_index ] := :inner_position_cursor;
                            allele_count_array[ :row_index ] := variant."AlleleCount";
                            copy_number_array[ :row_index ] := variant."CopyNumber";
                            allele_array[ :row_index ] := :alternative_allele;
            	            BREAK;
        	            ELSEIF LENGTH( :alternative_allele ) = 0 THEN -- deletion
                            allele_array[ :row_index ] := '';
            	            reference_allele := SUBSTRING( :reference_allele, 2 );
        	            ELSEIF SUBSTRING( :reference_allele, 1, 1 ) <> SUBSTRING( :alternative_allele, 1, 1 ) THEN -- substitution
                            allele_array[ :row_index ] := SUBSTRING( :alternative_allele, 1, 1 );
            	            reference_allele := SUBSTRING( :reference_allele, 2 );
            	            alternative_allele := SUBSTRING( :alternative_allele, 2 );
        	            ELSE -- reference
            	            reference_allele := SUBSTRING( :reference_allele, 2 );
            	            alternative_allele := SUBSTRING( :alternative_allele, 2 );
            	            inner_position_cursor := :inner_position_cursor + 1;
        	                CONTINUE;
        	            END IF;
        
                        position_array[ :row_index ] := :inner_position_cursor;
                        allele_count_array[ :row_index ] := variant."AlleleCount";
                        copy_number_array[ :row_index ] := variant."CopyNumber";
                        
        
        	            inner_position_cursor := :inner_position_cursor + 1;
        	            row_index := :row_index + 1;
        	        END WHILE;
        	    END IF;
            END FOR;
        END IF;
        -- create output table and combine overlapping alleles
        grouped_unaggregated_display_variants = UNNEST( :position_array, :allele_array, :allele_count_array, :copy_number_array, :grouping_array ) AS ( "Position", "Allele", "AlleleCount", "CopyNumber", "Grouping" );
        display_variants = SELECT
                "Position",
                "Allele",
                "Grouping",
                SUM( "AlleleCount" ) AS "AlleleCount",
                MAX( "CopyNumber" ) AS "CopyNumber"
            FROM
                :grouped_unaggregated_display_variants
            WHERE
                "Position" BETWEEN :begin_position AND
                :end_position - 1 
            GROUP BY
                "Position",
                "Allele",
                "Grouping"
            ORDER BY
                "Position" ASC,
                "AlleleCount" DESC,
                "Grouping";
        
    ELSE
        DECLARE CURSOR variants ( data_model_variants "hc.hph.genomics.db.models::VariantBrowser.DataModelVariants" ) FOR
        SELECT
            "Position",
            "AlleleIndex",
            "Allele",
            "AlleleCount",
            SUM( "AlleleCount" ) OVER ( PARTITION BY "Position" ) AS "CopyNumber"
        FROM
            :data_model_variants
        ORDER BY
            "Position" ASC,
            "AlleleIndex" ASC;
            
        -- query data model variants
        SELECT COUNT( DISTINCT "PatientDWID" ) INTO sample_count FROM :sample_list AS samples INNER JOIN "hc.hph.genomics.db.models::General.Samples" AS all_samples ON samples."SampleIndex" = all_samples."SampleIndex";
        IF :sample_count = 1 THEN
            DECLARE sample_index INTEGER;
            SELECT "SampleIndex" INTO sample_index FROM :sample_list;
    
            data_model_variants = SELECT
                    "Position",
                    "AlleleIndex",
                    "Allele",
                    SUM( "AlleleCount" ) AS "AlleleCount"
                FROM
                    "hc.hph.genomics.db.models::VariantBrowser.DataModelVariants"
                WHERE
                    "ChromosomeIndex" = :chromosome_index AND
                    "Position" IN ( SELECT * FROM :variant_positions ) AND
                    "SampleIndex" = :sample_index AND
                    ( "AlleleIndex" = 0 OR "AlleleCount" > 0 )
                GROUP BY
                    "Position",
                    "AlleleIndex",
                    "Allele"
                ORDER BY
                    "Position",
                    "AlleleIndex";
        ELSEIF :sample_count > 1 THEN
            data_model_variants = SELECT
                    "Position",
                    "AlleleIndex",
                    "Allele",
                    SUM( "AlleleCount" ) AS "AlleleCount"
                FROM
                    "hc.hph.genomics.db.models::VariantBrowser.DataModelVariants"
                WHERE
                    "ChromosomeIndex" = :chromosome_index AND
                    "Position" IN ( SELECT * FROM :variant_positions ) AND
                    "SampleIndex" IN ( SELECT * FROM :sample_list ) AND
                    ( "AlleleIndex" = 0 OR "AlleleCount" > 0 )
                GROUP BY
                    "Position",
                    "AlleleIndex",
                    "Allele"
                ORDER BY
                    "Position",
                    "AlleleIndex";
        END IF;
    
        -- iterate over data model variants transforming them into display variants
        IF :sample_count > 0 THEN
        	FOR variant AS variants ( :data_model_variants ) DO
        	    IF variant."Position" = :outer_position_cursor THEN
        	        reference_allele := last_reference_allele;
        	    ELSE
        	        reference_allele := 'N';
        	    END IF;
        	    IF variant."AlleleIndex" = 0 THEN
        	        reference_allele := variant."Allele";
        	        last_reference_allele := variant."Allele";
        	        outer_position_cursor := variant."Position";
        	    ELSEIF variant."AlleleIndex" > 0 AND variant."AlleleCount" > 0 THEN
        	        alternative_allele := variant."Allele";
        	        inner_position_cursor := variant."Position";
        	        WHILE LENGTH( :reference_allele ) > 0 OR LENGTH( :alternative_allele ) > 0 DO
        	            IF LENGTH( :reference_allele ) <= 1 AND LENGTH( :alternative_allele ) > LENGTH( :reference_allele ) THEN -- insertion
                            position_array[ :row_index ] := :inner_position_cursor;
                            allele_count_array[ :row_index ] := variant."AlleleCount";
                            copy_number_array[ :row_index ] := variant."CopyNumber";
                            allele_array[ :row_index ] := :alternative_allele;
            	            BREAK;
        	            ELSEIF LENGTH( :alternative_allele ) = 0 THEN -- deletion
                            allele_array[ :row_index ] := '';
            	            reference_allele := SUBSTRING( :reference_allele, 2 );
        	            ELSEIF SUBSTRING( :reference_allele, 1, 1 ) <> SUBSTRING( :alternative_allele, 1, 1 ) THEN -- substitution
                            allele_array[ :row_index ] := SUBSTRING( :alternative_allele, 1, 1 );
            	            reference_allele := SUBSTRING( :reference_allele, 2 );
            	            alternative_allele := SUBSTRING( :alternative_allele, 2 );
        	            ELSE -- reference
            	            reference_allele := SUBSTRING( :reference_allele, 2 );
            	            alternative_allele := SUBSTRING( :alternative_allele, 2 );
            	            inner_position_cursor := :inner_position_cursor + 1;
        	                CONTINUE;
        	            END IF;
        
                        position_array[ :row_index ] := :inner_position_cursor;
                        allele_count_array[ :row_index ] := variant."AlleleCount";
                        copy_number_array[ :row_index ] := variant."CopyNumber";
                        
        
        	            inner_position_cursor := :inner_position_cursor + 1;
        	            row_index := :row_index + 1;
        	        END WHILE;
        	    END IF;
            END FOR;
        END IF;
        
        -- create output table and combine overlapping alleles
        unaggregated_display_variants = UNNEST( :position_array, :allele_array, :allele_count_array, :copy_number_array ) AS ( "Position", "Allele", "AlleleCount", "CopyNumber" );
        display_variants = SELECT
                "Position",
                "Allele",
                CAST( NULL AS TINYINT ) AS "Grouping",
                SUM( "AlleleCount" ) AS "AlleleCount",
                MAX( "CopyNumber" ) AS "CopyNumber"
            FROM
                :unaggregated_display_variants
            WHERE
                "Position" BETWEEN :begin_position AND :end_position - 1
            GROUP BY
                "Position",
                "Allele"
            ORDER BY
                "Position" ASC,
                "AlleleCount" DESC;
    END IF;
    
END