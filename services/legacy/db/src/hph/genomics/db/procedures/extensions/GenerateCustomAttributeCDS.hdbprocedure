PROCEDURE "hc.hph.genomics.db.procedures.extensions::GenerateCustomAttributeCDS" ( IN audit_id INTEGER, OUT content NCLOB )
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    READS SQL DATA AS
BEGIN
    DECLARE newline CHAR := CHAR( 10 );
    DECLARE indent CHAR := CHAR( 9 );
    DECLARE row_count INTEGER := 0;
    DECLARE structured_attribute_count INTEGER := 0;
    DECLARE structured_attributes VARCHAR(255) ARRAY;
    DECLARE min_audit_id INTEGER := NULL;
    DECLARE max_audit_id INTEGER := NULL;
    DECLARE CURSOR filters FOR
        SELECT
            "AttributeName"
        FROM
            "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes"
        WHERE
            "Level" = 'Filter' AND
            "DataType" = 'Flag' AND
            "ArraySize" = 0 AND
            "AttributeName" <> 'PASS'
        ORDER BY
            "AttributeName";
    DECLARE CURSOR variant_attributes FOR
        SELECT
            "AttributeName",
            "DataType"
        FROM
            "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes"
        WHERE
            "Level" = 'Variant' AND
            "DataType" IN ( 'Flag', 'Integer', 'Float', 'Character', 'String' ) AND
            "ArraySize" < 2
        ORDER BY
            "AttributeName";
    DECLARE CURSOR variant_allele_attributes FOR
        SELECT
            "AttributeName",
            "DataType"
        FROM
            "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes"
        WHERE
            "Level" = 'VariantAllele' AND
            "DataType" IN ( 'Flag', 'Integer', 'Float', 'Character', 'String' ) AND
            "ArraySize" < 2
        ORDER BY
            "AttributeName";
    DECLARE CURSOR variant_multi_value_attributes FOR
        SELECT
            "AttributeName",
            "DataType"
        FROM
            "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes"
        WHERE
            "Level" = 'Variant' AND
            "DataType" IN ( 'Flag', 'Integer', 'Float', 'Character', 'String' ) AND
            ( "ArraySize" IS NULL OR "ArraySize" > 1 )
        ORDER BY
            "AttributeName";
    DECLARE CURSOR variant_structured_attributes FOR
        SELECT
            "StructAttr"."StructuredAttributeName" AS "StructuredAttributeName",
            "StructAttr"."AttributeName" AS "AttributeName",
            "StructAttr"."DataType"
        FROM
            "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes" AS "CustAttr"
        INNER JOIN
            "hc.hph.genomics.db.models.extensions::Attribute.StructuredCustomAttributes" AS "StructAttr"
        ON
            "CustAttr"."AttributeName" = "StructAttr"."StructuredAttributeName" AND
            "CustAttr"."Level" = "StructAttr"."Level"
        WHERE
            "StructAttr"."Level" = 'Variant' AND
            "CustAttr"."DataType" = 'Structured' AND
            "StructAttr"."DataType" IN ( 'Integer', 'Float', 'String', 'Allele' )
        ORDER BY
            "StructAttr"."StructuredAttributeName",
            "StructAttr"."AttributeName";
    DECLARE CURSOR genotype_attributes FOR
        SELECT
            "AttributeName",
            "DataType"
        FROM
            "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes"
        WHERE
            "Level" = 'Genotype' AND
            "DataType" IN ( 'Flag', 'Integer', 'Float', 'Character', 'String' ) AND
            "ArraySize" < 2
        ORDER BY
            "AttributeName";
    DECLARE CURSOR genotype_allele_attributes FOR
        SELECT
            "AttributeName",
            "DataType"
        FROM
            "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes"
        WHERE
            "Level" = 'GenotypeAllele' AND
            "DataType" IN ( 'Flag', 'Integer', 'Float', 'Character', 'String' ) AND
            "ArraySize" < 2
        ORDER BY
            "AttributeName";
    DECLARE CURSOR genotype_multi_value_attributes FOR
        SELECT
            "AttributeName",
            "DataType"
        FROM
            "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes"
        WHERE
            "Level" = 'Genotype' AND
            "DataType" IN ( 'Flag', 'Integer', 'Float', 'Character', 'String' ) AND
            ( "ArraySize" IS NULL OR "ArraySize" > 1 )
        ORDER BY
            "AttributeName";

    -- write header
    content := 'namespace hc.hph.genomics.db.models.generated;' || :newline || :newline ||
        'using hc.hph.genomics.db.models.extensions::Attribute as Attribute;' || :newline || :newline ||
        '@Schema: ''CDMDEFAULT''' || :newline || :newline;

    -- write audit log information
    IF :audit_id IS NOT NULL THEN
        SELECT MIN( "DWAuditID" ) INTO min_audit_id FROM "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes" WHERE "Active" = 0;
        SELECT MAX( "DWAuditID" ) INTO max_audit_id FROM "hc.hph.genomics.db.models.extensions::Attribute.CustomAttributes" WHERE "Active" = 0;
        IF :min_audit_id IS NULL OR :max_audit_id IS NULL THEN
            content := :content || '// generation triggered automatically by audit id ' || :audit_id || :newline || :newline;
        ELSEIF :min_audit_id = :max_audit_id THEN
            content := :content || '// generation triggered automatically by audit id ' || :audit_id || ' due to new attributes introduced in audit id ' || :min_audit_id || :newline || :newline;
        ELSE
            content := :content || '// generation triggered automatically by audit id ' || :audit_id || ' due to new attributes introduced between audit ids ' || :min_audit_id || ' and ' || :max_audit_id || :newline || :newline;
        END IF;
    ELSE
        content := :content || '// generation triggered manually' || :newline || :newline;
    END IF;
    
    content := :content || 'context SNV' || :newline ||
        '{' || :newline || :newline;
    
    -- read filters
    content := :content || :indent || '@GenerateTableType : false' || :newline || :indent || 'type Filters' || :newline || :indent || '{' || :newline || :indent || :indent || '"PASS": Attribute.Type.FlagValue;' || :newline;
    FOR result_row AS filters DO
        content := :content || :indent || :indent || '"' || result_row."AttributeName" || '" : Attribute.Type.FlagValue;' || :newline;
    END FOR;

    -- read variant attributes
    content := :content || :indent || '};' || :newline || :newline || :indent || '@GenerateTableType : false' || :newline || :indent || 'type VariantAttributes' || :newline || :indent || '{' || :newline;
    row_count := 0;
    FOR result_row AS variant_attributes DO
        content := :content || :indent || :indent || '"' || result_row."AttributeName" || '" : Attribute.Type."' || result_row."DataType" || 'Value";' || :newline;
        row_count := :row_count + 1;
    END FOR;
    IF :row_count = 0 THEN
        content := :content || :indent || :indent || '"Dummy" : Integer;' || :newline;
    END IF;

    -- read variant allele attributes
    content := :content || :indent || '};' || :newline || :newline || :indent || '@GenerateTableType : false' || :newline || :indent || 'type VariantAlleleAttributes' || :newline || :indent || '{' || :newline;
    row_count := 0;
    FOR result_row AS variant_allele_attributes DO
        content := :content || :indent || :indent || '"' || result_row."AttributeName" || '" : Attribute.Type."' || result_row."DataType" || 'Value";' || :newline;
        row_count := :row_count + 1;
    END FOR;
    IF :row_count = 0 THEN
        content := :content || :indent || :indent || '"Dummy" : Integer;' || :newline;
    END IF;

    -- read variant multi-value attributes
    content := :content || :indent || '};' || :newline || :newline || :indent || '@GenerateTableType : false' || :newline || :indent || 'type VariantMultiValueAttributes' || :newline || :indent || '{' || :newline;
    row_count := 0;
    FOR result_row AS variant_multi_value_attributes DO
        content := :content || :indent || :indent || '"' || result_row."AttributeName" || '" : Attribute.Type."' || result_row."DataType" || 'Value";' || :newline;
        row_count := :row_count + 1;
    END FOR;
    IF :row_count = 0 THEN
        content := :content || :indent || :indent || '"Dummy" : Integer;' || :newline;
    END IF;

    -- read variant structured attributes
    content := :content || :indent || '};' || :newline || :newline || :indent || 'context VariantStructuredType' || :newline || :indent || '{' || :newline;
    FOR result_row AS variant_structured_attributes DO
        IF :structured_attribute_count = 0 OR :structured_attributes[ CASE WHEN :structured_attribute_count > 0 THEN :structured_attribute_count ELSE 1 END ] <> result_row."StructuredAttributeName" THEN
            structured_attribute_count := :structured_attribute_count + 1;
            structured_attributes[ :structured_attribute_count ] := result_row."StructuredAttributeName";
            IF :structured_attribute_count > 1 THEN
                content := :content || :indent || :indent || '};' || :newline || :newline;
            END IF;
            content := :content || :indent || :indent || '@GenerateTableType : false' || :newline || :indent || :indent || 'type "' || result_row."StructuredAttributeName" || '"' || :newline || :indent || :indent || '{' || :newline;
        END IF;
        content := :content || :indent || :indent || :indent || '"' || result_row."AttributeName" || '" : Attribute.Type."' || result_row."DataType" || 'Value";' || :newline;
    END FOR;
    IF :structured_attribute_count > 0 THEN
        content := :content || :indent || :indent || '};' || :newline || :newline;
    END IF;

    content := :content || :indent || '};' || :newline || :newline || :indent || '@GenerateTableType : false' || :newline || :indent || 'type VariantStructuredAttributes' || :newline || :indent || '{' || :newline;
    row_count := 0;
    WHILE :row_count < :structured_attribute_count DO
        row_count := :row_count + 1;
        content := :content || :indent || :indent || '"' || :structured_attributes[ :row_count ] || '" : VariantStructuredType."' || :structured_attributes[ :row_count ] || '";' || :newline;
    END WHILE;
    IF :row_count = 0 THEN
        content := :content || :indent || :indent || '"Dummy" : Integer;' || :newline;
    END IF;

    -- read genotype attributes
    content := :content || :indent || '};' || :newline || :newline || :indent || '@GenerateTableType : false' || :newline || :indent || 'type GenotypeAttributes' || :newline || :indent || '{' || :newline;
    row_count := 0;
    FOR result_row AS genotype_attributes DO
        content := :content || :indent || :indent || '"' || result_row."AttributeName" || '" : Attribute.Type."' || result_row."DataType" || 'Value";' || :newline;
        row_count := :row_count + 1;
    END FOR;
    IF :row_count = 0 THEN
        content := :content || :indent || :indent || '"Dummy" : Integer;' || :newline;
    END IF;

    -- read genotype allele attributes
    content := :content || :indent || '};' || :newline || :newline || :indent || '@GenerateTableType : false' || :newline || :indent || 'type GenotypeAlleleAttributes' || :newline || :indent || '{' || :newline;
    row_count := 0;
    FOR result_row AS genotype_allele_attributes DO
        content := :content || :indent || :indent || '"' || result_row."AttributeName" || '" : Attribute.Type."' || result_row."DataType" || 'Value";' || :newline;
        row_count := :row_count + 1;
    END FOR;
    IF :row_count = 0 THEN
        content := :content || :indent || :indent || '"Dummy" : Integer;' || :newline;
    END IF;

    -- read genotype multi-value attributes
    content := :content || :indent || '};' || :newline || :newline || :indent || '@GenerateTableType : false' || :newline || :indent || 'type GenotypeMultiValueAttributes' || :newline || :indent || '{' || :newline;
    row_count := 0;
    FOR result_row AS genotype_multi_value_attributes DO
        content := :content || :indent || :indent || '"' || result_row."AttributeName" || '" : Attribute.Type."' || result_row."DataType" || 'Value";' || :newline;
        row_count := :row_count + 1;
    END FOR;
    IF :row_count = 0 THEN
        content := :content || :indent || :indent || '"Dummy" : Integer;' || :newline;
    END IF;
    
    -- write footer
    content := :content || :indent || '};' || :newline || :newline || '}' || :newline;
END