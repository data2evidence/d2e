PROCEDURE "hc.hph.genomics.db.procedures.vb::QualitativeData"(
		IN sample_list "hc.hph.genomics.db.models::General.SampleList",
		IN reference_id NVARCHAR(255), 
		IN chromosome_index INTEGER, 
		IN begin_position INTEGER, 
		IN end_position INTEGER, 
		IN bin_size REAL,
		IN variant_grouping "hc.hph.genomics.db.models::VariantBrowser.VariantAnnotationGrouping",
		OUT qualitative_data "hc.hph.genomics.db.models::VariantBrowser.QualitativeData"
	)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	READS SQL DATA
AS
BEGIN
	DECLARE total_patient_count INTEGER;

	SELECT
		COUNT( DISTINCT "PatientDWID" ) INTO total_patient_count
	FROM
		:sample_list AS samples
	INNER JOIN
		"hc.hph.genomics.db.models::General.Samples" AS all_samples
	ON
		samples."SampleIndex" = all_samples."SampleIndex";
	
	variants =
		SELECT 
			FLOOR( ( "Variants"."Position" - :begin_position ) / :bin_size ) AS "BinIndex",
			:variant_grouping."Grouping" AS "Grouping",
			"Variants"."Position",
			"AllSamples"."PatientDWID"
		FROM
			:sample_list AS "Samples"
		INNER JOIN
			"hc.hph.genomics.db.models::General.Samples" AS "AllSamples"
		ON
			"Samples"."SampleIndex" = "AllSamples"."SampleIndex"
		INNER JOIN
			"hc.hph.genomics.db.models::SNV.Genotypes" AS "Genotypes"
		ON
			"Samples"."SampleIndex" = "Genotypes"."SampleIndex"
		INNER JOIN
			"hc.hph.genomics.db.models::SNV.Variants" AS "Variants"
		ON
			"Genotypes"."DWAuditID" = "Variants"."DWAuditID"
			AND "Genotypes"."VariantIndex" = "Variants"."VariantIndex"
		INNER JOIN
			:variant_grouping
		ON
			"Variants"."DWAuditID" = :variant_grouping."DWAuditID"
			AND "Variants"."VariantIndex" = :variant_grouping."VariantIndex"
		WHERE
			"AllSamples"."ReferenceID" = :reference_id
			AND "Variants"."ChromosomeIndex" = :chromosome_index
			AND "Variants"."Position" < :end_position
			AND "Variants"."Position" >= :begin_position
			AND "Genotypes"."ReferenceAlleleCount" < "Genotypes"."CopyNumber";

	binned_patient_variants =
		SELECT
			"BinIndex",
			MIN( "Grouping" ) AS "Grouping", -- in case of multiple groups per patient, choose the one with highest priority
			MIN( "Position" ) AS "BeginPos",
			MAX( "Position" ) AS "EndPos",
			( DENSE_RANK() OVER ( PARTITION BY "BinIndex" ORDER BY "PatientDWID" ASC ) + DENSE_RANK() OVER ( PARTITION BY "BinIndex" ORDER BY "PatientDWID" DESC ) - 1 ) AS "BinPatientCount", -- workaround for COUNT( DISTINCT ... ) to work with window function
			"PatientDWID"
		FROM
			:variants
		GROUP BY
			"BinIndex",
			"PatientDWID";
	
	qualitative_data =
		SELECT
			"BinIndex",
			"Grouping",
			MIN( "BeginPos" ) AS "BeginPos",
			MAX( "EndPos" ) AS "EndPos",
			MAX( "BinPatientCount" ) / :total_patient_count AS "BinPatientFraction",
			COUNT( "PatientDWID" ) / MAX( "BinPatientCount" ) AS "GroupPatientFraction"
		FROM
			:binned_patient_variants
		GROUP BY
			"BinIndex", 
			"Grouping"
		ORDER BY
			"BinIndex",
			"Grouping";
END;