PROCEDURE "hc.hph.genomics.db.procedures.vb::QuantitativeData" (
        IN sample_list_name NVARCHAR (255),
        IN reference_id NVARCHAR (255),
        IN chromosome_index INTEGER,
        IN begin_position INTEGER,
        IN end_position INTEGER,
        IN bin_size REAL,
        IN level_name NVARCHAR (255),
        IN col_name NVARCHAR (255),
        IN aggregation NVARCHAR (255),
        OUT white_list_invalid NVARCHAR (5000)
    )
    
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    AS
    BEGIN
        
        DECLARE sql_str_aggr NVARCHAR (5000);
        DECLARE sql_aggr_where NVARCHAR (5000);
        
        DECLARE invalid_param CONDITION FOR SQL_ERROR_CODE 10001;
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            white_list_invalid := ::SQL_ERROR_MESSAGE;
        END;
        
        IF :level_name <> 'Variants' AND :level_name <> 'Genotypes' THEN
            SIGNAL invalid_param SET MESSAGE_TEXT = 'Level '|| :level_name || ' is not allowed';
        END IF;
        
        IF upper( :aggregation ) <> 'MAX' AND upper( :aggregation ) <> 'MIN' AND upper( :aggregation ) <> 'AVG' THEN
            SIGNAL invalid_param SET MESSAGE_TEXT = 'Aggregate '|| :aggregation || ' is not allowed';
        END IF;
        
        /* To avoid NULL Conversion exception in dynamic SQL */
        IF :chromosome_index IS NULL
        THEN
            sql_aggr_where := '';
        ELSE
            sql_aggr_where := 'AND "Variants"."ChromosomeIndex" = ' || :chromosome_index;
        END IF;

        IF :end_position IS NOT NULL
        THEN
            sql_aggr_where := :sql_aggr_where || ' AND "Variants"."Position" BETWEEN '||:begin_position ||' AND '|| ( :end_position - 1 );
        END IF;
        
        /*Get all the scores irrespective of position to get the aggregated score*/ 
        sql_str_aggr := 'SELECT
                "ChromosomeIndex",
                ' || :aggregation || '("Score") as "Score",
                "BinIndex"
            FROM
            (
                SELECT
                    "Variants"."ChromosomeIndex" AS "ChromosomeIndex","'
                    || ESCAPE_DOUBLE_QUOTES( :level_name ) || '"."' || ESCAPE_DOUBLE_QUOTES( :col_name ) || '" AS "Score",
                    FLOOR( ( "Variants"."Position" - ' || :begin_position || ' ) / ' || :bin_size || ' ) AS "BinIndex"
                FROM
                    "' || ESCAPE_DOUBLE_QUOTES( :sample_list_name ) || '" AS "Samples"
                    JOIN "hc.hph.genomics.db.models::SNV.Genotypes" AS "Genotypes"
                        ON "Genotypes"."SampleIndex" = "Samples"."SampleIndex"
                    JOIN "hc.hph.genomics.db.models::SNV.Variants" AS "Variants"
                        ON "Genotypes"."DWAuditID" = "Variants"."DWAuditID"
                    JOIN "hc.hph.genomics.db.models::Reference.Features" AS "Features"
                        ON "Variants"."ChromosomeIndex" = "Features"."ChromosomeIndex"
                WHERE
                    "Genotypes"."ReferenceAlleleCount" != "Genotypes"."CopyNumber"
                    AND "' || ESCAPE_DOUBLE_QUOTES( :level_name ) || '"."' || ESCAPE_DOUBLE_QUOTES( :col_name ) || '" > 0
                    AND "Features"."ReferenceID" = ''' || ESCAPE_SINGLE_QUOTES( :reference_id  ) || '''' || :sql_aggr_where || '
            )
            GROUP BY
                "ChromosomeIndex",
                "BinIndex"
            ORDER BY
                "ChromosomeIndex",
                "BinIndex"';
        EXECUTE IMMEDIATE :sql_str_aggr;
    END
