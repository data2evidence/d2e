PROCEDURE "hc.hph.genomics.db.procedures.vb::GetVariantDetails" (
		IN inputDWAuditID "hc.hph.genomics.db.models::SNV.DWAuditIDList", 
		IN chromosomeIdx BIGINT, 
		IN positionVal BIGINT, 
		IN referenceID varchar(255), 
		OUT resultOut "hc.hph.genomics.db.models::SNV.VariantAnnotationDetails", 
		OUT variantIdOut "hc.hph.genomics.db.models::SNV.VariantIDList"
	)
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
AS
BEGIN
	DECLARE countRows INTEGER;
	DECLARE countVariantRows INTEGER;

	resultOut = SELECT DISTINCT 
				vann."DWAuditID", 
				vann."VariantIndex", 
				vann."AlleleIndex", 
				vann."ChromosomeIndex", 
				vann."Position", 
				vann."GeneName", 
				vann."Region", 
				vann."SequenceAlteration", 
				vann."AminoAcid.Reference" AS "AminoAcid1.Reference", 
				vann."AminoAcid.Alternative" AS "AminoAcid1.Alternative", 
				vann."MutationType", 
				vann."CDSPosition", 
				vann."Transcript", 
				vann."Protein", 
				vann."ExonRank", 
				ref."Allele" AS "Allele.Reference", 
				va."Allele" AS "Allele.Alternative", 
				case when Feat."Strand" = '-' then 
				  "hc.hph.genomics.db.procedures.annotation::GetReverseComplement" (ref."Allele")
				  else 	ref."Allele" end AS "CDSAllele.Reference", 
				case when Feat."Strand" = '-' then 
				  "hc.hph.genomics.db.procedures.annotation::GetReverseComplement" (va."Allele")
				  else 	va."Allele" end AS "CDSAllele.Alternative", 
				"hc.hph.genomics.db.procedures.annotation::getAminoAcidName"(
					vann."AminoAcid.Reference", 
					'THREE'
				) AS "AminoAcid3.Reference", 
				"hc.hph.genomics.db.procedures.annotation::getAminoAcidName"(
					vann."AminoAcid.Alternative", 
					'THREE'
				) AS "AminoAcid3.Alternative"
			--Feat."Strand" as "Strand"	
			FROM "hc.hph.genomics.db.models::SNV.VariantAnnotations" AS vann
				INNER JOIN "hc.hph.genomics.db.models::SNV.VariantAlleles" AS va
				ON vann."DWAuditID" = va."DWAuditID"
					AND va."VariantIndex" = vann."VariantIndex"
					AND va."AlleleIndex" > 0
				INNER JOIN "hc.hph.genomics.db.models::SNV.VariantAlleles" AS ref
				ON vann."DWAuditID" = ref."DWAuditID"
					AND ref."VariantIndex" = vann."VariantIndex"
					AND ref."AlleleIndex" = 0
			   inner join "hc.hph.genomics.db.models::Reference.FeaturesAnnotation"  AS feat
			    on feat."GeneName" = vann."GeneName"
			    and feat."Transcript" = vann."Transcript"
			    and feat."FeatureName" = vann."Protein"
			    and feat."ChromosomeIndex" = :chromosomeIdx
			    and feat."ReferenceID" = :referenceID
			WHERE (vann."DWAuditID" IN (SELECT "DWAuditID" FROM :inputDWAuditID))
				AND vann."Position" = :positionVal
				AND vann."ChromosomeIndex" = :chromosomeIdx;
	
	
	
	SELECT count(*) INTO countRows FROM :resultOut;

	
	IF (:countRows = 0) THEN
      select count(*) into countVariantRows from "hc.hph.genomics.db.models::SNV.Variants" v 
      INNER JOIN "hc.hph.genomics.db.models::SNV.VariantAlleles" AS va
	  ON v."DWAuditID" = va."DWAuditID"
	  AND v."VariantIndex" = va."VariantIndex"
      where "Position" = :positionVal AND "ChromosomeIndex" = :chromosomeIdx and v."DWAuditID" IN (SELECT "DWAuditID" FROM :inputDWAuditID);
      
        IF ( :countVariantRows = 0 ) THEN
        
         resultOut = SELECT null AS "DWAuditID", 
					null AS "VariantIndex", 
					null AS "AlleleIndex", 
					seq."ChromosomeIndex", 
					:positionVal as "Position", 
					null AS "GeneName", 
					null AS "Region", 
					null AS "SequenceAlteration", 
					null AS "AminoAcid1.Reference", 
					null AS "AminoAcid1.Alternative", 
					null AS "MutationType", 
					null AS "CDSPosition", 
					null AS "Transcript", 
					null AS "Protein", 
					null AS "ExonRank", 
					SUBSTRING (TO_CHAR(seq."Sequence"), :positionVal - seq."Region.Begin" +1,1) AS "Allele.Reference", 
					null AS "Allele.Alternative", 
					SUBSTRING (TO_CHAR(seq."Sequence"), :positionVal - seq."Region.Begin" +1,1) AS "CDSAllele.Reference", 
					null AS "CDSAllele.Alternative", 
					null AS "AminoAcid3.Reference", 
					null AS "AminoAcid3.Alternative"
					--null as "Strand"
				FROM "hc.hph.genomics.db.models::Reference.Sequences" AS seq 
				where  "ChromosomeIndex" = :chromosomeIdx  and "ReferenceID" = :referenceID and 
				:positionVal between seq."Region.Begin" and seq."Region.End";
         ELSE        			
		resultOut = SELECT
                    variants."DWAuditID",
					variants."VariantIndex", 
					null AS "AlleleIndex", 
					variants."ChromosomeIndex", 
					variants."Position", 
					null AS "GeneName", 
					null AS "Region", 
					null AS "SequenceAlteration", 
					null AS "AminoAcid1.Reference", 
					null AS "AminoAcid1.Alternative", 
					null AS "MutationType", 
					null AS "CDSPosition", 
					null AS "Transcript", 
					null AS "Protein", 
					null AS "ExonRank", 
					ref."Allele" AS "Allele.Reference", 
					va."Allele" AS "Allele.Alternative", 
					ref."Allele" AS "CDSAllele.Reference", 
					va."Allele" AS "CDSAllele.Alternative", 
					null AS "AminoAcid3.Reference", 
					null AS "AminoAcid3.Alternative"
					--null as "Strand"
				FROM "hc.hph.genomics.db.models::SNV.Variants" AS variants
					INNER JOIN "hc.hph.genomics.db.models::SNV.VariantAlleles" AS va
					ON variants."DWAuditID" = va."DWAuditID"
						AND va."VariantIndex" = variants."VariantIndex"
						AND va."AlleleIndex" > 0
					INNER JOIN "hc.hph.genomics.db.models::SNV.VariantAlleles" AS ref
					ON variants."DWAuditID" = ref."DWAuditID"
						AND ref."VariantIndex" = variants."VariantIndex"
						AND ref."AlleleIndex" = 0
				WHERE (variants."DWAuditID" IN (SELECT "DWAuditID" FROM :inputDWAuditID))
					AND variants."Position" = :positionVal
					AND variants."ChromosomeIndex" = :chromosomeIdx;
	END IF;
	
	END IF;
	
	variantIdOut = SELECT DISTINCT variants."VariantIndex", 
				vaID."VariantID"
			FROM :resultOut AS variants
				INNER JOIN "hc.hph.genomics.db.models::SNV.VariantIDs" AS vaID
				ON vaID."VariantIndex" = variants."VariantIndex"
				AND vaID."DWAuditID" = variants."DWAuditID"
				AND vaID."VariantID" IS NOT NULL;
					
					
	variantIdOut = SELECT "VariantIndex",string_agg("VariantID",',') AS "VariantID"
			FROM :variantIdOut
			GROUP BY "VariantIndex";
END;
