PROCEDURE "hc.hph.di.documents.staging.db.procedures::LoadProcessingStageAPI" 
(
in iv_isTable nvarchar(10),
in iv_tableName nvarchar(137),	
in it_documents "hc.hph.di.documents.staging.db.models::DocumentStage.DocumentAPIStage",
out ov_docCount bigint,
out ov_batchID bigint,
out ot_DocType table("Type" nvarchar(128))
)  
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 
 declare currentTime timestamp;
 declare lt_input "hc.hph.di.documents.staging.db.models::DocumentStage.DocumentAPIStage";
 declare lt_stage "hc.hph.di.documents.staging.db.models::DocumentStage.ProcessingStage";
 
 currentTime := now();
 				 
 if iv_isTable = 'true' then
    
 	exec 'insert into "hc.hph.di.documents.staging.db.models::DocumentStage.DocumentAPIStage"(select * from '||:iv_tableName||')';
  	lt_input = select * from "hc.hph.di.documents.staging.db.models::DocumentStage.DocumentAPIStage";
  	delete from "hc.hph.di.documents.staging.db.models::DocumentStage.DocumentAPIStage"
  	where ("_PackageID","_SourceID", "DocumentID") in(select "_PackageID","_SourceID", "DocumentID" from :lt_input);

 else
 
 	lt_input = select * from :it_documents;
 	
 end if;
 
 select "hc.hph.di.documents.staging.db.models::BatchID_Seq".nextval into ov_batchID from "hc::DUMMY";
 				
 lt_stage = select "hc.hph.cdw.db.etl::HashDWID"("_SourceID", "DocumentID") "DWID",
 			       currentTime "DWDateFrom",
 			       "_SourceID" "DWSource",
 			       "DocumentID",
 			       "hc.hph.di.model::AuditLogID_Seq".nextval "DWAuditID",
 			       ov_batchID "BatchID",
 			       "_ProcessingMode" "ProcessingMode",
 			       "_ParentEntitySourceID" "DWParentEntitySource",
 			       "ParentEntityID",
 			       "ParentEntityType",
 			       "FileName",
 			       "MIMEType",
 			       "Content",
 			       "Title",
 			       "Author",
 			       "Type",
 			       "LanguageCode",
 			       "CreatedAt",
 			       "CreatedBy",
 			       "ChangedAt",
 			       "ChangedBy" from :lt_input;
 			       
 -- inert data into the staging area
 
 insert into "hc.hph.di.documents.staging.db.models::DocumentStage.ProcessingStage"(select * from :lt_stage);
 
 select count("DWID") into ov_docCount from "hc.hph.di.documents.staging.db.models::DocumentStage.ProcessingStage"
 where "BatchID" = :ov_batchID;
 				 
 ot_DocType = select distinct("Type") as "Type" from :lt_stage;
 
END;
