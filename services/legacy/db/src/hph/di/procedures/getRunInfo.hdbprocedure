PROCEDURE "hc.hph.di.procedures::getRunInfo" ( 
	IN AuditLogId BIGINT,
	OUT runinfo "hc.hph.di.model::DataIntegration.RunInfo"
	) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS 
BEGIN 

    DECLARE ProfileType NVARCHAR(32);
    DECLARE parentAuditLogID BIGINT;
    DECLARE standardRun NVARCHAR(16) := 'Standard';
    DECLARE chainedRun NVARCHAR(16) := 'Chained';
    SELECT "ParentAuditLogID" into parentAuditLogID from "hc.hph.di.model::DataIntegration.AuditLog" where "AuditLogID" = :AuditLogId;
    SELECT profile."ProfileType" into ProfileType from "hc.hph.di.model::DataIntegration.JobProfile" as profile INNER JOIN "hc.hph.di.model::DataIntegration.AuditLog" as audit_log on profile."ProfileID"=audit_log."ProfileID" WHERE audit_log."AuditLogID"= :AuditLogId;
	
	IF :ProfileType = 'Chained' THEN
 
runinfo=SELECT profile."Name" as "ProfileName",
	       	      profile."Description" as "ProfileDescription",
	       	      profile."Status" as "ProfileStatus",
	       	      audit_log."AdditionalParams" as "AdditionalParams",
                  audit_log."ProfileID" as "ProfileID",
 	              audit_log."AuditLogID" as "AuditLogID",
 	              null as "PluginID",
 	              null as "XSJSLibrary",
                  null as "Provider",
                  null as "TextBundle",
                  null as "JSONMetadata",
                  null as "PluginStatus",
                  null as "ExtensionName",
                  audit_log."ParentAuditLogID" as "ParentAuditLogID",
                  audit_log."ExtensionID" as "ExtensionID",
         audit_log."SourceID" as "SourceID",
         audit_log."StartTime" as "StartTime",
         audit_log."EndTime" as "EndTime",
         source."Name" as "SourceName",
         audit_log."Status" as "Status",
         audit_log."ProfileJSONParams" as "ProfileJSONParams",
		 audit_log."Notes" as "Notes",
		 null as "ExtensionAlias",
         (SELECT count(*) from "hc.hph.di.model::DataIntegration.AuditLog" sub_audit_log 
          where sub_audit_log."ParentAuditLogID" = :AuditLogId and sub_audit_log."Status" = 'Completed' ) as "Success",
         (SELECT count(*) from "hc.hph.di.model::DataIntegration.AuditLog" sub_audit_log 
	     where sub_audit_log."ParentAuditLogID" = :AuditLogId and sub_audit_log."Status" = 'Cancelled' ) as "Warning",
	     (SELECT count(*) from "hc.hph.di.model::DataIntegration.AuditLog" sub_audit_log 
         where sub_audit_log."ParentAuditLogID" = :AuditLogId and sub_audit_log."Status" = 'Failed' ) as "Error",
         CASE WHEN audit_log."ParentAuditLogID" = 0 THEN :standardRun ELSE :chainedRun END as "RunType"
	FROM "hc.hph.di.model::DataIntegration.AuditLog" as audit_log 
	LEFT OUTER JOIN "hc.hph.di.model::DataIntegration.JobProfile" as profile on profile."ProfileID"=audit_log."ProfileID" 
	LEFT OUTER JOIN "hc.hph.di.model::DataIntegration.DISource"as source on audit_log."SourceID"=source."SourceID"
	WHERE audit_log."AuditLogID" =:AuditLogId ORDER BY audit_log."StartTime" desc;
	
	ELSE
	
	runinfo=SELECT profile."Name" as "ProfileName",
	       	      profile."Description" as "ProfileDescription",
	       	      profile."Status" as "ProfileStatus",
	       	      audit_log."AdditionalParams" as "AdditionalParams",
                  audit_log."ProfileID" as "ProfileID",
 	              audit_log."AuditLogID" as "AuditLogID",
 	              extension."PluginID" as "PluginID",
 	              extension."XSJSLibrary" as "XSJSLibrary",
                  extension."Provider" as "Provider",
                  extension."TextBundle" as "TextBundle",
                  extension."JSONMetadata" as "JSONMetadata",
                  extension."Status" as "PluginStatus",
                  extension."Name" as "ExtensionName",
                  audit_log."ParentAuditLogID" as "ParentAuditLogID",
                  audit_log."ExtensionID" as "ExtensionID",
         audit_log."SourceID" as "SourceID",
         audit_log."StartTime" as "StartTime",
         audit_log."EndTime" as "EndTime",
         source."Name" as "SourceName",
         audit_log."Status" as "Status",
         audit_log."ProfileJSONParams" as "ProfileJSONParams",
		 audit_log."Notes" as "Notes",
		 extension."ExtensionAlias" as "ExtensionAlias",
         (SELECT count(*) from "hc.hph.di.model::DataIntegration.AuditLog" sub_audit_log 
          where sub_audit_log."ParentAuditLogID" = :AuditLogId and sub_audit_log."Status" = 'Completed' ) as "Success",
         (SELECT count(*) from "hc.hph.di.model::DataIntegration.AuditLog" sub_audit_log 
	     where sub_audit_log."ParentAuditLogID" = :AuditLogId and sub_audit_log."Status" = 'Cancelled' ) as "Warning",
	     (SELECT count(*) from "hc.hph.di.model::DataIntegration.AuditLog" sub_audit_log 
         where sub_audit_log."ParentAuditLogID" = :AuditLogId and sub_audit_log."Status" = 'Failed' ) as "Error",
         CASE WHEN audit_log."ParentAuditLogID" = 0 THEN :standardRun ELSE :chainedRun END as "RunType"
	FROM "hc.hph.di.model::DataIntegration.AuditLog" as audit_log 
	LEFT OUTER JOIN "hc.hph.di.model::DataIntegration.JobProfile" as profile on profile."ProfileID"=audit_log."ProfileID" 
	LEFT OUTER JOIN "hc.hph.di.model::DataIntegration.DIExtension" as extension on extension."ExtensionID"=audit_log."ExtensionID" 
	LEFT OUTER JOIN "hc.hph.di.model::DataIntegration.DISource"as source on audit_log."SourceID"=source."SourceID"
	WHERE audit_log."AuditLogID" =:AuditLogId AND audit_log."ParentAuditLogID" = :parentAuditLogID ORDER BY audit_log."StartTime" desc;
	
	
	END IF;
END;