namespace hc.hph.di.model;

using hc.hph.cdw.db.models::DWTypes as DT;

context DataIntegration { 

	type CdtID : String(256);
	type CdtPluginID : String(256);
	type CdtLanguageCode : String(2);
	type CdtName : String (512);
	type CdtValue : String (512);
	type CdtStatus : String(16);
	type CdtAlias : String(64);
    type CdtNumber: Integer;
    type CdtBigNumber: Integer64;
    type CdtDateTime: UTCTimestamp;
    type CdtDescription : String (1024);
    type CdtTrace : String (5000);
    type CdtNCLOB: LargeString;

	table type CdtAdapterLog{
		LOGDETAILID: String(32);
		DOCUMENTID: String(1024); 
		DOCUMENTTYPE: String(512);
		DOCUMENTSIZE: String(512);
		DOCUMENTLASTUPDATED: CdtDateTime;
		STATUS: String(16); 
		NOTES: String(1024);
		STARTTIME: CdtDateTime;
		ENDTIME: CdtDateTime;
    };

    table type CdtAdapterTrace{ 
		LOGDETAILID: String(32); 
		LOGTRACEID: String(32); 
		LOGSTATUS: String(16); 
		LOGTIMESTAMP: CdtDateTime; 
		LOGLOCATION: String(512);
		LOGMESSAGE: String(5000);
    };

    table type AuditLogCount{ 
		ALLRUNS:Integer;
		RUNNING:Integer;
		FAILED:Integer;
		QUEUED:Integer;
		CANCELLED:Integer;
		CLEANEDUP:Integer;
		COMPLETED:Integer;
    };

    table type Extensions{ 
    	EXTENSIONID:String(256);
    };

    table type Sources{
    	DWSOURCEID:String(256);
    };

    table type MonitorRun{ 
    	ProfileName: String(512);
    	ProfileStatus: String(512);
    	ProfileID:DT.DWAuditID; 
		AuditLogID:DT.DWAuditID;
		ParentAuditLogID:DT.DWAuditID;
		ExtensionName: String(512);
		ExtensionAlias: String(64);
		PluginID:String(256);
		Provider:String(512);
		TextBundle:String(512);
		ExtensionID:CdtID;
		SourceID:String(256);
		StartTime: CdtDateTime;
		EndTime:CdtDateTime;
		SourceName:String(512);
		Status:String(16);
		Notes:String(1024);
		Success:Integer;
		Warning:Integer;
		Error:Integer;
		RunBy:String(512);   
		ProfileType: String(512);       	
    };

    table type Schedules{ 
    	MonitorID:DT.DWAuditID;
    	StartedAt: CdtDateTime;
    	EndedAt:CdtDateTime;
    	XSScheduleID: String(100);
		XSScheduleRunStatus: String(16);
		ExtensionAlias: String(64);
		PluginID: String(256);
		Provider: String(512);
		TextBundle: String(512);
		ProfileName: String(512);
		ProfileID: DT.DWAuditID;
		ProfileStatus: String(16);
		SourceName: String(512);
		SourceID: String(5);
		ScheduleName: String(512);
		ScheduleConfigID: DT.DWAuditID;
    };

    table type SchedulesCount{ 
    	ALLSCHEDULES: Integer; 
    	ACTIVE: Integer;
    	INACTIVE:Integer;
    	COMPLETED:Integer; 
		FAILED:Integer;
    };

    table type RunInfo{
    	ProfileName: String(512);
    	ProfileDescription: String(1024);
		ProfileStatus: String(16);
		AdditionalParams: CdtNCLOB;	
		ProfileID: DT.DWAuditID; 
		AuditLogID: DT.DWAuditID; 
		PluginID:String(256);
		XSJSLibrary:String(512);
		Provider: String(512);
		TextBundle: String(512);
 		JSONMetadata:  CdtNCLOB;
 		PluginStatus: String(16);
 		ExtensionName: String(512);
 		ParentAuditLogID: DT.DWAuditID;
 		ExtensionID: String(256);
 		SourceID: String(256);
		StartTime: CdtDateTime;
		EndTime: CdtDateTime;
		SourceName: String(512);
		Status: String(16);
		ProfileJSONParams: CdtNCLOB;
		Notes: String(1024);
		ExtensionAlias:String(64);
		Success: Integer;
		Warning: Integer;
		Error:Integer;
		RunType: String(16);
    }; 

     table type DocumentRunInfo{			
	            DocumentID: String(1024);			
	            ProfileID: DT.DWAuditID;			
                DocumentName: String(512);			
                DocumentURI: String(512);        			
                DocumentSize: String(512);			
                DocumentType: String(512);			
                Status:String(16);			
                ProfileStatus:String(16);			
                PluginStatus: String(16);			
                XSJSLibrary: String(512);			
                RunType:  String(16);			
	    };

     
    entity ScheduleSyncHistory{
    	LastSyncedAt: CdtDateTime;
    } technical configuration {
     column store;
    }

    //for DIExtension table
	entity DIExtension {
		key ExtensionID: CdtID;
		PluginID: CdtPluginID;
		XSJSLibrary:  CdtValue;
		JSONMetadata: CdtNCLOB;
		Provider: CdtName;
		Status: CdtStatus;
		CreatedAt: CdtDateTime;
		CreatedBy: CdtName;
		ModifiedAt: CdtDateTime;
		ModifiedBy: CdtName;
		TextBundle: CdtValue;
		Name: CdtName;
		Description: CdtDescription;		
		ExtensionAlias:CdtAlias;
		ToJobProfile : association[1..*] to JobProfile on ToJobProfile.ExtensionID = ExtensionID; 
	} technical configuration {
  column store;
 };

	//for JobProfile
	entity JobProfile {
		key ProfileID: DT.DWAuditID;
		ExtensionID: CdtID;
		SourceID: DT.DWSource;
		Name: CdtName;
		Description: CdtDescription;
		CreatedAt: CdtDateTime;
		CreatedBy: CdtName;
		ModifiedAt: CdtDateTime;
		ModifiedBy: CdtName;
		Status: CdtStatus;
		LogLevel: CdtNumber;
		ProfileJSONParams: CdtNCLOB;
		AdditionalParams: CdtNCLOB;	
		ScheduleConfigID: DT.DWAuditID;
		ProfileType: CdtName;
		ToAuditLog : association[1..*] to AuditLog on ToAuditLog.ProfileID = ProfileID; 
		ToDISource : association[1..1] to DISource on ToDISource.SourceID = SourceID;
		ToDIJobScheduleConfig : association[1..1] to DIJobScheduleConfig on ToDIJobScheduleConfig.ScheduleConfigID = ScheduleConfigID;
	} technical configuration {
  column store;
 };

	//DISource
	entity DISource {
		key SourceID: DT.DWSource;
		Name: CdtName;
		Description: CdtDescription;
		CreatedAt: CdtDateTime;
		CreatedBy: CdtName;
		ModifiedAt: CdtDateTime;
		ModifiedBy: CdtName;	
	} technical configuration {
  column store;
 };

	//for monitoring/logs
	entity AuditLog{
		key AuditLogID: DT.DWAuditID; //DWAuditID in the CDW
		ParentAuditLogID: DT.DWAuditID;
		ExtensionID: CdtID;
		SourceID: DT.DWSource;
		ProfileID: DT.DWAuditID;
		Status: CdtStatus; //Queued ,Running, Completed, Failed, Cancelled [obsolete: 1-Success, 2-Warning, 3-Error, 4-Started, 5-*Running, 6-Failed, 7-Completed, 8-Cancelled] 
		ProcessID: CdtName;
		ProcessType: CdtValue;
		StartTime: DT.DWTimestamp;
		EndTime: DT.DWTimestamp;
		DocumentID: CdtDescription;
		DocumentURI: CdtDescription;
		DocumentName: CdtValue;
		DocumentSize: CdtName;
		DocumentType: CdtName;
		Notes: CdtDescription;
		ProfileJSONParams: CdtNCLOB;
		AdditionalParams: CdtNCLOB;	
		ScheduleConfigID: DT.DWAuditID;	
		MonitorID: DT.DWAuditID;
		RunBy: CdtName;	
		ToAuditLog: association [0..*] to AuditLog on ToAuditLog.ParentAuditLogID = AuditLogID;
		ToAuditLogTrace: association [0..*] to AuditLogTrace on ToAuditLogTrace.AuditLogID = AuditLogID;
	} technical configuration {
  column store;
 };

	entity AuditLogTrace{
		key AuditLogID: DT.DWAuditID;
		key LogTraceID: CdtID;		
		Status: CdtStatus; //error, info, debug, warning, success >> free text
		Timestamp: CdtDateTime;
		Location: CdtName; //may be fn name currently in
		Text: CdtTrace; //>> big free text
	} technical configuration {
  column store;
 };

	entity DIJobScheduleConfig {
		key ScheduleConfigID: DT.DWAuditID;
		Name: CdtName;
		Description: CdtDescription;
		ScheduleConfigJSON: CdtNCLOB;
		CreatedAt: CdtDateTime;
		CreatedBy: CdtName;
		ModifiedAt: CdtDateTime;
		ModifiedBy: CdtName;	
	} technical configuration {
  column store;
 };

	entity DIJobScheduleMonitor { 
		key ScheduleConfigID: DT.DWAuditID;
		key MonitorID: DT.DWAuditID;
		XSScheduleID: String(100);
		XSScheduleRunStatus: CdtStatus;
		StartedAt: CdtDateTime;
		EndedAt: CdtDateTime;
		ProfileID: DT.DWAuditID;
		ToDIJobScheduleConfig: association [1..1] to DIJobScheduleConfig on ToDIJobScheduleConfig.ScheduleConfigID = ScheduleConfigID;
		ToAuditLog: association [1..*] to AuditLog on ToAuditLog.ScheduleConfigID = ScheduleConfigID;
		ToAuditLogMonitorID: association [1..*] to AuditLog on ToAuditLogMonitorID.MonitorID = MonitorID;
	} technical configuration {
  column store;
 };

	entity EmailQueue {   
		key NotificationID: DT.DWAuditID;
		Status: CdtStatus;
		UserID: CdtName;
		Subject: CdtDescription;
		EmailText: CdtDescription;
		AuditLogID: DT.DWAuditID;
		MonitorID: DT.DWAuditID;
		ToAuditLog: association [1..1] to AuditLog on ToAuditLog.AuditLogID = AuditLogID;
	} technical configuration {
  column store;
 };

	entity MappingConfiguration{
		key ConfigurationID : Integer;
		ExtensionID : CdtID;
		Name : CdtName;
		Description: CdtDescription;
		Status: CdtStatus;
		Provider: String(32);
		Configuration : CdtNCLOB;
		CreatedAt: CdtDateTime;
		CreatedBy: CdtName;
		ModifiedAt: CdtDateTime;
		ModifiedBy: CdtName;
	} technical configuration {
  column store;
 };

	view DWSources as select from DISource
	{  
	 SourceID,
	 Name,
	 Description,
	 CreatedAt,
	 CreatedBy,
	 ModifiedAt,
	 ModifiedBy
	};

	view JobProfiles as select from JobProfile left outer join DISource on JobProfile.SourceID=DISource.SourceID
	{ 
	 ProfileID,
	 ExtensionID,
	 JobProfile.Name as ProfileName,
	 JobProfile.Description as Description,
	 JobProfile.SourceID,
	 DISource.Name as SourceName,
	 DISource.Description as SourceDescription,
	 JobProfile.CreatedAt,
	 JobProfile.CreatedBy,
	 JobProfile.ModifiedAt,
	 JobProfile.ModifiedBy,
	 JobProfile.Status,
	 ProfileJSONParams,
	 AdditionalParams
	};

	view AuditLogRuns as select from AuditLog{
	 AuditLogID,
	 ParentAuditLogID,
	 ExtensionID,
	 DocumentID,
	 DocumentURI,
	 SourceID, 
	 ProfileID,
	 Status, 
	 StartTime,
	 EndTime,
	 ScheduleConfigID,
	 MonitorID
	};

	view FailedAuditLogRuns as select from AuditLog{
	 AuditLogID,
	 ParentAuditLogID,
	 ExtensionID,
	 DocumentID,
	 DocumentURI,
	 SourceID, 
	 ProfileID,
	 Status, 
	 StartTime,
	 EndTime,
	 ScheduleConfigID,
	 MonitorID
	}where "Status" = 'Failed';

	view CompleteduditLogRuns as select from AuditLog{
	 AuditLogID,
	 ParentAuditLogID,
	 ExtensionID,
	 DocumentID,
	 DocumentURI, 
	 SourceID,
	 ProfileID,
	 Status,
	 StartTime,
	 EndTime,
	 ScheduleConfigID,
	 MonitorID
	}where "Status" = 'Completed';

};



