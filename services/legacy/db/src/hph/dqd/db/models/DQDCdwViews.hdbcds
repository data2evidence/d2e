namespace hc.hph.dqd.db.models;
using hc.hph.cdw.db.models::DWViewsEAV as VSEAV;
using hc.hph.cdw.db.models::DWEntities as DWEnt;
using hc.hph.cdw.db.models::DWViews as VS;
using hc.hph.cdw.db.models::DWDocuments as DWDoc;
using hc.hph.genomics.db.models::SNV as GenSNV;
context DQDCdwViews{
	//Interaction details:
 	view Interaction_Details as select from VSEAV.Interaction_Details as Int_Details
 left outer join VS.Interactions as Int on Int_Details.InteractionID =Int.InteractionID {
 		Int_Details.InteractionID as InteractionID,
        Int_Details.SourceInteractionID,
        Int_Details.Source,
        AttributeValue,
        AttributeCode,
        AttributeVocabularyID,
        AttributeCodeSystem,
        AttributeCodeSystemVersion,
        Value,
        ValueCode,
        ValueVocabularyID,
        MaterializedValueVocabularyID,
        ValueCodeSystem,
        ValueCodeSystemVersion,
        Int.InteractionID as Int_InteractionID
 	};

  	view Interaction_Measures as select from VSEAV.Interaction_Measures as Int_Measures
 left outer join VS.Interactions as Int on Int_Measures.InteractionID = Int.InteractionID {
        Int_Measures.InteractionID as InteractionID,
        Int_Measures.SourceInteractionID,
        Int_Measures.Source,
        AttributeValue,
        AttributeCode,
        AttributeVocabularyID, 
        AttributeCodeSystem,
        AttributeCodeSystemVersion,
        Unit,
        Value,
        Int.InteractionID as Int_InteractionID
    }; 
    view Interactions as select from VS.Interactions as Int 
 left outer join VSEAV.Interaction_Details as Int_Details on Int.InteractionID=Int_Details.InteractionID
 left outer join VSEAV.Interaction_Measures as Int_Measures on Int.InteractionID=Int_Measures.InteractionID {
 	 	Int.InteractionID as InteractionID,
 		Int_Details.InteractionID as IntDetails_DWID ,
 		Int_Measures.InteractionID as IntMeasures_DWID,
 		Int.SourceInteractionID as SourceInteractionID,
        Int.Source as Source,
        Int.PatientID as PatientID,
        ParentInteractionID,
        ConditionID,
        InteractionTypeValue,
        InteractionTypeCode,
        InteractionTypeVocabularyID,
        InteractionTypeCodeSystem,
        InteractionTypeCodeSystemVersion,
        InteractionStatus,
        PeriodStart,
        PeriodEnd,
        PeriodTimezone,
    	Int.OrgID as OrgID	
 	}; 
 	view InteractionPatientLink as select from VS.Interactions as Int
 left outer join VS.Patient as Pat on Int.PatientID= Pat.PatientID {
 		Int.PatientID as PatientID,
 		Pat.PatientID as Pat_PatientID
 	};
 	view Patients as select from VS.Patient as Pat
 left outer join DWEnt.Patient_Key as Pat_Key on Pat_Key.DWID=Pat.PatientID {
 		Pat.PatientID as PatientID,
 		Pat_Key.DWID as PatKey_PatientID,
        Pat.SourcePatientID as SourcePatientID,
        Pat.Source as Source,
        Pat.OrgID as OrgID,
        FamilyName,
        GivenName,
        TitleValue,
        TitleCode,
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email
 	};
 	view Patient_Key as select from DWEnt.Patient_Key as Pat_Key
 left outer join VS.Interactions as Int on Pat_Key.DWID=Int.PatientID
 left outer join VS.Patient as Pat on Pat_Key.DWID=Pat.PatientID{
 		Pat_Key.DWID as PatientID,
 		Int.PatientID as Int_PatientID,
 		Pat.PatientID as Pat_PatientID
 	};
 	view Documents as select from VS.Document as Doc
 left outer join VS.InteractionDocuments as IntDocLink on Doc.DocumentID = IntDocLink.DocumentID {
 		Doc.DocumentID as DocumentID,
 		IntDocLink.DocumentID as Int_DocumentID,
        OriginalDocumentID,
        Source,
        Doc.Title as Title,
        Doc.Author as Author,
        Doc.FileName as FileName,
        Doc.Type as Type,
        Doc.TypeText as TypeText,
        Doc.MIMEType as MIMEType,
        Doc.LanguageCode as LanguageCode,
        Doc.CreatedAt as CreatedAt,
        Doc.CreatedBy as CreatedBy,
        Doc.ChangedAt as ChangedAt,
        Doc.ChangedBy as ChangedBy
 	};	
      	//Genomics - Alternate Heterozygous Genotypes
 	view GenomicsAltHetero as select from GenSNV.Genotypes
 	{
 		DWAuditID,
 		VariantIndex,
 		SampleIndex,
 		Zygosity	
 	}
 	WHERE "Zygosity" = 'Heterozygous Alternative';
 	
 	//Genomics - Multiallelic Sites
 	view GenomicsMultiallelic as select from GenSNV.VariantAlleles
 	{
 		DWAuditID,
 		VariantIndex,
 		COUNT(*) AS "AlternativeAlleleCount"
 	}
 	WHERE "AlleleIndex" > 0
	GROUP BY
		"DWAuditID",
		"VariantIndex"
	HAVING COUNT(*) > 1;
	
	//Genomics - Samples with too many homozygous/heterozygous reference/alternative genotypes 
	 view GenomicsSampleZyogozity as select from GenSNV.Genotypes
 	{
		"DWAuditID",
		"SampleIndex",
		COUNT(*) AS "TotalCount",
		SUM( CASE WHEN "Zygosity" = 'Homozygous Reference' THEN 1 ELSE 0 END ) AS "HomozygousReferenceCount",
		SUM( CASE WHEN "Zygosity" = 'Heterozygous Reference' THEN 1 ELSE 0 END ) AS "HeterozygousReferenceCount",
		SUM( CASE WHEN "Zygosity" = 'Homozygous Alternative' THEN 1 ELSE 0 END ) AS "HomozygousAlternativeCount",
		SUM( CASE WHEN "Zygosity" = 'Heterozygous Alternative' THEN 1 ELSE 0 END ) AS "HeterozygousAlternativeCount"
 	}
 	GROUP BY
		"DWAuditID",
		"SampleIndex"; 	
}