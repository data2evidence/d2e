PROCEDURE "hc.hph.collections.db.procedures::CREATE_ITEM" ( 

	IN  it_new "hc.hph.collections.db.models::TT_ITEM_DATA", 
	OUT ot_error "hc.hph.core.db.models::TT_ODATA_ERROR" 
	
	)
	
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
	lv_count BIGINT;
	lv_check BIGINT;
	pt_check BIGINT;
	
BEGIN

	declare new_patients_inp "hc.hph.collections.db.models::TT_NOTE";
	--declare ot_error "hc.hph.core.db.models::TT_ODATA_ERROR";
	declare i_i INTEGER;
	declare exists_count INTEGER;
	declare content_str string;
	
	select "Id" from "hc.hph.collections.db.models::CollectionModel.Collection"
		where "Id" in (select "Id" from :it_new) for update
	;

	select count(*) into lv_count from :it_new;
	select count(*) into lv_check 
		from :it_new item
		inner join "hc.hph.collections.db.models::CollectionModel.Participant" p on
			p."Collection.Id" = item."CollectionId" 
		and p."HANAUserName" = SESSION_CONTEXT('XS_APPLICATIONUSER')	
		and p."Privilege.Id" != '1'
	;
	
	if :lv_count <> :lv_check then 
		ot_error = 
			select 403 as http_status_code, 'Write access forbidden' as error_message, 'Error updating collections - permission denied.' as detail from "hc::DUMMY";
		
	else
	
	content_str := '["' || SESSION_CONTEXT('XS_APPLICATIONUSER') || '"]';
	new_patients = select * from(
				( 
					select 
					"Id",
					"ItemType",
					"CollectionId"										
					from :it_new 
				) 
				minus
				(
					select 
					t1."Id",
					t1."ItemType",
					"Collection.Id" as "CollectionId"
				
					from "hc.hph.collections.db.models::CollectionModel.Item" t1
					join :it_new t2
					on t1."Id" = t2."Id" and  t1."Collection.Id" = t2."CollectionId" 
				));
				
	select count(*) into exists_count from :new_patients;
	
	if exists_count = 0 then
		ot_error = select 402 as http_status_code, 'Data exist already' as error_message, 'Error inserting patient(s) - patient(s) exists.' as detail from "hc::DUMMY";
	else
	
	insert into "hc.hph.collections.db.models::CollectionModel.Item"
	("Id","ItemType","Collection.Id","CreatedBy","CreatedAt","ChangedBy","ChangedAt","Status.Id")
	(select 
		"Id",
		"ItemType",
		"CollectionId",
		SESSION_CONTEXT('XS_APPLICATIONUSER') as "CreatedBy",
		CURRENT_UTCTIMESTAMP as "CreatedAt",
		SESSION_CONTEXT('XS_APPLICATIONUSER') as "ChangedBy",
		CURRENT_UTCTIMESTAMP as "ChangedAt",
		 '1'
		from :new_patients)
	;
	

	new_patients_inp = select '' as "Id",
				"CollectionId","Id" as "ItemId",
				'PATIENTADDEDTOCOHORT' as "Text",'SYSTEM_NOTE' as "Type" ,
				SESSION_CONTEXT('XS_APPLICATIONUSER') as "CreatedBy",
				CURRENT_UTCTIMESTAMP as "CreatedAt" , content_str as "Content" from :new_patients; 	
	
		
	if exists_count >0 then

		CALL "hc.hph.collections.db.procedures::CREATE_MULTIPLENOTES"(:new_patients_inp,:ot_error);

	end if;
	
	update "hc.hph.collections.db.models::CollectionModel.Collection" col
	set 
		col."ChangedBy" = SESSION_CONTEXT('XS_APPLICATIONUSER'),
		col."ChangedAt" = CURRENT_UTCTIMESTAMP
	FROM "hc.hph.collections.db.models::CollectionModel.Collection" col,:it_new upd
		WHERE col."Id" = upd."CollectionId"
	;
	
	end if;
	end if;		
	
END;