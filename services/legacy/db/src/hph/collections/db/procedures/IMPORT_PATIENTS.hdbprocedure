PROCEDURE "hc.hph.collections.db.procedures::IMPORT_PATIENTS" ( 
	IN input_patients "hc.hph.collections.db.models::TT_IMPORT_PATIENTS",
	IN title NVARCHAR (100),
	OUT final_patients TABLE ("PatientID" NVARCHAR(100), "Source" NVARCHAR(20), "IExists" NVARCHAR(100)) 
	) 
	LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS 
BEGIN
	-- Find the patient that exist in the Patient Table and store it in a variable
	patients_to_insert = select ip."PatientID", ip."Source",cast ("hc.hph.cdw.db.etl::HashDWID"(ip."Source", ip."PatientID") as varchar(100))  as DWIDHASH  from :input_patients as ip where exists (select 1 from  "hc.hph.cdw.db.models::DWEntities.Patient_Key" as pk where ip."PatientID" = pk."PatientID" AND ip."Source" = pk."DWSource");
	
	-- Find the collection id of the new Cohort created
	collection_id = select "Id" from "hc.hph.collections.db.models::CollectionModel.Collection" where "Title"= :title and "CreatedBy" =	SESSION_CONTEXT('XS_APPLICATIONUSER') ;
	
	-- Find the distinct patients to insert in the cohort
	distinct_patients = select distinct DWIDHASH from  :patients_to_insert;
	
	-- create variable as per create ITem procedure.
	new_import_patient = select DWIDHASH as "Id",
								'hhp.tax.Patient' as "ItemType", 
								(select "Id" from :collection_id ) as "CollectionId",
								SESSION_CONTEXT('XS_APPLICATIONUSER') as "CreatedBy",
								CURRENT_UTCTIMESTAMP as "CreatedAt",
								SESSION_CONTEXT('XS_APPLICATIONUSER') as "ChangedBy",
								CURRENT_UTCTIMESTAMP as "ChangedAt", 
								'1' as "StatusId" 
								from :distinct_patients;
	
	-- call procedure to add patients to a cohort.
     call "hc.hph.collections.db.procedures::CREATE_ITEM"(:new_import_patient,?);   
	
	-- Prepare data to send to xsjs 
	final_patients = select ip."PatientID", ip."Source", 'Exists' as "IExists" from :input_patients  as ip where exists (select 1 from  "hc.hph.cdw.db.models::DWEntities.Patient_Key" as pk where ip."PatientID" = pk."PatientID" AND ip."Source" = pk."DWSource") union all
  	select ip."PatientID", ip."Source", 'NotExists' as "IExists" from :input_patients  as ip where not exists (select 1 from  "hc.hph.cdw.db.models::DWEntities.Patient_Key" as pk where ip."PatientID" = pk."PatientID" AND ip."Source" = pk."DWSource");
 
END;