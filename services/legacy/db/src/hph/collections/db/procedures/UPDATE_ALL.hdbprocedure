PROCEDURE "hc.hph.collections.db.procedures::UPDATE_ALL" (
	IN collection_id NVARCHAR(256), 
	IN old_status NVARCHAR(256),
	IN new_status NVARCHAR(256),
	IN txt NVARCHAR(4096),
	
	OUT ot_error "hc.hph.core.db.models::TT_ODATA_ERROR"
	) 
	
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	--READS SQL DATA
	AS
	
	lv_count BIGINT;
	lv_check BIGINT;
	
BEGIN
	
	create local temporary table #res_update ("Id" NVARCHAR(256),
	 			"ItemType" NVARCHAR(256),
	 			"CollectionId" NVARCHAR(256),
	 			"CreatedBy" NVARCHAR(256),
	 			"CreatedAt" TIMESTAMP,
	 			"ChangedBy" NVARCHAR(256),
	 			"ChangedAt" TIMESTAMP,
	 			"StatusId" NVARCHAR(256));
	 			
	insert into "#RES_UPDATE" select "Id",
	 			"ItemType",
	 			"Collection.Id" as "CollectionId",
	 			"CreatedBy",
	 			"CreatedAt",
	 			"ChangedBy",
	 			"ChangedAt",
	 			"Status.Id" as "StatusId"
				FROM "hc.hph.collections.db.models::CollectionModel.Item"
				WHERE "Status.Id" = :old_status AND "Collection.Id" = :collection_id;
	
	select count(*) into lv_count from "#RES_UPDATE";
	
	UPDATE "#RES_UPDATE"
		SET "StatusId" = :new_status;
		--WHERE "CollectionId" = :collection_id;
	
	select count(*) into lv_count from "#RES_UPDATE";
	
	select count(*) into lv_check from "#RES_UPDATE" item
		inner join "hc.hph.collections.db.models::CollectionModel.Participant" p on
		p."Collection.Id" = item."CollectionId"
		and p."HANAUserName" = SESSION_CONTEXT('XS_APPLICATIONUSER')	
		and p."Privilege.Id" != '1';
	
	if lv_count != :lv_check then 
		ot_error = select 403 as http_status_code,
		'Write access forbidden' error_message,
		'Error updating collections - permission denied.' detail
		from "hc::DUMMY";
		return;	
	end if;	
	
	update "hc.hph.collections.db.models::CollectionModel.Item" item
	set 
		item."ChangedBy" = SESSION_CONTEXT('XS_APPLICATIONUSER'),
		item."ChangedAt" = CURRENT_UTCTIMESTAMP,
		item."Status.Id" = upd."StatusId"
		FROM "hc.hph.collections.db.models::CollectionModel.Item" item, "#RES_UPDATE" upd
		WHERE item."Id" = upd."Id"
		and item."ItemType" = upd."ItemType"
		and item."Collection.Id" = upd."CollectionId";
	
	update "hc.hph.collections.db.models::CollectionModel.Collection" col
	set 
		col."ChangedBy" = SESSION_CONTEXT('XS_APPLICATIONUSER'),
		col."ChangedAt" = CURRENT_UTCTIMESTAMP
		FROM "hc.hph.collections.db.models::CollectionModel.Collection" col, "#RES_UPDATE" upd
		WHERE col."Id" = upd."CollectionId";
		
	--ADDING NOTES--
	 
	 begin
	 	if :new_status = '3' then
	 	 	insert into "hc.hph.collections.db.models::CollectionModel.Comment"
	 	 		("Id",
	 	 		"Collection.Id",
	 	 		"Item.Id",
	 	 		"Text",
	 	 		"Type",
	 	 		"CreatedBy",
	 	 		"CreatedAt")
	 	 	select substring((select cast(SYSUUID as NVARCHAR(32)) || "Id" from "hc::DUMMY"), 1,32),
	 	 		"CollectionId",
	 	 		"Id" ,
	 	 		:txt ,
	 	 		'USER_NOTE',
	 	 		SESSION_CONTEXT('XS_APPLICATIONUSER'),
	 	 		CURRENT_UTCTIMESTAMP 
			from "#RES_UPDATE";
		
		elseif :new_status = '2' then
			insert into "hc.hph.collections.db.models::CollectionModel.Comment"
				("Id",
				"Collection.Id",
				"Item.Id",
				"Text",
				"Type",
				"CreatedBy",
				"CreatedAt",
				"Content")
				
			select res."Id",
				res."Collection.Id",
				res."Item.Id",
				res."Text",
				res."Type",
				res."CreatedBy",
				res."CreatedAt",
				res1."Content"	
				from
	 	 	(select substring((select cast(SYSUUID as NVARCHAR(32)) || "Id" from "hc::DUMMY"), 1,32) as "Id",
	 	 		"CollectionId" as "Collection.Id",
	 	 		"Id" as "Item.Id",
	 	 		'INCSYSTEMNOTE' as "Text",
	 	 		'SYSTEM_NOTE' as "Type",
	 	 		SESSION_CONTEXT('XS_APPLICATIONUSER') as "CreatedBy",
	 	 		CURRENT_UTCTIMESTAMP as "CreatedAt"
	 	 		from "#RES_UPDATE") res
	 	 		left outer join 
	 	 		(select '["' || "FamilyName" || '","' || "GivenName" || '"]' as "Content", "PatientID"
	 	 			FROM "hc.hph.cdw.db.models::DWViews.Patient") res1
	 	 			on res."Item.Id" = res1."PatientID";
			
			
		elseif :new_status = '1' then
			ot_error = select 403 as http_status_code,
				'StatusId not possible' error_message,
				'Error updating collections - StatusId not possible.' detail
				from "hc::DUMMY";
	 	end if;
	 end;
		
END;
