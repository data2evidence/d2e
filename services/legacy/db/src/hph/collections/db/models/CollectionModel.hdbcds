namespace hc.hph.collections.db.models;
using hc.hph.collections.db.models::CollectionModel.Collection as collectionsAlias;
using hc.hph.collections.db.models::CollectionModel.Item as itemAlias;
using hc.hph.collections.db.models::CollectionModel.Participant as participantsAlias;
using hc.hph.um.user.db::userTable as userTableAlias;
using common::Search;
using common::EnterpriseSearch;
using common::EnterpriseSearchHana;


context CollectionModel {
    entity CollectionType {
        key Id:                 String(32) not null;  // ID of the Type of the collection
        TitleKey:               String(256) not null; // Title of the collection type
        DescriptionKey:         String(4096);         // Description of the collection type
    } technical configuration {
        column store;
    };

    entity Collection {
        key Id:             String(32) not null;    // comment = "Unique identifier of the collection"
        Type { Id : String(32); } not null;
        Status { Id : String(32); };
       /* @SearchIndex.text: {   enabled: true, name: 'CollectionTitle' } */
       /* @SearchIndex.fuzzy.enabled:true */
        Title:              String(256) not null;   // "Title of the collection"
       /* @SearchIndex.text: {    enabled: true, name: 'CollectionDesc' } */
       /* @SearchIndex.fuzzy.enabled:true */
        Description:       String(4096);            // "Description of the collection"
        CreatedBy:         String(256) not null;    // "User who created this entity"
        CreatedAt:         UTCTimestamp not null;   // "Time of creation of this entity"
        ChangedBy:         String(256);             // "User who modified this entity"
        ChangedAt:         UTCTimestamp;            // "Time of modification of this entity"
    } technical configuration {
        column store;

    FULLTEXT INDEX CollectionTitle ON ( Title )
        FUZZY SEARCH INDEX ON
        SEARCH ONLY OFF
        PHRASE INDEX RATIO 0.0
        ASYNC
        FAST PREPROCESS ON;

    FULLTEXT INDEX CollectionDesc ON ( Description )
        FUZZY SEARCH INDEX ON
        SEARCH ONLY OFF
        PHRASE INDEX RATIO 0.0
        ASYNC
        FAST PREPROCESS ON;
    };


    entity Item {
        key Id:         String(100) not null;    // Identifier of the item
        key ItemType:   String(1024) not null;   // Type of the item
        key Collection {
            Id : String(32);
        } not null;
        CreatedBy:      String(256) not null;    // User who created this entity
        CreatedAt:      UTCTimestamp not null;   //  Time of creation of this entity
        ChangedBy:      String(256);             // User who modified this entity
        ChangedAt:      UTCTimestamp;            // Time of modification of this entity
        Status{ Id : String(32); }not null ; //@TODO Default for association
    } technical configuration {
        column store;
    };

    entity Status {
        key Id:            String(32) not null;    // Unique identifier of the status
        Title:             String(256) not null;   // Title of the status
        Description:       String(1024) not null;  // Description of the status
        LanguageIsoCode:   String(2) not null;     // Language ISO code of the status text
    } technical configuration {
        column store;
    };

    entity StatusConfiguration {
        key Id:                  String(32) not null;    // Identifier of the item
        key CollectionType{ Id : String(32); };
        key ItemType:            String(1024) default '';// ID of the collection
        TextKey:                 String(1024) not null;  // Text of the status
        IconSource:              String(256);            // Icon src for the icon
        Items:                   association [*] to Item on Items.Status.Id = Id;
    } technical configuration {
        column store;
    };

    entity CohortsStatusConfig {
        Id:                      String(32) not null;    // Identifier of the item
        CollectionType{ Id : String(32); };
        ItemType:            String(1024) default '';// ID of the collection
        TextKey:                 String(1024) not null;  // Text of the status
        IconSource:              String(256);            // Icon src for the icon
        Language:                String(32);            // Language of the Text
        Items:                   association [*] to Item on Items.Status.Id = Id;
    } technical configuration {
        column store;
    };

    entity Comment {
        key Id:         String(32) not null;
        Collection{ Id : String(32); } not null;
        Item{ Id : String(100); } not null;

        Text:           String(1024) not null;
        Type:           String(1024) not null;
        CreatedBy:      String(256) not null;
        CreatedAt:      UTCTimestamp not null;
        Content : String(2000);
    } technical configuration {
        column store;
    };


    entity ParticipantPrivilege {
        key Id:                String(32) not null;
        key LanguageIsoCode:   String(2);
        Title:                 String(256) not null;
        Description:           String(1024);
    } technical configuration {
        column store;
    };

    entity Participant {
        key HANAUserName:   String(256) not null;   // Identifier of the user
        key Collection{ Id : String(32); } not null;  // Identifier of the collection
        Privilege{ Id : String(32); } not null;  // Identifier of the privilege
        CreatedBy:          String(256) ;           // User who created this entity
        CreatedAt:          UTCTimestamp;           // Time of creation of this entity
        ChangedBy:          String(256);            // User who modified this entity
        ChangedAt:          UTCTimestamp;           // Time of modification of this entity
    } technical configuration {
        column store;
    };

    view AllMyCollections as select from CollectionModel.Collection mixin {
        _Participant : association to CollectionModel.Participant on _Participant.Collection.Id = Id;
        _UserInfo1 : association to userTableAlias.USER_ATTRIBUTES on Collection.CreatedBy = _UserInfo1.username and _UserInfo1.attribute_id = 'FIRSTNAME';
        _UserInfo2 : association to userTableAlias.USER_ATTRIBUTES on Collection.CreatedBy = _UserInfo2.username and _UserInfo2.attribute_id = 'LASTNAME';
    } into {
        Id,
        Type.Id as CollectionType,
        Title,
        Description,
        CreatedBy,
        CreatedAt,
        ChangedBy,
        ChangedAt,
        concat(_UserInfo1.entry, concat(' ', _UserInfo2.entry)) as full_name
    } where session_context('XS_APPLICATIONUSER') = _Participant.HANAUserName and Type.Id = '1';

     view AllMyCollections2 as select from CollectionModel.Collection mixin {
        _Participant : association to CollectionModel.Participant on _Participant.Collection.Id = Id;
        _Participant2 : association to CollectionModel.ParticipantIds on _Participant2.CollectionId = Id;
        _Item : association to CollectionModel.ItemIds on _Item.CollectionId = Id ;
        _IncludedPatients: association to CollectionModel.IncludedPatientIds on _IncludedPatients.CollectionId = Id;
        _Notes: association to CollectionModel.NoteIds on _Notes.CollectionId = Id;
    } into {
        Id,
        Type.Id as CollectionType,
        Title,
        Description,
        CreatedBy,
        CreatedAt,
        ChangedBy,
        ChangedAt,
        _Participant.Privilege.Id as PrivilegeId,
        _Participant2.ParticipantCount,
        _Item.ItemCount as ItemCount,
        _IncludedPatients.IncludedCount as IncludedCount,
        _Notes.NoteCount as NoteCount
    } where session_context('XS_APPLICATIONUSER') = _Participant.HANAUserName and Type.Id = '1';



    @Search.searchable: true
    @EnterpriseSearch.enabled: true

    view AllMyCollections3 as select from CollectionModel.Collection mixin {
        _Participant : association to CollectionModel.Participant on _Participant.Collection.Id = Id ;
        _UserInfo1 : association to userTableAlias.USER_ATTRIBUTES on Collection.CreatedBy = _UserInfo1.username and _UserInfo1.attribute_id = 'FIRSTNAME';
        _UserInfo2 : association to userTableAlias.USER_ATTRIBUTES on Collection.CreatedBy = _UserInfo2.username and _UserInfo2.attribute_id = 'LASTNAME';
    } into {
        @EnterpriseSearch.presentationMode: [#DETAIL]
        @EnterpriseSearch.key : true
        @Search: {  defaultSearchElement: true }
        Id,

        @EnterpriseSearch.presentationMode: [#TITLE]
        Type.Id as CollectionType,

        @EnterpriseSearch.presentationMode: [#TITLE]
        @EnterpriseSearch.usageMode: [ #SUGGESTION ]
    	@Search: { 	defaultSearchElement: true,	fuzzinessThreshold: 0.9, ranking: #HIGH	}        
        Title,

        @EnterpriseSearch.presentationMode: [#TITLE]
        @EnterpriseSearch.usageMode: [ #SUGGESTION ]
        @Search: {  defaultSearchElement: true, fuzzinessThreshold: 0.9, ranking: #HIGH }
        Description,

        @EnterpriseSearch.presentationMode: [#TITLE]
        @EnterpriseSearch.usageMode: [ #SUGGESTION ]
        @Search: {  defaultSearchElement: true, fuzzinessThreshold: 0.85, ranking: #MEDIUM  }
        CreatedBy,

        @EnterpriseSearch.presentationMode: [#TITLE]
        CreatedAt,

        concat(_UserInfo1.entry, concat(' ', _UserInfo2.entry)) as full_name,

        @EnterpriseSearch.presentationMode: [#TITLE]
        @EnterpriseSearch.usageMode: [ #SUGGESTION ]
        @Search: { defaultSearchElement: true,  fuzzinessThreshold: 0.85, ranking: #MEDIUM  }
        _UserInfo1.entry as first_name,

        @EnterpriseSearch.presentationMode: [#TITLE]
        @EnterpriseSearch.usageMode: [ #SUGGESTION ]
        @Search: { defaultSearchElement: true,  fuzzinessThreshold: 0.85, ranking: #MEDIUM  }
        _UserInfo2.entry as last_name,

        @EnterpriseSearch.presentationMode: [#TITLE]
        @EnterpriseSearch.usageMode: [ #SUGGESTION ]
        @Search: {  defaultSearchElement: true, fuzzinessThreshold: 0.75, ranking: #LOW }
       // STRING_AGG(_Participant.HANAUserName,',') as participants
        _Participant.HANAUserName as participants,

             //JointResultList
        @EnterpriseSearch.presentationMode: [#TITLE]
        Title as JointResultListTitle,

        @EnterpriseSearch.presentationMode: [#TITLE]
        Description as JointResultListDescription

    } where session_context('XS_APPLICATIONUSER') = _Participant.HANAUserName and Type.Id = '1';
   
   
   // GROUP BY Collection.Id;


  // view CollectionParticipants as select from CollectionModel.Participant
  //  {Collection.Id as Id, string_agg("HANAUserName") as names }
  //    GROUP BY Collection.Id;

   // string_agg("InteractionsEAV"."VALUE",'_') as aggCol --order by "Patient"."PATIENT_ID","Interactions"."START")) 




    //@Search: { searchable : true }
    view UserCollections as select from CollectionModel.Collection mixin {
        _Participant : association to CollectionModel.Participant on _Participant.Collection.Id = Id;
        _Participant2 : association to CollectionModel.ParticipantIds on _Participant2.CollectionId = Id;
        _Item : association to CollectionModel.ItemIds on _Item.CollectionId = Id ;
        _Notes: association to CollectionModel.NoteIds on _Notes.CollectionId = Id;
        _IncludedPatients: association to CollectionModel.IncludedPatientIds on _IncludedPatients.CollectionId = Id;
    } into {
        Id,
        Type.Id as CollectionType,
        //@Search: { defaultSearchElement: true, fuzzinessThreshold: 0.9 }
        Title,
        //@Search: { defaultSearchElement: true, fuzzinessThreshold: 0.9 }
        _Notes.NoteCount as NoteCount,
        Description,
        CreatedBy,
        CreatedAt,
        ChangedBy,
        ChangedAt,
        _Participant.Privilege.Id as PrivilegeId,
        _Participant2.ParticipantCount as ParticipantCount,
        _Item.ItemCount as PatientCount,
        _Item.ItemCount as ItemCount,
        _IncludedPatients.IncludedCount as IncludedCount
    } where session_context('XS_APPLICATIONUSER') = _Participant.HANAUserName ;


    view NoteIds as select from CollectionModel.AllCollectionComments {
        count(Id) as NoteCount,
        CollectionId as CollectionId
    } group by CollectionId;

    view ParticipantIds as select from CollectionModel.Participant {
        count(HANAUserName) as ParticipantCount,
        Collection.Id as CollectionId
    } group by Collection.Id;

    view AllItems as select from CollectionModel.Item {
       Id,
       ItemType,
       Collection.Id as CollectionId,
       CreatedBy,
       CreatedAt,
       ChangedBy,
       ChangedAt,
       Status.Id as StatusId
    } ;

    view ItemIds as select from CollectionModel.Item {
       count(Id) as ItemCount,
       Collection.Id as CollectionId
    }group by Collection.Id;

    view ItemsCollectionIds as select from CollectionModel.Item mixin {
        _Participant : association to CollectionModel.Participant on _Participant.Collection.Id = Collection.Id;
     }into {
       Id,
       count(Collection.Id) as CohortCount
    }

    group by Id;



    view AllCollectionComments as select from CollectionModel.Comment {
        Id,
        Collection.Id as CollectionId,
        Item.Id as ItemId,
        Text,
        Type,
        CreatedBy,
        CreatedAt,
        Content
    } where Item.Id = '' ;

    view ItemNoteIds as select from CollectionModel.AllItemComments {
        count(Id) as NoteCount,
        ItemId,
        CollectionId as CollectionId
    } group by CollectionId, ItemId ;

    view AllItemComments as select from CollectionModel.Comment {
        Id,
        Collection.Id as CollectionId,
        Item.Id as ItemId,
        Text,
        Type,
        CreatedBy,
        CreatedAt
    } where Item.Id <> '' ;

    view AllPrivileges as select from CollectionModel.ParticipantPrivilege {
        Id,
        Title
    };

    view AllParticipants as select from CollectionModel.Participant {
        Collection.Id as CollectionId,
        Privilege.Id as PrivilegeId,
        HANAUserName,
        ' ' as CreatorFirstName,
        ' ' as CreatorLastName,
        ' ' as CreatorDefaultEMailAddress,
        ' ' as CreatorDefaultHomepageURL
    } ;

    view PatientItems as Select from CollectionModel.Item mixin {
        _Items2 : association[1..*] to CollectionModel.ItemsCollectionIds on _Items2.Id = Id;
        _Notes: association to CollectionModel.ItemNoteIds on _Notes.ItemId = Id and _Notes.CollectionId = Collection.Id;
        _Items3: association to CollectionModel.CollectionItemsByStatus on _Items3.CollectionId = Collection.Id and _Items3.StatusId = Status.Id;
        _Items4: association to CollectionModel.ItemIds on _Items4.CollectionId = Collection.Id;
    } into {
        Id,
        ItemType,
        Collection.Id as CollectionId,
        _Notes.NoteCount as NoteCount,
        _Items2.CohortCount as CohortCount,
        _Items3.ItemCount as ItemCount,
        _Items4.ItemCount as TotalCount,
        CreatedBy,
        CreatedAt,
        ChangedBy,
        ChangedAt,
        Status.Id as StatusId
    } where ItemType = 'hhp.tax.Patient' ;


    view IncludedPatientIds as Select from CollectionModel.Item {
        count(Status.Id) as IncludedCount,
        Collection.Id as CollectionId
    } where ItemType = 'hhp.tax.Patient' and Status.Id = '2' group by Collection.Id;

   /* @WithStructuredPrivilegeCheck: true
    view PatientIds as Select from CollectionModel.Item mixin {
        _Patients : association to guardedPatient on _Patients.PatientID = Id;
    } into {
        count(Id) as PatientCount,
        Collection.Id as CollectionId
    } where ItemType = 'hhp.tax.Patient' and _Patients.PatientID IS NOT NULL group by Collection.Id;
     */
    view CollectionStatusConfiguration as select from CollectionModel.StatusConfiguration {
        Id,
        CollectionType.Id as CollectionTypeId,
        IconSource,
        TextKey
    } where ItemType = 'hhp.tax.Patient';

    view CollectionItemsByStatus as select from CollectionModel.Item {
        Collection.Id as CollectionId,
        Status.Id as StatusId,
        count(Id) as ItemCount
    } group by Status.Id, Collection.Id ;

    view StatusCount as Select from CollectionModel.StatusConfiguration {
        Id,
        TextKey,
        count(Items.Id) as ItemsCount,
        Items.Collection.Id as CollectionId
    } group by Id, TextKey, Items.Collection.Id ;

};
