/**
 * Reads next (smallest) package id from source with all records where _SourceID matches the Profile SourceID or where _SourceID is null.
 *  
 * @param[in]  {INT}            _ProfileID          - ProfileID
 * @param[in]  {NVARCHAR(1000)} _Source             - FQN of source object (table, virtual table or view)
 * @param[in]  {NVARCHAR(5)}    _SourceID           - Source ID
 * @param[in]  {BOOLEAN}        _ProcessPackages    - Load next package if last package was loaded successfully but still exists. 
 * @param[out] {INTEGER}        PackageID_          - Package ID
 * @param[out] {INTEGER}        NumRecords_         - Number of records in given Package ID
 */
PROCEDURE "hc.hph.plugins.ccdi.db.procedures::getNextPackageID" (
    IN _ProfileID INT,
    IN _Source NVARCHAR(1000),
    IN _SourceID NVARCHAR(5),
    IN _ProcessPackages BOOLEAN,
    OUT PackageID_ INT,
    OUT NumRecords_ INT )
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
 
    AS
BEGIN

    DECLARE SQLInjection CONDITION FOR SQL_ERROR_CODE 10001; 
    
    DECLARE LastPackageID INT := NULL;    
    PackageID_ := NULL;
    NumRecords_ := 0;
    
    IF is_sql_injection_safe( :_Source, 2 ) = 1 THEN
        
        -- Create local table to retreive data from dynamic sql
        CREATE LOCAL TEMPORARY TABLE #LOCAL_TEMP_TABLE( "Value" INT );
        
        -- Get next smallest package id        
        IF _ProcessPackages = TRUE THEN        
             CALL "hc.hph.plugins.ccdi.db.procedures::GetLastPackageID"( :_ProfileID, :_Source, LastPackageID ); 
             IF LastPackageID IS NULL THEN
                IF _SourceID IS NULL OR _SourceID = '' THEN
                    EXEC 'INSERT INTO #LOCAL_TEMP_TABLE SELECT MIN( "_PackageID" ) FROM ' || escape_single_quotes( :_Source );                                     
                ELSE
                    EXEC 'INSERT INTO #LOCAL_TEMP_TABLE SELECT MIN( "_PackageID" ) FROM ' || escape_single_quotes( :_Source ) || ' WHERE "_SourceID" = ''' || escape_single_quotes( :_SourceID ) || '''';                                                     
                END IF;
             ELSE
                IF _SourceID IS NULL OR _SourceID = '' THEN
                    EXEC 'INSERT INTO #LOCAL_TEMP_TABLE SELECT MIN( "_PackageID" ) FROM ' || escape_single_quotes( :_Source ) || ' WHERE ("_PackageID" > ' || :LastPackageID || ')';                                     
                ELSE
                    EXEC 'INSERT INTO #LOCAL_TEMP_TABLE SELECT MIN( "_PackageID" ) FROM ' || escape_single_quotes( :_Source ) || ' WHERE ("_PackageID" > ' || :LastPackageID || ') AND "_SourceID" = ''' || escape_single_quotes( :_SourceID ) || '''';                
                END IF;
             END IF;
        ELSE
            IF _SourceID IS NULL OR _SourceID = '' THEN
                EXEC 'INSERT INTO #LOCAL_TEMP_TABLE SELECT MIN( "_PackageID" ) FROM ' || escape_single_quotes( :_Source );
            ELSE
                EXEC 'INSERT INTO #LOCAL_TEMP_TABLE SELECT MIN( "_PackageID" ) FROM ' || escape_single_quotes( :_Source ) || ' WHERE "_SourceID" = ''' || escape_single_quotes( :_SourceID ) || '''';
            END IF;
        END IF;                     
        
        SELECT "Value" INTO PackageID_ FROM #LOCAL_TEMP_TABLE; 

        -- Get number of records in next package
        DELETE FROM #LOCAL_TEMP_TABLE;
        IF :PackageID_ IS NOT NULL THEN
            IF _SourceID IS NULL OR _SourceID = '' THEN
                EXEC 'INSERT INTO #LOCAL_TEMP_TABLE SELECT COUNT(*) FROM ' || escape_single_quotes( :_Source ) || ' WHERE "_PackageID" = ' || :PackageID_;        
            ELSE
                EXEC 'INSERT INTO #LOCAL_TEMP_TABLE SELECT COUNT(*) FROM ' || escape_single_quotes( :_Source ) || ' WHERE "_PackageID" = ' || :PackageID_ || ' AND "_SourceID" = ''' || escape_single_quotes( :_SourceID ) || '''';                    
            END IF;
            SELECT "Value" INTO NumRecords_ FROM #LOCAL_TEMP_TABLE;
        END IF;

        DROP TABLE #LOCAL_TEMP_TABLE;        
    ELSE        
        SIGNAL SQLInjection SET MESSAGE_TEXT = 'Invalid object source name ' || :_Source; 
    END IF;       
    
END;
