/**
 * Reads next (smallest) package id from source with all records where _SourceID matches the Profile SourceID or where _SourceID is null.
 *  
 * @param[in]  {INT}            _ProfileID          - ProfileID
 * @param[in]  {NVARCHAR(1000)} _Source             - FQN of source object (table, virtual table or view)
 * @param[in]  {NVARCHAR(5)}    _SourceID           - Source ID
 * @param[in]  {BOOLEAN}        _ProcessPackages    - Load next package if last package was loaded successfully but still exists. This does not work right now.. 
 * @param[out] {INTEGER ARRAY}  PackageIDs          - Package ID
 * @param[out] {INTEGER ARRAY}  NumRecords          - Number of records in given Package ID
 */
PROCEDURE "hc.hph.plugins.ccdi.db.procedures::getPackageInformationForSource" (
	    IN _ProfileID BIGINT,
	    IN _Source NVARCHAR(1000),
	    IN _ProcessPackages TINYINT,
	    OUT PackageInformation "hc.hph.plugins.ccdi.db.models::Config.PackageInformationForSourceType"
    )
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
 
    AS
BEGIN


DECLARE SQLInjection CONDITION FOR SQL_ERROR_CODE 10001;
DECLARE sql_statement NVARCHAR(1024);
DECLARE LastPackageID BIGINT := NULL;

IF is_sql_injection_safe( :_Source, 2 ) = 1 THEN

	-- Create local table to retreive data from dynamic sql
	CREATE LOCAL TEMPORARY TABLE #LOCAL_TEMP_TABLE( "PackageID" BIGINT, "NumRecords" INT);
	
		CALL "hc.hph.plugins.ccdi.db.procedures::GetLastPackageID"( :_ProfileID, :_Source, LastPackageID );
		
        IF _ProcessPackages = 1 THEN --take all packages
             IF LastPackageID IS NULL THEN --starting with first available package
             	sql_statement := 'INSERT INTO #LOCAL_TEMP_TABLE SELECT "_PackageID" AS "PackageID", COUNT(*) AS "NumRecords" FROM ' || escape_single_quotes(:_Source) || ' GROUP BY "_PackageID" ORDER BY "_PackageID";';                                  
	         ELSE --starting with a package bigger than LastPackageID
	         	sql_statement := 'INSERT INTO #LOCAL_TEMP_TABLE SELECT "_PackageID" AS "PackageID", COUNT(*) AS "NumRecords" FROM ' || escape_single_quotes(:_Source) || ' WHERE ("_PackageID" > ' || :LastPackageID || ') GROUP BY "_PackageID" ORDER BY "_PackageID";';                        
	         END IF;
        -- get all Packages
        ELSE --take the first package
             IF LastPackageID IS NULL THEN --take the first available package
             	sql_statement := 'INSERT INTO #LOCAL_TEMP_TABLE SELECT "_PackageID" AS "PackageID", COUNT(*) AS "NumRecords" FROM ' || escape_single_quotes(:_Source) || ' WHERE "_PackageID" = (SELECT MIN("_PackageID") FROM ' || escape_single_quotes(:_Source) || ') GROUP BY "_PackageID";';
             ELSE --take the first package bigger than LastPackageID 
				sql_statement := 'INSERT INTO #LOCAL_TEMP_TABLE SELECT "_PackageID" AS "PackageID", COUNT(*) AS "NumRecords" FROM ' || escape_single_quotes(:_Source) || ' WHERE "_PackageID" = (SELECT MIN("_PackageID") FROM ' || escape_single_quotes(:_Source) || ' WHERE "_PackageID" > ' || :LastPackageID || ') GROUP BY "_PackageID";';                                     
             END IF;
        END IF;	
	
	EXEC :sql_statement;
	
	PackageInformation = SELECT "PackageID", "NumRecords" FROM #LOCAL_TEMP_TABLE;
	
	DROP TABLE #LOCAL_TEMP_TABLE;
	
ELSE        
    SIGNAL SQLInjection SET MESSAGE_TEXT = 'Invalid object source name ';-- || :_Source; 
END IF;

END;
