PROCEDURE "hc.hph.plugins.ldap.interface.procedures::validateLogVTPrivilege" ( IN remoteSourceName NVARCHAR (256),
OUT STATUS INTEGER,
OUT OT_ERROR TABLE ("ERROR_TABLE" NVARCHAR(256)))
LANGUAGE SQLSCRIPT 
SQL SECURITY INVOKER 
 AS
BEGIN 


    DECLARE logTableCount INTEGER := 0;
    DECLARE traceTableCount INTEGER := 0;
    DECLARE schemaCount INTEGER :=0;
	declare logVT nvarchar(512);
	declare traceVT nvarchar(512);
	declare schemaName nvarchar(512);
	declare userName nvarchar (100);
    DECLARE STRINGARRAY  NVARCHAR(50) ARRAY;
    declare i INTEGER;
    i := 1;
    status := 0;
     
Select current_user into userName from "hc::DUMMY";
  

  Select distinct "SCHEMA_NAME" into schemaName from "hc::VIRTUAL_TABLES" where "REMOTE_SOURCE_NAME" = :remoteSourceName;

select count(*) INTO schemaCount FROM( SELECT TOP 1 "USER_NAME" FROM "hc::EFFECTIVE_PRIVILEGES" where "USER_NAME" = :userName
 and "OBJECT_TYPE" = 'SCHEMA' and "SCHEMA_NAME" = :schemaName and "PRIVILEGE"= 'SELECT');
 
IF (schemaCount <> 1) THEN
	Select "TABLE_NAME" into logVT from "hc::VIRTUAL_TABLES" where "REMOTE_OBJECT_NAME" = 'CDMDEFAULT_VT_LOG_DETAIL';
	Select "TABLE_NAME" into traceVT from "hc::VIRTUAL_TABLES" where "REMOTE_OBJECT_NAME" = 'CDMDEFAULT_VT_LOG_TRACE';
        
    SELECT COUNT(*) INTO logTableCount FROM (
        SELECT TOP 1 "USER_NAME"
        FROM "hc::EFFECTIVE_PRIVILEGES"
        WHERE "USER_NAME" = :userName  AND "OBJECT_NAME" = :logVT AND "PRIVILEGE" = 'SELECT' AND "IS_VALID" = 'TRUE'
    );
    SELECT COUNT(*) INTO traceTableCount FROM (
        SELECT TOP 1 USER_NAME
        FROM "hc::EFFECTIVE_PRIVILEGES"
        WHERE "USER_NAME" = userName  AND "OBJECT_NAME" = :traceVT AND "PRIVILEGE" = 'SELECT' AND "IS_VALID" = 'TRUE'
    );
    
  
    IF(:logTableCount <> 1)THEN
     STRINGARRAY[:i] := :logVT;
     i := :i+1;
    END IF;
    IF(:traceTableCount <> 1)THEN
    STRINGARRAY[:i] := :traceVT;
     i := :i+1;
    END IF;
    
       IF(logTableCount = 1  AND traceTableCount = 1)THEN
        status := 1;
        END IF;
        
      ELSE
      
        status := 1;
        
        END IF;
    
    
    


OT_ERROR = UNNEST (:STRINGARRAY) AS ("ERROR_TABLE");
    
    
    
END