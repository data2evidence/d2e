PROCEDURE "hc.hph.plugins.gff3.db.procedures.annotation::AnnotateFeatures" ( IN iProfileAuditID BIGINT,
	 IN dwAuditID BIGINT,
	 IN explicitRun INT --0-no 1- yes with logs 2- yes but no logs  
) LANGUAGE SQLSCRIPT SQL SECURITY INVOKER AS 
BEGIN DECLARE iDetailID BIGINT
;

if :explicitRun !=2 
then CALL "hc.hph.di.procedures::create_log_detail" ( :iProfileAuditID,
	 SYSUUID,
	 '',
	 'Running',
	 'Internal Annotations',
	 '',
	 '',
	 '',
	 'GFF3',
	 'Annotation in progress',
	 iDetailID )
; 

end if;
delete from "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation" where "RunAuditID"=:iProfileAuditID; --"DWAuditID"=:dwAuditID;


featuresTable = select
	 "DWAuditID",
	"ReferenceID",
	"ChromosomeIndex",
	"Region.Begin",
	"Region.End",
	"FeatureID",
	"Class",
	"FeatureName",
	"Strand",
	"Frame",
	"Score",
	"ParentID",
	"Description",
	"FileChromosomeName",
	"Color" 
from "hc.hph.genomics.db.models::Reference.Features" 
where "DWAuditID"=:dwAuditID
;


 featWithmRNA = select
	 feat."DWAuditID",
	 feat."ReferenceID",
	 feat."FeatureID",
	 feat."ChromosomeIndex",
	 feat."Class",
	 feat."FeatureName",
	 feat."Region.Begin",
	 feat."Region.End",
	 feat."Strand",
	 feat."Frame",
	 feat."Score",
	 feat."ParentID",
	 feat."Description",
	 mRNA."FeatureID" as "mRNA",
	 mRNA."FeatureName" as "Transcript",
	 gene."FeatureName"	as "GeneName" 
from :featuresTable as feat 
inner join (select
	 "FeatureID",
	 "ChromosomeIndex",
	 "Region.Begin",
	 "Region.End",
	 "ParentID",
	 "FeatureName" 
	from :featuresTable 
	where "Class" = 'mRNA' 
	and "DWAuditID" = :dwAuditID) as mRNA on (feat."ChromosomeIndex" = mRNA."ChromosomeIndex" 
	and feat."ParentID"=mRNA."FeatureID") 
inner join (select
	 "FeatureID",
	 "ChromosomeIndex",
	 "Region.Begin",
	 "FeatureName",
	 "Region.End" 
	from :featuresTable 
	where "Class" = 'gene' 
	and "DWAuditID" = :dwAuditID) as gene on (mRNA."ChromosomeIndex" = gene."ChromosomeIndex" 
	and mRNA."ParentID"=gene."FeatureID") 	
where feat."DWAuditID" = :dwAuditID ;


 exons = select
	 featExon."DWAuditID",
	 featExon."ReferenceID",
	 featExon."FeatureID",
	 featExon."ChromosomeIndex",
	 featExon."Class",
	 featExon."FeatureName",
	 featExon."Region.Begin",
	 featExon."Region.End",
	 featExon."Strand",
	 featExon."Frame",
	 featExon."Score",
	 featExon."ParentID",
	 featExon."mRNA",
	 featExon."Transcript",
	 featExon."GeneName",
	 ROW_NUMBER() over (partition by featExon."ChromosomeIndex",
	 featExon."mRNA" 
	Order by featExon."Region.Begin") as "Rank",
	 case when featExon."Strand" = '+' 
then ROW_NUMBER() over (partition by featExon."ChromosomeIndex",
	 featExon."mRNA" 
	Order by featExon."Region.Begin") 
else ROW_NUMBER() over (partition by featExon."ChromosomeIndex",
	 featExon."mRNA" 
	Order by featExon."Region.Begin" desc) 
end as "ExonRank" 
from :featWithmRNA as featExon 
where featExon."Class" = 'exon' 
order by featExon."ChromosomeIndex",
	 featExon."mRNA",
	 "Rank" asc 
;
 cds= SELECT
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Strand",
	 "ParentID",
	 "FeatureID",
	 "Transcript",
	 "GeneName",
	 CASE WHEN "FeatureName" IS NULL 
OR "FeatureName" = '' 
THEN "FeatureID" 
ELSE "FeatureName" 
END AS "FeatureName",
	 MIN( "Region.Begin" ) AS "Region.Begin",
	 MAX( "Region.End" ) AS "Region.End" 
FROM :featWithmRNA 
WHERE "Class" = 'CDS' 
GROUP BY "ReferenceID",
	 "ChromosomeIndex",
	 "ParentID",
	 "FeatureID",
	 "FeatureName",
	 "Strand",
	 "Transcript",
	 "GeneName"
;
 --insert 5' and 3' prime UTR         
insert 
into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Class",
	 "Region.Begin",
	 "Region.End",
	 "FeatureName",
	 "FeatureID",
	 "Strand",
     "Score",
	 "ParentID",
	 "Description",
	 "Sequence",
	 "Rank",
	 "PrePost",
	"ExonRank",
    "Transcript",
	"GeneName"
)(SELECT :iProfileAuditID,
	 exons."DWAuditID",
	 exons."ReferenceID",
	 cds."ChromosomeIndex",
	 CASE WHEN ( cds."Strand" = '+' 
		AND exons."Region.Begin" < cds."Region.Begin" ) 
	OR ( cds."Strand" = '-' 
		AND exons."Region.End" > cds."Region.End") 
	THEN 'five_prime_UTR' 
	ELSE 'three_prime_UTR' 
	END AS "Class",
	 -- determine correct 3/5 notation
 CASE WHEN exons."Region.End" > cds."Region.End" 
        THEN case when exons."Region.Begin" < cds."Region.Begin" and cds."Strand"='+'
               		then  exons."Region.Begin"  
                  when exons."Region.Begin" < cds."Region.Begin" and cds."Strand"='-'
	                then  cds."Region.End"  
          		 else GREATEST( exons."Region.Begin", cds."Region.End" ) end --cds.Beg
    ELSE exons."Region.Begin" END AS "Region.Begin", -- cut exon region if overlap with CDS
    CASE WHEN exons."Region.Begin" < cds."Region.Begin" 
         then case when exons."Region.End" > cds."Region.End" and cds."Strand"='+'
		             then cds."Region.Begin" +1
                   when exons."Region.End" > cds."Region.End" and cds."Strand"='-' 
                      then exons."Region.End"
          else  LEAST( exons."Region.End", (cds."Region.Begin"+1) ) end 
    ELSE exons."Region.End" END AS "Region.End",-- cut exon region if overlap with CDS
 cds."FeatureName",
	 cds."FeatureID",
	 cds."Strand",
	 NULL,
	 exons."ParentID",
	 CASE WHEN ( cds."Strand" = '+' 
		AND exons."Region.Begin" < cds."Region.Begin" ) 
	OR ( cds."Strand" = '-' 
		AND exons."Region.End" > cds."Region.End") 
	THEN 'five_prime_UTR' 
	ELSE 'three_prime_UTR' 
	END AS "Description",
	NULL,
	NULL,
	NULL,
	exons."ExonRank",
	cds."Transcript",
	cds."GeneName"
	FROM :exons as exons 
	inner join :cds as cds ON exons."ReferenceID" = cds."ReferenceID" 
	AND exons."ChromosomeIndex" = cds."ChromosomeIndex" 
	AND exons."ParentID" = cds."ParentID" 
	AND ( -- find all exons that do not completely overlap with the CDS region
 exons."Region.Begin" < cds."Region.Begin" 
		OR exons."Region.End" > cds."Region.End" ) 
	GROUP BY exons."ReferenceID",
	 exons."ParentID",
	 cds."FeatureName",
	 cds."FeatureID",
	 cds."Strand",
	 cds."Region.Begin",
	 cds."Region.End",
	 cds."Transcript",
	 cds."GeneName",
	 exons."Region.Begin",
	 exons."Region.End",
	 cds."ChromosomeIndex",
	 exons."ExonRank",
	 exons."DWAuditID" )
;

--insert 5' and 3'prime UTR when both are on same exon (in that case the 3' prime has to be explicitly inserted )
insert 
into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Class",
	 "Region.Begin",
	 "Region.End",
	 "FeatureName",
	 "FeatureID",
	 "Strand",
	 "Score",
	 "ParentID",
	 "Description",
	 "Sequence",
	 "Rank",
	 "PrePost",
	"ExonRank",
     "Transcript",
     "GeneName"
)( SELECT :iProfileAuditID,
	 exons."DWAuditID",
	 exons."ReferenceID",
	 cds."ChromosomeIndex",
	 'three_prime_UTR' AS "Class",
	 case when cds."Strand"='+' 
	then cds."Region.End"-1 
	else exons."Region.Begin" 
	end as "Region.Begin" ,
	 case when cds."Strand"='+' 
	then exons."Region.End" 
	else cds."Region.Begin"+1 
	end as "Region.End",
	 cds."FeatureName",
	 cds."FeatureID",
	 cds."Strand",
	 NULL,
	 exons."ParentID",
	 'three_prime_UTR' AS "Description",
	 NULL,
	NULL,
	NULL,
	exons."ExonRank",
	cds."Transcript",
	cds."GeneName"
	FROM :exons as exons 
	inner join :cds as cds ON exons."ReferenceID" = cds."ReferenceID" 
	AND exons."ChromosomeIndex" = cds."ChromosomeIndex" 
	AND exons."ParentID" = cds."ParentID" 
	AND ( -- find all exons that do not completely overlap with the CDS region
 exons."Region.Begin" < cds."Region.Begin" 
		AND exons."Region.End" > cds."Region.End" ) 
	GROUP BY exons."ReferenceID",
	 exons."ParentID",
	 cds."FeatureName",
	 cds."FeatureID",
	 cds."Strand",
	 cds."Region.Begin",
	 cds."Region.End",
	 cds."Transcript",
	 cds."GeneName",
	 exons."Region.Begin",
	 exons."Region.End",
	 cds."ChromosomeIndex",
	 exons."ExonRank",
	 exons."DWAuditID" )
;



if :explicitRun !=2 
then CALL "hc.hph.di.procedures::create_log_trace" ( :iDetailID,
	 SYSUUID,
	 'Completed',
	 CURRENT_UTCTIMESTAMP,
	 'Internal Annotation',
	 'UTR annotation completed.' )
;

end 
if
;
 --Annotate introns
introns = select
	 T1."DWAuditID",
	 T1."ReferenceID",
	 T1."ChromosomeIndex",
	 T1."Region.End"+3 as "Region.Begin",
	--T1."Region.End"+4 as "Region.Begin",
 T2."Region.Begin"-3 as "Region.End",
	--T2."Region.Begin"-4 as "Region.End",
 T1."mRNA"||'intron'||T1."Rank" as "FeatureID",
	 'intron' as "Class",
	 T1."mRNA"||'intron'||T1."Rank" as "Name",
	 T1."Strand",
	 --	 T1."Frame",
 T1."Score",
	 T1."ParentID" as "ParentID",
	 'intron' as "Description" 
from :exons as T1 
INNER JOIN :exons as T2 on (T1."Region.End" < T2."Region.End" 
	and T1."Rank" =T2."Rank"-1 
	and T1."ChromosomeIndex"=T2."ChromosomeIndex" 
	and T1."mRNA"=T2."mRNA" 
	and T1."Rank" <T2."Rank") 
order by T1."mRNA" 
;
insert 
into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Region.Begin",
	 "Region.End",
	 "FeatureID",
	 "Class",
	 "FeatureName",
	 "Strand",
     "Score",
	 "ParentID",
	 "Description",
	 "Sequence",
	 "Rank",
	 "PrePost") (select :iProfileAuditID,
	 introns."DWAuditID",
	 introns."ReferenceID",
	 introns."ChromosomeIndex",
	 introns."Region.Begin",
	 introns."Region.End",
	 introns."FeatureID",
	 introns."Class",
	 null,
	 introns."Strand",
	 introns."Score",
	 introns."ParentID",
	 introns."Description",
	 NULL,
	 NULL,
	 NULL 
	from :introns as introns 
	where introns."Region.Begin" < introns."Region.End") 
;

if :explicitRun !=2 
then CALL "hc.hph.di.procedures::create_log_trace" ( :iDetailID,
	 SYSUUID,
	 'Completed',
	 CURRENT_UTCTIMESTAMP,
	 'Internal Annotation',
	 'Intron annotation completed.' )
;

end 
if
;
 --Annotate trans_splice_donor_site
insert 
into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Region.Begin",
	 "Region.End",
	 "FeatureID",
	 "Class",
	 "FeatureName",
	 "Strand",
	  "Score",
	 "ParentID",
	 "Description",
	 "Sequence",
	 "Rank",
	 "PrePost") (select :iProfileAuditID,
	 introns."DWAuditID",
	 introns."ReferenceID",
	 introns."ChromosomeIndex",
	 introns."Region.Begin"-3,
	 (introns."Region.Begin") ,
	--as end is exclusive 
 case when introns."Strand"='+' 
	then introns."FeatureID" ||'trans_splice_donor_site' 
	else introns."FeatureID" ||'trans_splice_acceptor_site' 
	end,
	 case when introns."Strand"='+' 
	then 'trans_splice_donor_site' 
	else 'trans_splice_acceptor_site' 
	end,
	 null,
	 introns."Strand",
	 introns."Score",
	 introns."ParentID",
	 'trans_splice_donor_site',
	 NULL,
	 NULL,
	 NULL 
	from :introns as introns) 
;

if :explicitRun !=2 
then CALL "hc.hph.di.procedures::create_log_trace" ( :iDetailID,
	 SYSUUID,
	 'Completed',
	 CURRENT_UTCTIMESTAMP,
	 'Internal Annotation',
	 'TSDS annotation completed.' )
;

end 
if
;
 --Annotate trans_splice_acceptor_site
insert 
into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Region.Begin",
	 "Region.End",
	 "FeatureID",
	 "Class",
	 "FeatureName",
	 "Strand",
	 "Score",
	 "ParentID",
	 "Description",
	 "Sequence",
	 "Rank",
	 "PrePost") (select :iProfileAuditID,
	 introns."DWAuditID",
	 introns."ReferenceID",
	 introns."ChromosomeIndex",
	 introns."Region.End",
	 (introns."Region.End"+3),
	--as end is already exclusive 
 case when introns."Strand"='+' 
	then introns."FeatureID" ||'trans_splice_acceptor_site' 
	else introns."FeatureID" ||'trans_splice_donor_site' 
	end,
	 case when introns."Strand"='+' 
	then 'trans_splice_acceptor_site' 
	else 'trans_splice_donor_site' 
	end,
	 null,
	 introns."Strand",
	 introns."Score",
	 introns."ParentID",
	 'trans_splice_acceptor_site',
	 NULL,
	 NULL,
	 NULL 
	from :introns as introns) 
;

if :explicitRun !=2 
then CALL "hc.hph.di.procedures::create_log_trace" ( :iDetailID,
	 SYSUUID,
	 'Completed',
	 CURRENT_UTCTIMESTAMP,
	 'Internal Annotation',
	 'TSAS annotation completed.' )
;

end 
if
;
 --Annotate intergenic regions
intergenic_region = select
	 feat."DWAuditID",
	 feat."ReferenceID",
	 feat."FeatureID",
	 feat."ChromosomeIndex",
	 feat."Class",
	 feat."FeatureName",
	 feat."Region.Begin",
	 feat."Region.End",
	 feat."Strand",
	 feat."Score",
	 feat."ParentID",
	 ROW_NUMBER() over (partition by feat."ChromosomeIndex" 
	Order by feat."Region.Begin") as "Rank" 
from :featuresTable as feat 
where feat."Class"='mRNA' 
and feat."DWAuditID" = :dwAuditID 
;
 insert into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Region.Begin",
	 "Region.End",
	 "FeatureID",
	 "Class",
	 "FeatureName",
	 "Strand",
	 "Score",
	 "ParentID",
	 "Description",
	 "Sequence",
	 "Rank",
	 "PrePost") (select :iProfileAuditID,
	 T1."DWAuditID",
	 T1."ReferenceID",
	 T1."ChromosomeIndex",
	 T1."Region.End"+1,
	 (T2."Region.Begin"-1)+1,
	--as end is exclusive 
 T1."FeatureID"||'intergenic_region'||T1."Rank",
	 'intergenic_region',
	 null,
	 T1."Strand",
	 T1."Score",
	 T1."ParentID",
	 'intergenic_region',
	 NULL,
	 NULL,
	 NULL 
	from :intergenic_region as T1 
	INNER JOIN :intergenic_region as T2 on (T1."Rank" =T2."Rank"-1 
		and T1."ChromosomeIndex"=T2."ChromosomeIndex") 
	and T2."Region.Begin" > (T1."Region.End"+1)-1 --as end is exclusive  
 
	order by T1."ChromosomeIndex") 
;

if :explicitRun !=2 
then CALL "hc.hph.di.procedures::create_log_trace" ( :iDetailID,
	 SYSUUID,
	 'Completed',
	 CURRENT_UTCTIMESTAMP,
	 'Internal Annotation',
	 'Integenic region annotation completed.' )
;

end 
if
;
 --Annotate start and stop codons
cdsGroup = select
	 feat."DWAuditID",
	 feat."ReferenceID",
	 feat."FeatureID",
	 feat."ChromosomeIndex",
	 feat."Class",
	 feat."FeatureName",
	 feat."Region.Begin",
	 feat."Region.End",
	 feat."Strand",
	 feat."Score",
	 feat."ParentID",
	 feat."GeneName",
	 feat."Transcript",
	 case when feat."Strand" = '+' 
then ROW_NUMBER() over (partition by feat."ChromosomeIndex",
	 feat."FeatureName",
	 feat."ParentID" -- as Feat name maybe the same 
	Order by feat."Region.Begin") 
else ROW_NUMBER() over (partition by feat."ChromosomeIndex",
	 feat."FeatureName",
	 feat."ParentID"
	Order by feat."Region.Begin" desc) 
end as "Rank",
	 feat."Description" ,
	exon."ExonRank" as "ExonRank" 
from :featWithmRNA as feat 
inner join :exons as exon on feat."ChromosomeIndex"=exon."ChromosomeIndex" 
and feat."ParentID"=exon."mRNA" 
and feat."Region.Begin" between exon."Region.Begin" 
and exon."Region.End" 
where feat."Class"='CDS' 
and feat."FeatureName" is not null 
and TRIM(COALESCE(feat."FeatureName",
	'')) != '' 
and feat."DWAuditID" = :dwAuditID 
order by feat."FeatureName",
	feat."Region.Begin" 
;
maxCdsGrp=select
	 max("Rank") as "MaxRank",
	 "ChromosomeIndex","FeatureName","FeatureID","Strand","Transcript"
		from :cdsGroup   
		group by "ChromosomeIndex","FeatureName","FeatureID","Strand","Transcript";


 insert 
into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	"ChromosomeIndex",
	"Region.Begin",
	"Region.End",
	"FeatureID",
	"Class",
	"FeatureName",
	 "Strand",
	 "Score",
	 "ParentID",
	 "Description",
	"Sequence",
	"Rank",
	"PrePost",
	"ExonRank","GeneName","Transcript") ( select :iProfileAuditID,
	 cdsGroup."DWAuditID",
	 cdsGroup."ReferenceID",
	 cdsGroup."ChromosomeIndex",
	 case when cdsGroup."Strand" = '+' 
	then cdsGroup."Region.Begin" 
	else (cdsGroup."Region.End"-2) -1 
	end as "Region.Begin" ,
	--as end is exclusive 
 case when cdsGroup."Strand" = '+' 
	then (cdsGroup."Region.Begin" +2)+1 --as end is exclusive 
    	else cdsGroup."Region.End" 
	end --as end is already exclusive 
 as "Region.End",
	 'start_codon_' ||cdsGroup."FeatureID" ,
	 'start_codon' ,
	 cdsGroup."FeatureName",
	 cdsGroup."Strand",
	 cdsGroup."Score",
	 cdsGroup."ParentID",
	 'start_codon' ,
	 '' as "Sequence",
	 0 as "Rank",
	 NULL AS "PrePost",
	 cdsGroup."ExonRank",
	 cdsGroup."GeneName",
	 cdsGroup."Transcript"
	from :cdsGroup as cdsGroup 
	where cdsGroup."FeatureName" is not null 
	and TRIM(COALESCE(cdsGroup."FeatureName",
	 '')) != '' 
	and cdsGroup."Rank" = 1) 
;
 insert 
into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Region.Begin",
	 "Region.End",
	 "FeatureID",
	 "Class",
	 "FeatureName",
	 "Strand",
	 "Score",
	 "ParentID",
	 "Description",
	 "Sequence",
	"Rank",
	"PrePost",
	"ExonRank","GeneName","Transcript") (select :iProfileAuditID,
	 cdsGroup."DWAuditID",
	 cdsGroup."ReferenceID",
	 cdsGroup."ChromosomeIndex",
	 case when cdsGroup."Strand" = '+' 
	then (cdsGroup."Region.End"-2)-1 --as end is exclusive 
 
	else cdsGroup."Region.Begin" 
	end as "Region.Begin",
	 case when cdsGroup."Strand" = '+' 
	then cdsGroup."Region.End" --as end is already exclusive 
 
	else (cdsGroup."Region.Begin"+2)+1 
	end as "Region.End",
	--as end is exclusive 
 'stop_codon_' ||cdsGroup."FeatureID" ,
	 'stop_codon' ,
	 cdsGroup."FeatureName",
	 cdsGroup."Strand",
	 --	 cdsGroup."Frame",
 cdsGroup."Score",
	 cdsGroup."ParentID",
	 'stop_codon' ,
	 '' as "Sequence",
	 (cdsGroup."Rank"+1) as "Rank",
	 NULL AS "PrePost",
	 cdsGroup."ExonRank",
	 cdsGroup."GeneName",
	 cdsGroup."Transcript"
	from :cdsGroup as cdsGroup 
	INNER JOIN
	 :maxCdsgrp as cdsGroupInner ON 
	    cdsGroup."ChromosomeIndex" = cdsGroupInner."ChromosomeIndex" 
		and cdsGroup."FeatureName" = cdsGroupInner."FeatureName" 
		and cdsGroup."FeatureID" = cdsGroupInner."FeatureID" 
        and cdsGroup."Transcript"  = cdsGroupInner."Transcript" 
        and cdsGroup."Strand"  = cdsGroupInner."Strand" 
 	    and cdsGroup."Rank" = cdsGroupInner."MaxRank" 
 	     ) 
;

if :explicitRun !=2 
then CALL "hc.hph.di.procedures::create_log_trace" ( :iDetailID,
	 SYSUUID,
	 'Completed',
	 CURRENT_UTCTIMESTAMP,
	 'Internal Annotation',
	 'Start/Stop codon annotation completed.' )
;

end 
if ;


 --Annotate CDS
 --/*cases 
-- for last cds eg cds 5 in a cds1-cds5 range of CDS's
--for cds1 in a cds-range  whose length = 1 and cds1 is not the start codon i.e length =3 
--for in-between cds eg cds 2, cds3 and cds4 in a cds1-cds5 range of CDS's
-- for cds1 in a cds-range  whose length > 1 and cds1 is not the start codon i.e length =3 
--*/

insert 
into "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation"("RunAuditID","DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "FeatureID",
	 "Class",
	 "FeatureName",
	 "Strand",
	 "Score",
	 "ParentID",
	 "Description",
	"Sequence",
	"Rank",
	"PrePost",
	"ExonRank","GeneName","Transcript",
	"Region.Begin",
	 "Region.End"
	)(select :iProfileAuditID, 
     cdsGroup."DWAuditID",
     cdsGroup."ReferenceID",
	 cdsGroup."ChromosomeIndex",
	 cdsGroup."FeatureID",
	 'CDS_region' as "Class", 
	 cdsGroup."FeatureName",
	 cdsGroup."Strand",
	 cdsGroup."Score",
	 cdsGroup."ParentID",
	 cdsGroup."Description",
	 '' as "Sequence",
	 cdsGroup."Rank" as "Rank",
	 NULL AS "PrePost",
	 cdsGroup."ExonRank",
	 cdsGroup."GeneName",
	 cdsGroup."Transcript",       
	 case when cdsGroup."Rank" > 1 and 	 cdsGroup."Rank" < cdsGroupInner."MaxRank"
	         then cdsGroup."Region.Begin"   
	      when cdsGroup."Rank" > 1 and cdsGroup."Rank"= cdsGroupInner."MaxRank" and (cdsGroup."Region.End"-cdsGroup."Region.Begin") > 3
	         then case when cdsGroup."Strand"='+' 
	                    then cdsGroup."Region.Begin"
	                     else cdsGroup."Region.Begin"+3 end   
	      when cdsGroupInner."MaxRank" = 1 and cdsGroup."Rank" = 1 and (cdsGroup."Region.End"-cdsGroup."Region.Begin") > 3
	         then  cdsGroup."Region.Begin" + 3    
	      when cdsGroupInner."MaxRank" > 1 and cdsGroup."Rank" =1 and (cdsGroup."Region.End"-cdsGroup."Region.Begin") > 3
	        then  case when cdsGroup."Strand"='+'  
	                     then cdsGroup."Region.Begin"+3 
                        	else cdsGroup."Region.Begin" end 
          end as "Region.Begin",  
     case when cdsGroup."Rank" > 1 and cdsGroup."Rank" < cdsGroupInner."MaxRank"
	        then cdsGroup."Region.End"
	      when cdsGroupInner."MaxRank" = 1 and cdsGroup."Rank" = 1 and (cdsGroup."Region.End"-cdsGroup."Region.Begin") > 3
	        then cdsGroup."Region.End" - 3 
	      when cdsGroup."Rank" > 1 and cdsGroup."Rank"= cdsGroupInner."MaxRank" and (cdsGroup."Region.End"-cdsGroup."Region.Begin") > 3
	        then case when cdsGroup."Strand"='+'
	                    then cdsGroup."Region.End"-3
	                     else cdsGroup."Region.End" end   
	      when cdsGroupInner."MaxRank" > 1 and cdsGroup."Rank" =1 and (cdsGroup."Region.End"-cdsGroup."Region.Begin") > 3
	        then case when cdsGroup."Strand"='+' 
                        then cdsGroup."Region.End" 
  	                        else cdsGroup."Region.End"-3 end 
          end as "Region.End"
	 from :cdsGroup as cdsGroup INNER JOIN
	 :maxCdsgrp as cdsGroupInner ON 
	    cdsGroup."ChromosomeIndex" = cdsGroupInner."ChromosomeIndex" 
		and cdsGroup."FeatureName" = cdsGroupInner."FeatureName" 
		and cdsGroup."FeatureID" = cdsGroupInner."FeatureID"
        and cdsGroup."Transcript"  = cdsGroupInner."Transcript" 
        and cdsGroup."Strand"  = cdsGroupInner."Strand" 
        where cdsGroup."FeatureName" is not null 
	 and TRIM(COALESCE(cdsGroup."FeatureName",
	 '')) != '' and not(cdsGroup."Rank" = 1 and ("Region.End"-"Region.Begin") <=3 ) 
	 and not (cdsGroup."Rank" = cdsGroupInner."MaxRank" and ("Region.End"-"Region.Begin") <= 3)) ;
	

 --Rank correction for cds rank and stop codon
update "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation" s1 
set s1."Rank"=(select
	 s1."Rank" -(s2.minRank-1) 
	from (select
	 "FeatureName",
	min("Rank") as minRank 
		from "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation" 
		where "ChromosomeIndex"=s1."ChromosomeIndex" 
		and "RunAuditID"=s1."RunAuditID"
		and "Class" ='CDS_region' 
		group by "FeatureName" ) as s2 
	where s1."FeatureName"=s2."FeatureName" ) 
where s1."Class" in ('CDS_region',
	'stop_codon') 
and "RunAuditID"=:iProfileAuditID 
--"DWAuditID"=:dwAuditID and 

;
 --update cds_pos column
update "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation" t1 
set t1."CDSPosition"= ( select
	 sum(ABS("Region.End"-"Region.Begin")) 
	from "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation" t2 
	where t2."Rank" < t1."Rank" 
	and t2."FeatureName"=t1."FeatureName" 
	and t2."ChromosomeIndex"= t1."ChromosomeIndex" 
	and t2."RunAuditID"=t1."RunAuditID" ) 
where --t1."Strand"='+' and  
t1."RunAuditID"=:iProfileAuditID 
;
 --update where ever start codon cds_pos =0
update "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation" 
set "CDSPosition"=0 
where "Rank"=0 
and "RunAuditID"=:iProfileAuditID
;

if :explicitRun !=2 
then 
CALL "hc.hph.di.procedures::create_log_trace" ( :iDetailID,
	 SYSUUID,
	 'Completed',
	 CURRENT_UTCTIMESTAMP,
	 'Internal Annotation',
	 'CDS annotation completed.' )
;
CALL "hc.hph.di.procedures::set_audit_log_completed" ( :iDetailID,
	 'Internal annotation completed.' )
;
end 
if
;
update "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation" 
set "Sequence"=null 
where "RunAuditID"=:iProfileAuditID
;
 
if :explicitRun !=0 
then -- if it is an internal or migrate -- write to the actual tables from the staged
delete 
from "hc.hph.genomics.db.models::Reference.FeaturesAnnotation" 
where "RunAuditID"=:iProfileAuditID
;
insert 
into "hc.hph.genomics.db.models::Reference.FeaturesAnnotation"( "RunAuditID",
	 "DWAuditID",
	 "ReferenceID", 
	 "ChromosomeIndex",
	 "Region.Begin",
	 "Region.End",
	 "FeatureID",
	 "Class",
	 "FeatureName",
	 "Strand",
	 "Score",
	 "ParentID",
	 "Description",
	"Sequence",
	"Rank",
	"PrePost",
	"CDSPosition",
	"ExonRank","Transcript","GeneName" ) select 
	 "RunAuditID",  
	"DWAuditID",
	 "ReferenceID",
	 "ChromosomeIndex",
	 "Region.Begin",
	 "Region.End",
	 "FeatureID",
	 "Class",
	 "FeatureName",
	 "Strand",
	 "Score",
	 "ParentID",
	 "Description",
	"Sequence",
	"Rank",
	"PrePost",
	"CDSPosition",
	"ExonRank","Transcript","GeneName" 
from "hc.hph.plugins.gff3.db.models::Staging.FeaturesAnnotation" 
where "RunAuditID"=:iProfileAuditID
;
 
end 
if
;
 
END 
;
