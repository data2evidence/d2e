PROCEDURE "hc.hph.plugins.gff3.db.procedures::cleanPreviousRuns" (
		IN AuditID BIGINT
	) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	AS
BEGIN
	DECLARE CURSOR AuditLogCursor FOR
		SELECT *
		FROM "hc.hph.di.model::DataIntegration.AuditLog"
		WHERE "AuditLogID" < :AuditID AND ("ParentAuditLogID" = 0 OR "ParentAuditLogID" = NULL) AND "Status" IN ('Running', 'Queued');
	FOR auditLogEntry AS AuditLogCursor DO
		DECLARE isAlive INTEGER := 0;
		SELECT COUNT(*) INTO isAlive FROM "hc::JOB_SCHEDULES"
			WHERE "PARAMETER" LIKE '{%,"AuditLogID":' || :auditLogEntry."AuditLogID" ||'%}' 
			AND "JOB_NAME" = 'hc.hph.di.jobs::DataIntegration';
		IF :isAlive = 0 THEN
			CALL "hc.hph.di.procedures::set_audit_log_failed" ( :auditLogEntry."AuditLogID", 'No background job found' );
		END IF;
		UPDATE "hc.hph.di.model::DataIntegration.AuditLog" SET "Status" = 'Failed'
			WHERE "Status" = 'Running' AND "ParentAuditLogID" = :auditLogEntry."AuditLogID";
		UPDATE "hc.hph.di.model::DataIntegration.AuditLog" SET "Status" = 'Cancelled'
			WHERE "Status" = 'Queued' AND "ParentAuditLogID" = :auditLogEntry."AuditLogID";
	END FOR;
	COMMIT;
END;
