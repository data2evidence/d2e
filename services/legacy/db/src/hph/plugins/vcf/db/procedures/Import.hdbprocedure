PROCEDURE "hc.hph.plugins.vcf.db.procedures::Import" (
    IN import_documents "hc.hph.di.model::DataIntegration.AuditLogRuns",
    OUT import_result "hc.hph.plugins.vcf.db.models::Trace.ImportResultType",
    OUT patient_keys "hc.hph.plugins.vcf.db.models.cdw::PatientKeysType",
    OUT patient_attr "hc.hph.plugins.vcf.db.models.cdw::PatientAttributesType",
    OUT interaction_keys "hc.hph.plugins.vcf.db.models.cdw::InteractionKeysType",
    OUT interaction_attr "hc.hph.plugins.vcf.db.models.cdw::InteractionAttributesType",
    OUT interaction_details "hc.hph.plugins.vcf.db.models.cdw::InteractionDetailsType"
)
LANGUAGE SQLSCRIPT SQL SECURITY INVOKER READS SQL DATA AS
BEGIN
    -- declare cursor for document loop
    DECLARE CURSOR document_cursor
        FOR SELECT
            "AuditLogID",
            "ParentAuditLogID",
            "DocumentURI"
        FROM
            :import_documents
        ORDER BY
            "AuditLogID";
    
    -- declare status reporting arrays
    DECLARE document_count INTEGER := 0;
    DECLARE completed_document_count INTEGER := 0;
    DECLARE parent_audit_id INTEGER;
    DECLARE task_id INTEGER;
    DECLARE task_ids INTEGER ARRAY;
    DECLARE audit_ids BIGINT ARRAY;
    DECLARE parent_audit_ids BIGINT ARRAY;
    DECLARE document_uris NVARCHAR(400) ARRAY;
    DECLARE statuses NVARCHAR(20) ARRAY;
    DECLARE warning_counts INTEGER ARRAY;
    DECLARE error_codes INTEGER ARRAY;
    DECLARE error_messages NVARCHAR(5000) ARRAY;

    DECLARE NO_DATA CONDITION FOR SQL_ERROR_CODE 10000;

    -- declare exit handler to fill error codes
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        IF ::SQL_ERROR_CODE = 10000 THEN
            RESIGNAL;
        ELSE
            IF :completed_document_count > 0 AND :completed_document_count < :document_count THEN
                statuses[ :completed_document_count ] := 'Failed';
                error_codes[ :completed_document_count ] := ::SQL_ERROR_CODE;
                error_messages[ :completed_document_count ] := ::SQL_ERROR_MESSAGE;
            END IF;
            WHILE :completed_document_count < :document_count DO
                completed_document_count := :completed_document_count + 1;
                error_codes[ :completed_document_count ] := ::SQL_ERROR_CODE;
                error_messages[ :completed_document_count ] := ::SQL_ERROR_MESSAGE;
            END WHILE;
            import_result = UNNEST( :task_ids, :audit_ids, :parent_audit_ids, :statuses, :warning_counts, :error_codes, :error_messages ) AS ( "TaskID", "DWAuditID", "ParentDWAuditID", "Status", "WarningCount", "ErrorCode", "ErrorMessage" );
            patient_keys = SELECT TOP 0 * FROM "hc.hph.plugins.vcf.db.models.cdw::PatientKeys";
            patient_attr = SELECT TOP 0 * FROM "hc.hph.plugins.vcf.db.models.cdw::PatientAttributes";
            interaction_keys = SELECT TOP 0 * FROM "hc.hph.plugins.vcf.db.models.cdw::InteractionKeys";
            interaction_attr = SELECT TOP 0 * FROM "hc.hph.plugins.vcf.db.models.cdw::InteractionAttributes";
            interaction_details = SELECT TOP 0 * FROM "hc.hph.plugins.vcf.db.models.cdw::InteractionDetails";
        END IF;
    END;
    
    -- pre-fill status table
    FOR document AS document_cursor DO
        IF :task_id IS NULL THEN
            -- determine task and audit IDs
            SELECT TOP 1 "TASK_EXECUTION_ID" INTO task_id FROM "hc::TASK_EXECUTIONS" WHERE "TASK_NAME" = 'hc.hph.plugins.vcf.db.flowgraphs::Import' AND SUBSTR_BEFORE( SUBSTR_AFTER( "PARAMETERS", 'DWAuditID=' ), ';' ) IN ( TO_NVARCHAR( :document."ParentAuditLogID" ), TO_NVARCHAR( :document."AuditLogID" ) ) ORDER BY "TASK_EXECUTION_ID" DESC;
            IF :task_id IS NOT NULL THEN
                parent_audit_id := :document."ParentAuditLogID";
            ELSE
                task_id := -1;
            END IF;
        END IF;

        document_count := :document_count + 1;
        task_ids[ :document_count ] := :task_id;
        audit_ids[ :document_count ] := :document."AuditLogID";
        parent_audit_ids[ :document_count ] := :document."ParentAuditLogID";
        document_uris[ :document_count ] := "hc.hph.core.db.functions::QuotePath" ( :document."DocumentURI" );
        statuses[ :document_count ] := 'Skipped';
        warning_counts[ :document_count ] := 0;
        error_codes[ :document_count ] := NULL;
        error_messages[ :document_count ] := NULL;
	END FOR;

	-- ensure valid task and audit IDs
	task_id := IFNULL( :task_id, -1 );

	-- ensure that there is at least one output line written
	IF :document_count = 0 THEN
	    SIGNAL NO_DATA SET MESSAGE_TEXT = 'Invalid DWAuditID';
    ELSE
        -- loop over all documents and import them sequentially
        WHILE :completed_document_count < :document_count DO
            DECLARE warning_count INTEGER := 0;
            completed_document_count := :completed_document_count + 1;
            statuses[ :completed_document_count ] := 'Failed';
            -- SELECT "COL1" INTO warning_count FROM "hc.hph.plugins.vcf.db.models.generated::ImportView" ( placeholder."$$doc_id$$"=> :audit_ids[ :completed_document_count ], placeholder."$$file_name$$"=> :document_uris[ :completed_document_count ] );
            warning_counts[ :completed_document_count ] := :warning_count;
            statuses[ :completed_document_count ] := 'Completed';
    	END WHILE;
    	
        import_result = UNNEST( :task_ids, :audit_ids, :parent_audit_ids, :statuses, :warning_counts, :error_codes, :error_messages ) AS ( "TaskID", "DWAuditID", "ParentDWAuditID", "Status", "WarningCount", "ErrorCode", "ErrorMessage" );
        patient_keys = SELECT * FROM "hc.hph.plugins.vcf.db.models.cdw::PatientKeys" WHERE "DWAuditID" = :parent_audit_id;
        patient_attr = SELECT * FROM "hc.hph.plugins.vcf.db.models.cdw::PatientAttributes" WHERE "DWAuditID" = :parent_audit_id;
        interaction_keys = SELECT * FROM "hc.hph.plugins.vcf.db.models.cdw::InteractionKeys" WHERE "DWAuditID" = :parent_audit_id;
        interaction_attr = SELECT * FROM "hc.hph.plugins.vcf.db.models.cdw::InteractionAttributes" WHERE "DWAuditID" = :parent_audit_id;
        interaction_details = SELECT * FROM "hc.hph.plugins.vcf.db.models.cdw::InteractionDetails" WHERE "DWAuditID" = :parent_audit_id;
	END IF;
END
