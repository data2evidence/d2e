PROCEDURE "hc.hph.plugins.vcf.db.procedures.annotation::VCFPositiveStrandAnnotation" (IN geneAnnotationNonCoding "hc.hph.plugins.vcf.db.models::Staging.geneNonCodingType",
	 IN dwAuditID int,
	 IN dwAuditIDFeatureTable int,
	 OUT geneAnnotationCoding "hc.hph.plugins.vcf.db.models::Staging.geneCodingType") Language SQLSCRIPT SQL SECURITY INVOKER AS 
begin geneAnnotationCoding = select
	 geneAnnotationNonCoding."DWAuditID",
	 geneAnnotationNonCoding."VariantIndex",
	 geneAnnotationNonCoding."ChromosomeIndex",
	 geneAnnotationNonCoding."Position",
	 geneAnnotationNonCoding."AlleleIndex",
	 geneAnnotationNonCoding."ALTALLELE",
	 geneAnnotationNonCoding."REFALLELE",
	 geneAnnotationNonCoding."VT",
	 geneAnnotationNonCoding."GENENAME",
	 geneAnnotationNonCoding."Region",
	 geneAnnotationNonCoding."Class",
	 -- Accounting for 0 based index by adding 1
case -- position 3 and 2 nucleotide in previous line
when geneAnnotationNonCoding."Class" not in ('CDS_region',
	 'start_codon',
	 'stop_codon',
	 'five_prime_UTR',
	 'three_prime_UTR') 
then null 
 -- 2nd position in the last sequence get one nucleotide from the post
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=1 
and geneAnnotationNonCoding."Position" = Seq."Region.End" -1  --and Seq."Region.Begin" = geneAnnotationNonCoding."Position"
and Seq."Rank" >1 --do we need this 
then SUBSTRING (TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)-1,
	2)|| SUBSTRING (Seq."PrePost",
	3,
	1) 
-- 2nd position in the first sequence get one nucleotide from pre
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=1 
and geneAnnotationNonCoding."Position" = Seq."Region.Begin" 
and Seq."Rank" >1 
then SUBSTRING (Seq."PrePost",
	2,
	1)|| SUBSTRING (TO_CHAR(Seq."Sequence"),
	1,--geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1,
	2) 
-- 2nd position   --case 2 --ideal
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=1 
THEN SUBSTRING(TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)-1, --one NB back and extract 3
	3) 

-- 3rd position in the second CDS, get 2 nucleotides from the pre
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=2 
and geneAnnotationNonCoding."Position" = Seq."Region.Begin" 
then SUBSTRING(Seq."PrePost",
	1,
	2) || SUBSTRING (TO_CHAR(Seq."Sequence"),
	1,--geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1,
	1) 
-- 3rd position in the second CDS, get 1 nucleotide from the pre --case 4
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=2 
and geneAnnotationNonCoding."Position" = Seq."Region.Begin"+1 
then SUBSTRING(Seq."PrePost",
	2,
	1) || SUBSTRING (TO_CHAR(Seq."Sequence"),
	1,--(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)-1,
	2) 
-- position 3  ideal case
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=2 
THEN SUBSTRING (TO_CHAR(Seq."Sequence"),
	 (geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)-2,--two NB back and extract 3
	 3) 
-- position 1 one nucleotide in sequence end get other two from post
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=0 
and geneAnnotationNonCoding."Position" = Seq."Region.End"-1 
THEN SUBSTRING (TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1),
	1)|| SUBSTRING(Seq."PrePost",
	3,
	2) 
-- position 1 2 nucleotide in sequence end-1 get other 1 from post
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=0 
and geneAnnotationNonCoding."Position"+1 = Seq."Region.End"-1 
THEN SUBSTRING (TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1),
	2)|| SUBSTRING(Seq."PrePost",
	3,
	1) 
-- position 1 ideal
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=0 
THEN SUBSTRING (TO_CHAR(Seq."Sequence"),
	geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1,
	3) 
END as REFCODON,
	 case when geneAnnotationNonCoding."Class" not in ('CDS_region',
	 'start_codon',
	 'stop_codon',
	 'five_prime_UTR',
	 'three_prime_UTR') 
then null 
-- 2nd position in the last index of cds get one nucleotide from the post --geneAnnotationNonCoding."ALTALLELE"
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=1 
and geneAnnotationNonCoding."Position" = Seq."Region.End" -1  --and Seq."Region.Begin" = geneAnnotationNonCoding."Position"
and Seq."Rank" >1 --do we need this 
then SUBSTRING (TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)-1,
	1)|| geneAnnotationNonCoding."ALTALLELE"|| SUBSTRING (Seq."PrePost",3,1)
-- 2nd position in the first index get one nucleotide from pre
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=1 
and geneAnnotationNonCoding."Position" = Seq."Region.Begin" 
and Seq."Rank" >1 
then SUBSTRING (Seq."PrePost",
	2,
	1)|| geneAnnotationNonCoding."ALTALLELE"|| SUBSTRING (TO_CHAR(Seq."Sequence"),
	2,--(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)+1,
	1) 
-- 2nd position   --case 2 --ideal
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=1 
THEN SUBSTRING(TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)-1, --one NB back and extract 1
	1)||geneAnnotationNonCoding."ALTALLELE"|| 
    SUBSTRING(TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)+1, --one NB front and extract 1
	1) 
-- 3rd position in the second CDS, get 2 nucleotides from the pre
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=2 
and geneAnnotationNonCoding."Position" = Seq."Region.Begin" 
then SUBSTRING(Seq."PrePost",
	1,
	2) || geneAnnotationNonCoding."ALTALLELE"
-- 3rd position in the second CDS, get 1 nucleotide from the pre --case 4
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=2 
and geneAnnotationNonCoding."Position" = Seq."Region.Begin"+1 
then SUBSTRING(Seq."PrePost",
	2,
	1) ||  SUBSTRING (TO_CHAR(Seq."Sequence"),
	1,--(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)-1
	1)||geneAnnotationNonCoding."ALTALLELE" 
-- position 3  ideal case
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=2 
THEN SUBSTRING (TO_CHAR(Seq."Sequence"),
	 (geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)-2,--two NB back and extract 3
	 2)||geneAnnotationNonCoding."ALTALLELE" 
	 
	 
-- position 1 one nucleotide in sequence end get other two from post
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=0 
and geneAnnotationNonCoding."Position" = Seq."Region.End"-1 
THEN geneAnnotationNonCoding."ALTALLELE"||  SUBSTRING(Seq."PrePost",
	3,
	2) 
-- position 1 ...2 nucleotide in sequence end-1 get other 1 from post
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=0 
and geneAnnotationNonCoding."Position"+1 = Seq."Region.End"-1 
THEN geneAnnotationNonCoding."ALTALLELE"|| SUBSTRING (TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)+1,
	1)|| SUBSTRING(Seq."PrePost",
	3,
	1) 
-- position 1 ideal
when mod(abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition",
	3)=0 
THEN geneAnnotationNonCoding."ALTALLELE"||SUBSTRING (TO_CHAR(Seq."Sequence"),
	(geneAnnotationNonCoding."Position"-Seq."Region.Begin"+1)+1,--go to next NB and extract 2 
	2) 
END as "ALTCODON",
	 geneAnnotationNonCoding."Strand",
	 (abs(geneAnnotationNonCoding."Position"-Seq."Region.Begin")+Seq."CDSPosition") as "CDSPosition" ,
	 geneAnnotationNonCoding."Transcript" as "Transcript",
	 geneAnnotationNonCoding."FeatureName" as "Protein",
	 geneAnnotationNonCoding."ExonRank" as "ExonRank",
	 geneAnnotationNonCoding."RunAuditID"
from :geneAnnotationNonCoding as geneAnnotationNonCoding 
left outer join "hc.hph.genomics.db.models::Reference.FeaturesAnnotation" as Seq on (Seq."ChromosomeIndex"=geneAnnotationNonCoding."ChromosomeIndex" 
	and geneAnnotationNonCoding."Position" between Seq."Region.Begin" 
	and Seq."Region.End"-1 
	and Seq."FeatureName"= geneAnnotationNonCoding."FeatureName"
	and Seq."Transcript"= geneAnnotationNonCoding."Transcript"
	and (geneAnnotationNonCoding."DWAuditID" = :dwAuditID 
		or :dwAuditID is null) 
	and Seq."RunAuditID" = :dwAuditIDFeatureTable) --and Seq."Strand"='+'--and LENGTH(Seq."PrePost") >=2
       
where geneAnnotationNonCoding."AlleleIndex" >0 
and (geneAnnotationNonCoding."DWAuditID" = :dwAuditID 
	or :dwAuditID is null) 
and geneAnnotationNonCoding."Class" in ('CDS_region',
	'start_codon',
	 'stop_codon',
	'five_prime_UTR',
	'three_prime_UTR') 
order by geneAnnotationNonCoding."Position"
;
 
END
;
