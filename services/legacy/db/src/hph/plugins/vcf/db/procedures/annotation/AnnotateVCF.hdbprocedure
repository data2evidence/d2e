PROCEDURE "hc.hph.plugins.vcf.db.procedures.annotation::AnnotateVCF" (
		IN iParentAuditID BIGINT,
		IN dwAuditID BIGINT,
		IN dwAuditIDFeatureTable BIGINT,--runAuditID for FA table 
	 	IN explictRun int --0- normal 1- explict with logs 2- explict no logs 
	 ) 
	 Language SQLSCRIPT 
	 SQL SECURITY DEFINER 
	 AS 
begin 
--LOGGING
DECLARE sDocumentID NVARCHAR(1024);
DECLARE oLogDetailID BIGINT;
declare referenceID String ;
declare featureDWAuditID bigint;--for the dwauditid for features table


delete from "hc.hph.plugins.vcf.db.models::Staging.VariantAnnotations" where "RunAuditID"=:iParentAuditID and "DWAuditID"=:dwAuditID;
delete from "hc.hph.plugins.vcf.db.models::Staging.VariantAnnotations" where "RunAuditID"=-1 and "DWAuditID"=:dwAuditID; 

if :explictRun!=2 then

--LOGGING
SELECT "DocumentID" INTO sDocumentID FROM "hc.hph.di.model::DataIntegration.AuditLog" WHERE "AuditLogID" = :dwAuditID;
CALL "hc.hph.di.procedures::create_log_detail"(
	:iParentAuditID, SYSUUID, '',
	'Running', :sDocumentID, '', '', '', 'VCF', 'Variant annotation',
	oLogDetailID
);
end if;

select distinct "ReferenceID", "DWAuditID" 
into referenceID ,featureDWAuditID
from "hc.hph.genomics.db.models::Reference.FeaturesAnnotation" where "RunAuditID"= :dwAuditIDFeatureTable ;


 geneAnnotationNonCoding = select 
	 va."DWAuditID",
	 va."VariantIndex",
	 variants."ChromosomeIndex",
	 variants."Position",
	 va."AlleleIndex",
	 va."Allele" as ALTALLELE,
	 ref."Allele" as REFALLELE,
 	 featAnnotate."FeatureName" as "FeatureName",
	 featAnnotate."Class",
	 case when va."Allele" = '-' and ref."Allele" <> '-' then 'DEL'    
    when length(ref."Allele") = length(va."Allele") 
THEN 
case when length(ref."Allele") = 1 
THEN 'SNP' 
ELSE 'MNP' 
END 
ELSE case WHEN length(ref."Allele") > length(va."Allele") 
THEN CASE WHEN (locate(ref."Allele", va."Allele") = 1 or 
locate(ref."Allele", va."Allele",-1) + length(va."Allele") - 1 = length(ref."Allele")) 
THEN 'DEL' 
ELSE 'MIXED' 
END 
ELSE CASE WHEN length(va."Allele") >length(ref."Allele") 
THEN CASE WHEN ( locate(va."Allele",ref."Allele") = 1 or
locate(va."Allele",ref."Allele",-1) + length(ref."Allele") - 1 = length(va."Allele"))
THEN 'INS' 
ELSE 'MIXED' 
END 
END 
END 
END as vt,
     featAnnotate."GeneName" as "GENENAME",  
	 featAnnotate."Class" as "Region",
	 featAnnotate."Strand",
	 featAnnotate."Transcript" as "Transcript",
     featAnnotate."ExonRank" as "ExonRank",
	 :iParentAuditID as "RunAuditID"
from "hc.hph.genomics.db.models::SNV.VariantAlleles" as va 
inner join "hc.hph.genomics.db.models::SNV.Variants" as variants on (va."VariantIndex" = variants."VariantIndex" 
	and va."AlleleIndex" >0 
	and (variants."DWAuditID" = :dwAuditID 
		or :dwAuditID is null) 
	and variants."DWAuditID" = va."DWAuditID") 
inner join (select
	 "Allele",
	 "DWAuditID",
	 "VariantIndex" 
	from "hc.hph.genomics.db.models::SNV.VariantAlleles" 
	where "AlleleIndex" =0 
	and ("DWAuditID"=:dwAuditID 
		or :dwAuditID is null))as ref on (ref."VariantIndex" = va."VariantIndex" 
	and ref."DWAuditID" = va."DWAuditID" 
	and (ref."DWAuditID"=:dwAuditID 
		or :dwAuditID is null) 
	and va."AlleleIndex" >0) 
left outer join "hc.hph.genomics.db.models::Reference.FeaturesAnnotation" as featAnnotate on (featAnnotate."ChromosomeIndex" = variants."ChromosomeIndex" 
	and variants."Position" between featAnnotate."Region.Begin" 
	and featAnnotate."Region.End"-1 
	and featAnnotate."RunAuditID"=:dwAuditIDFeatureTable --and featAnnotate."DWAuditID" = :featureDWAuditID--:dwAuditIDFeatureTable 
	and (va."DWAuditID" = :dwAuditID 
		or :dwAuditID is null)) 
where va."AlleleIndex" >0 
and (va."DWAuditID" = :dwAuditID 
	or :dwAuditID is null) 
and va."DWAuditID" = variants."DWAuditID" -- and featAnnotate."Class" in ('five_prime_UTR','intergenic_region','intron','three_prime_UTR','trans_splice_acceptor_site','trans_splice_donor_site')
;


geneAnnotationNonCodingNeg=select * from :geneAnnotationNonCoding where "Strand"='-' order by "VariantIndex";
geneAnnotationNonCodingPos=select * from :geneAnnotationNonCoding where "Strand"='+' order by "VariantIndex";

if :explictRun!=2 then
CALL "hc.hph.di.procedures::create_log_trace" (
	:oLogDetailID, SYSUUID,
	'Completed', CURRENT_UTCTIMESTAMP,
	'', 'Sequence alteration annotation completed.'
);
end if;

call "hc.hph.plugins.vcf.db.procedures.annotation::VCFNegativeStrandAnnotation"(:geneAnnotationNonCodingNeg,:dwAuditID,:dwAuditIDFeatureTable,geneAnnotationCodingNeg);
call "hc.hph.plugins.vcf.db.procedures.annotation::VCFPositiveStrandAnnotation"(:geneAnnotationNonCodingPos,:dwAuditID,:dwAuditIDFeatureTable,geneAnnotationCodingPos);
geneAnnotationCoding = 
select * from :geneAnnotationCodingPos 
union all
select * from :geneAnnotationCodingNeg;


aminoAcid = select
	 vtfinal."DWAuditID",
	 vtfinal."VariantIndex",
	 vtfinal."AlleleIndex",
	 vtfinal."ChromosomeIndex",
	 vtfinal."Position",
	 vtfinal."GENENAME",
	 vtfinal."Region",
	 vtfinal.vt,
 	 UPPER(vtfinal.REFCODON) as REFCODON ,
	 UPPER(vtfinal."ALTALLELE") as "ALTALLELE",
	 UPPER(vtfinal."REFALLELE") as "REFALLELE",
	 vtfinal."CDSPosition",
	 vtfinal."Transcript" ,
	 vtfinal."Protein",
	 vtfinal."ExonRank",
	 (select
	 "AminoAcid" 
	from "hc.hph.genomics.db.models::Reference.Codons" as codons 
	where codons."ChromosomeIndex" = vtfinal."ChromosomeIndex" 
	and codons."ReferenceID" = :referenceID 
	and codons."Codon"= (case when vtfinal."Strand" = '-' 
		then "hc.hph.genomics.db.procedures.annotation::GetReverseComplement" (UPPER(vtfinal.ALTCODON)) 
		else UPPER(vtfinal.ALTCODON) 
		end)) as "ALTAMINO",
	 (select
	 "AminoAcid" 
	from "hc.hph.genomics.db.models::Reference.Codons" as codons 
	where codons."ChromosomeIndex" = vtfinal."ChromosomeIndex" 
	and codons."ReferenceID" = :referenceID 
	and codons."Codon"= (case when vtfinal."Strand" = '-' 
		then "hc.hph.genomics.db.procedures.annotation::GetReverseComplement" (UPPER(vtfinal.REFCODON)) 
		else UPPER(vtfinal.REFCODON )
		end)) as "REFAMINO" 
from :geneAnnotationCoding as vtfinal 
;
 insert 
into "hc.hph.plugins.vcf.db.models::Staging.VariantAnnotations" ("DWAuditID",
	 "RunAuditID",
	 "VariantIndex",
	 "AlleleIndex",
	 "ChromosomeIndex",
	 "Position",
	 "GeneName",
	 "Region",
	 "SequenceAlteration",
	 "AminoAcid.Reference",
	 "AminoAcid.Alternative",
	 "MutationType") (select 
	 distinct geneAnnotationNonCoding."DWAuditID",
	 :iParentAuditID as "RunAuditID",
	 geneAnnotationNonCoding."VariantIndex",
	 geneAnnotationNonCoding."AlleleIndex",
	 geneAnnotationNonCoding."ChromosomeIndex",
	 geneAnnotationNonCoding."Position",
	 geneAnnotationNonCoding."GENENAME",
	 geneAnnotationNonCoding."Region",
	 geneAnnotationNonCoding.vt,
	 null,
	 null,
	 "hc.hph.genomics.db.procedures.annotation::GetMutationType" (geneAnnotationNonCoding."Region",
	 null,
	 null,
	 null,
	 null,
	 geneAnnotationNonCoding.vt)
    from :geneAnnotationNonCoding as geneAnnotationNonCoding -- where geneAnnotationNonCoding."Region" in ('five_prime_UTR','intergenic_region','intron','three_prime_UTR','trans_splice_acceptor_site','trans_splice_donor_site',null,''));
 
	where geneAnnotationNonCoding."Region" not in ('CDS_region',
	 'start_codon',
	 'stop_codon',
	 'five_prime_UTR',
	 'three_prime_UTR') 
	or geneAnnotationNonCoding."Region" is null) 
;

insert 
into "hc.hph.plugins.vcf.db.models::Staging.VariantAnnotations" ("DWAuditID",
     "RunAuditID",
	 "VariantIndex",
	 "AlleleIndex",
	 "ChromosomeIndex",
	 "Position",
	 "GeneName",
	 "Region",
	 "SequenceAlteration",
	 "AminoAcid.Reference",
	 "AminoAcid.Alternative",
	 "MutationType","CDSPosition","Transcript","Protein","ExonRank") (select
	 distinct aminoAcid."DWAuditID",
	 :iParentAuditID as "RunAuditID",
	 aminoAcid."VariantIndex",
	 aminoAcid."AlleleIndex",
	 aminoAcid."ChromosomeIndex",
	 aminoAcid."Position",
	 aminoAcid."GENENAME",
	 aminoAcid."Region",
	 aminoAcid.vt,
	 --(case when aminoAcid.vt = 'INS' 
	--	or aminoAcid.vt = 'DEL' 
	--	then null else 
	aminoAcid.REFAMINO ,
	--	end),
	 (case when aminoAcid.vt = 'INS' 
		or aminoAcid.vt = 'DEL' 
		then null 
		else aminoAcid.ALTAMINO 
		end),
	 "hc.hph.genomics.db.procedures.annotation::GetMutationType" (aminoAcid."Region",
	 aminoAcid."REFALLELE",
	 aminoAcid."ALTALLELE",
	 aminoAcid."REFAMINO",
	 aminoAcid."ALTAMINO",
	 aminoAcid.vt),
	 aminoAcid."CDSPosition",
	 aminoAcid."Transcript",
	 aminoAcid."Protein",
	 aminoAcid."ExonRank"
	from :aminoAcid as aminoAcid ) 
;

if :explictRun!=2 then
--UPDATE "hc.hph.plugins.vcf.db.models::Staging.VariantAnnotations" SET "RunAuditID" = :iParentAuditID WHERE "RunAuditID" = -1;
--LOGGING
CALL "hc.hph.di.procedures::create_log_trace" (
	:oLogDetailID, SYSUUID,
	'Completed', CURRENT_UTCTIMESTAMP,
	'', 'Gene annotation completed.'
);

CALL "hc.hph.di.procedures::set_audit_log_completed" (
	:oLogDetailID, 'Variant annotation completed.'
);
end if;

if :explictRun!=0 then


--delete from "hc.hph.genomics.db.models::SNV.VariantAnnotations" where "DWAuditID"=:dwAuditID ;
delete from "hc.hph.genomics.db.models::SNV.VariantAnnotations" where "RunAuditID"=:iParentAuditID and "DWAuditID"=:dwAuditID;


insert into "hc.hph.genomics.db.models::SNV.VariantAnnotations"("DWAuditID",
	 "VariantIndex",
	 "AlleleIndex",
	 "ChromosomeIndex",
	 "Position",
	 "GeneName",
	 "Region",
	 "SequenceAlteration",
	 "AminoAcid.Reference",
	 "AminoAcid.Alternative",
	 "MutationType","CDSPosition","Transcript","Protein","ExonRank","RunAuditID") select 
     "DWAuditID",
	 "VariantIndex",
	 "AlleleIndex",
	 "ChromosomeIndex",
	 "Position",
	 "GeneName",
	 "Region",
	 "SequenceAlteration",
	 "AminoAcid.Reference",
	 "AminoAcid.Alternative",
	 "MutationType","CDSPosition","Transcript","Protein","ExonRank","RunAuditID"
from "hc.hph.plugins.vcf.db.models::Staging.VariantAnnotations" where "RunAuditID"=:iParentAuditID and "DWAuditID"=:dwAuditID;


end if;


end;
