PROCEDURE "hc.hph.plugins.documents.db.procedures::Rollback" 
(
 in audit_id bigint
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	AS
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 
 declare batchID nvarchar(500);
 declare curTime timestamp;
 declare profileID bigint;
 declare tab_dwid table (dwid VARBINARY(32));
 
 --Below this line, implementation is based on the old DI data model
 
 /*
 select "ProfileID" into profileID from "hc.hph.di.model::Configuration.AuditLog" where "AuditLogID" = :audit_id;
 select "Value.Text" into batchID from "hc.hph.di.model::Configuration.ParameterValues" 
 where "ProfileID" = profileID and "ParameterID" = 'BatchID';
 -- only for Document Processing plugin.
 
 if batchID = '' then
  -- logic for rollback in case no batchId is specified.
  	
  	--get timestamp
  	
  	select max("DWDateFrom") into curTime from "hc.hph.cdw.db.models::DWDocuments.Document_Attr" 
  	where "DWDateTo" is null and 
  	"DWID" in(select "DWID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id) and "DWAuditID" in(select "DWAuditID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id);
  	
  	--clean Document_Attr table.
  	
  	delete from "hc.hph.cdw.db.models::DWDocuments.Document_Attr" 
  	where "DWDateTo" is null and
  	"DWDateFrom" = curtime and
  	"DWID" in(select "DWID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id) and "DWAuditID" in(select "DWAuditID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id);
  	 
  	--update previous entry of Document_Attr table, in case it was updated
  	
  	update "hc.hph.cdw.db.models::DWDocuments.Document_Attr" 
  	set "DWDateTo" = null where 
  	"DWDateTo" = curtime and
  	"DWID" in(select "DWID" from "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id);
  	
  	--check if the document was present previously.
  	
  	tab_dwid = select "DWID" from "hc.hph.cdw.db.models::DWDocuments.Document_Attr" where
  	"DWID" in (select "DWID" from "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id);
  	
  	--clean Document_Key table.
  	
  	delete from "hc.hph.cdw.db.models::DWDocuments.Document_Key" 
  	where "DWAuditID"
  	in(select "DWAuditID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id) and "DWID" not in(select dwid from :tab_dwid);
  	
 else
  -- logic for rollback in case the batchId is specified.
  	
  	--get timestamp
  	
  	select max("DWDateFrom") into curTime from "hc.hph.cdw.db.models::DWDocuments.Document_Attr" 
  	where "DWDateTo" is null and 
  	"DWID" in(select "DWID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id and "BatchID" = batchID)and 
  	"DWAuditID" in(select "DWAuditID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id and "BatchID" = batchID);
  	
  	--clean Document_Attr table.
  	
  	delete from "hc.hph.cdw.db.models::DWDocuments.Document_Attr" 
  	where "DWDateTo" is null and
  	"DWDateFrom" = :curtime and
  	"DWID" in(select "DWID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id and "BatchID" = batchID) and 
  	"DWAuditID" in(select "DWAuditID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id and "BatchID" = batchID);
  	 
  	--update previous entry of Document_Attr table, in case it was updated
  	
  	update "hc.hph.cdw.db.models::DWDocuments.Document_Attr" 
  	set "DWDateTo" = null where 
  	"DWDateTo" = :curtime and
  	"DWID" in(select "DWID" from "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id and "BatchID" = batchID);
  	
  	--check if the document was present previously.
  	
  	tab_dwid = select "DWID" from "hc.hph.cdw.db.models::DWDocuments.Document_Attr" where
  	"DWID" in (select "DWID" from "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id and "BatchID" = batchID);
  	
  	--clean Document_Key table.
  	
  	delete from "hc.hph.cdw.db.models::DWDocuments.Document_Key" 
  	where "DWAuditID"
  	in(select "DWAuditID" from  "hc.hph.plugins.documents.db.models::Interface.ProcessingStageView" 
  	where "ParentAuditLogID" = :audit_id and "BatchID" = batchID) and "DWID" not in(select dwid from :tab_dwid);
  	
 end if;
 */
END;
