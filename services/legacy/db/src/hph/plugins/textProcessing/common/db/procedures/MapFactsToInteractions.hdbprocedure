PROCEDURE "hc.hph.plugins.textProcessing.common.db.procedures::MapFactsToInteractions" (
in iv_pluginId NVARCHAR(256),
in iv_auditId BIGINT,
in iv_scheduleId BIGINT,
in it_documents "hc.hph.di.documents.staging.db.models::DocumentStage.ProcessingStage",
in it_facts "hc.hph.plugins.textProcessing.common.db.models::CDWMapping.Fact",
in it_fact_attributes "hc.hph.plugins.textProcessing.common.db.models::CDWMapping.FactAttributes" ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	AS
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
   DECLARE pi_id NVARCHAR(10) DEFAULT NULL;
  
    -- Get all the valid DWIDs that are relevant for post processing
   valid_docs = select docs."DWID", docs."DWSource", docs."DocumentID", docs."DWDateFrom", docs."ProcessingMode",
   interactions."InteractionID" "ReferenceInteractionID", interactions."PatientID", interactions."PeriodStart", 
   interactions."PeriodEnd", interactions."OrgID" 
   from :it_documents docs
   inner join "hc.hph.cdw.db.models::DWViews.Interactions" interactions
   on docs."DWParentEntitySource" = interactions."Source" and docs."ParentEntityID" = interactions."SourceInteractionID"
   where docs."ParentEntityType" = 'hc.hph.cdw.Interaction';
   
   valid_docs_for_processing = select *, :iv_pluginId "PluginID" from :valid_docs where "ProcessingMode" is null;
   
   -- Get all the derived interactions for the given plugin
   derived_interactions = select ta_interactions."DWLinkID", ta_interactions."DWID_Document",ta_interactions."DWID_Interaction", 
   ta_interactionAttr."LinkType" from "hc.hph.cdw.db.models::DWDocuments.Interaction_Documents_Link" ta_interactions
   inner join "hc.hph.cdw.db.models::DWDocuments.Interaction_Documents_Link_Attr" ta_interactionAttr
   on ta_interactions."DWLinkID" = ta_interactionAttr."DWLinkID"
   inner join :valid_docs doc_info
   on ta_interactions."DWID_Document" = doc_info."DWID"
   where ta_interactionAttr."LinkType" = :iv_pluginId;
	 
  -- Invalidate the derived interactions
   UPDATE "hc.hph.cdw.db.models::DWEntities.Interactions_Attr" int_attr
	 set "DWDateTo" = CURRENT_TIMESTAMP, "DWAuditID" = :iv_auditId
	 FROM "hc.hph.cdw.db.models::DWEntities.Interactions_Attr" int_attr
	 inner join :derived_interactions der_int
	 on int_attr."DWID" = der_int."DWID_Interaction";
	 	   
   update "hc.hph.cdw.db.models::DWEntitiesEAV.Interaction_Details" int_det
	 set "DWDateTo" = CURRENT_TIMESTAMP,"DWAuditID" = :iv_auditId
	 FROM "hc.hph.cdw.db.models::DWEntitiesEAV.Interaction_Details" int_det
	 inner join :derived_interactions der_int
	 on int_det."DWID" = der_int."DWID_Interaction";
	 
	UPDATE "hc.hph.cdw.db.models::DWDocuments.Interaction_Documents_Link_Attr" int_linkattr
	 set "DWDateTo" = CURRENT_TIMESTAMP, "DWAuditID" = :iv_auditId
	 FROM "hc.hph.cdw.db.models::DWDocuments.Interaction_Documents_Link_Attr" int_linkattr
	 inner join :derived_interactions der_int
	 on int_linkattr."DWLinkID" = der_int."DWLinkID";
	  
    lt_facts = select *, "hc.hph.cdw.db.etl::HashDWID"("DWSource","NewInternalInteractionID") "NewInteractionID" 
    from (
    select facts.*, docs."DWSource", docs."ReferenceInteractionID", docs."PatientID", docs."OrgID", 
    docs."PeriodStart", docs."PeriodEnd", docs."PluginID", docs."DocumentID", 
    TO_NCHAR("hc.hph.cdw.db.etl::HashDWID"("DWSource",facts."ID"||TO_NCHAR(docs."DWID")) ) "NewInternalInteractionID"
    from :it_facts facts
    inner join :valid_docs_for_processing docs
    on facts."DWID_Document" = docs."DWID");
    
     
    lt_factAttributes = select facts.*, facts."NewInteractionID" "DWID", factAttributes."Attribute.OriginalValue", null "Attribute.Code", 
    null "Attribute.CodeSystem", null "Attribute.CodeSystemVersion",
    -- Update <document date>
    case 
    	when factAttributes."Value.OriginalValue" = '<document date>' then TO_NVARCHAR(facts."PeriodStart", 'YYYY-MM-DD') 
    	else factAttributes."Value.OriginalValue" 
    end "Value.OriginalValue",
	factAttributes."Value.Code",factAttributes."Value.CodeSystem", null "Value.CodeSystemVersion" 
	from :it_fact_attributes factAttributes
	inner join :lt_facts facts
    on factAttributes."DWID_Document" = facts."DWID_Document"
    and factAttributes."InteractionType.OriginalValue" = facts."InteractionType.OriginalValue"
    and factAttributes."ID" = facts."ID"; 
    
    --Store Derived interaction in temp table to provide it as input to CDW API
    insert into "hc.hph.plugins.textProcessing.common.db.models::CDWMapping.CDW_Interaction_Stage"
    ("_PackageID" ,"_PluginID","_SourceID_DWID" ,"_BusinessKey_DWID" ,
    "DWID_Patient" ,
    "_SourceID_DWID_Document" ,"_BusinessKey_DWID_Document" ,
    "DWID_ParentInteraction",
    "InteractionType.OriginalValue",
    "PeriodStart" ,"PeriodEnd", "OrgID")
    (select :iv_scheduleId as "_PackageID",:iv_pluginId as "_PluginID", "DWSource" as "_SourceID_DWID","NewInternalInteractionID" as "_BusinessKey_DWID",
    "PatientID" as "DWID_Patient",
    "DWSource" "_SourceID_DWID_Document", "DocumentID" "_BusinessKey_DWID_Document",
    "ReferenceInteractionID" as "DWID_ParentInteraction" ,
    "InteractionType.OriginalValue",
    "PeriodStart", "PeriodEnd", "OrgID" from :lt_facts);
    
    --Store Derived interaction attributes in temp table to provide it as input to CDW API
    insert into "hc.hph.plugins.textProcessing.common.db.models::CDWMapping.CDW_Interaction_Custom_Stage"
    ("_PackageID" ,"_ProcessingMode" ,"_SourceID_DWID", "_BusinessKey_DWID","Attribute.OriginalValue", "Attribute.Code", "Attribute.CodeSystem", "Attribute.CodeSystemVersion",
	 "Value.OriginalValue", "Value.Code","Value.CodeSystem", "Value.CodeSystemVersion")
	(select :iv_scheduleId as  "_PackageID" ,null as "_ProcessingMode" ,"DWSource" as "_SourceID_DWID","NewInternalInteractionID" as "_BusinessKey_DWID",
	"Attribute.OriginalValue", "Attribute.Code", "Attribute.CodeSystem", "Attribute.CodeSystemVersion",
	 "Value.OriginalValue", "Value.Code","Value.CodeSystem", "Value.CodeSystemVersion" from :lt_factAttributes where "Value.OriginalValue" is not null);
	 
    
END;