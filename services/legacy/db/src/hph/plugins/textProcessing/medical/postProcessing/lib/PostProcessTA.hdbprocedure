procedure "hc.hph.plugins.textProcessing.medical.postProcessing.lib::PostProcessTA"(
    in iv_config_id   nvarchar(1024),
    in iv_ta_batch_id nvarchar(1024),
    in it_ta_batch    "hc.hph.plugins.textProcessing.medical.postProcessing::Types.TA_BATCH_INPUT"
  )
  language sqlscript
  sql security definer as

begin

  -- Workaround for a bug where Binary values don't work correctly.
  conv_table = select distinct "DWID" as "BIN_DWID", TO_VARCHAR(DWID) as "STR_DWID" from :it_ta_batch;

  -- Store the TA results in a persistent (temporary) TA table
  delete from "hc.hph.plugins.textProcessing.medical.postProcessing::Entities.TA";
  select
  	"STR_DWID" as "DWID",
	"TA_RULE",
	"TA_COUNTER",
	"TA_TOKEN",
	"TA_LANGUAGE",
	"TA_TYPE",
	case when 
		"TA_NORMALIZED" is null
		 and "TA_TYPE" = 'COMPOSITION_SECTION_PROBLEM'
		 then 'PROBLEM'
		 else "TA_NORMALIZED"
		 end as "TA_NORMALIZED",
	"TA_STEM",
	"TA_PARAGRAPH",
	"TA_SENTENCE",
	"TA_CREATED_AT",
	"TA_OFFSET",
	"TA_PARENT"
	from :it_ta_batch b
	inner join :conv_table c
	on b."DWID" = c."BIN_DWID"
	into "hc.hph.plugins.textProcessing.medical.postProcessing::Entities.TA";

  
  -- Store the results of running step 1 through 5, in TA_TEMP
  delete from "hc.hph.plugins.textProcessing.medical.postProcessing::Entities.TA_TEMP"
  where
	    "CONFIG_ID" = :iv_config_id
	and "BATCH_ID"  = :iv_ta_batch_id
  ;
  insert into "hc.hph.plugins.textProcessing.medical.postProcessing::Entities.TA_TEMP"
	SELECT :iv_config_id "CONFIG_ID", iv_ta_batch_id "BATCH_ID",
		"DWID",
		"TA_RULE",
		"TA_COUNTER",
		"TA_TOKEN",
		"TA_LANGUAGE",
		"TA_TYPE",
		"TA_NORMALIZED",
		"TA_STEM",
		"TA_PARAGRAPH",
		"TA_SENTENCE",
		"TA_CREATED_AT",
		"TA_OFFSET",
		"TA_PARENT",
		"TA_SECTION",
		"TA_STATUS",
		"TA_POLARITY",
		"TA_SUBJECT",
		"TA_TIME_START",
		"TA_TIME_END",
		"TA_TIME_LINK",
		"TA_AMBIGUITY"
		-- schema for calculation views is _SYS_BIC
		FROM "hc.hph.plugins.textProcessing.medical.postProcessing.lib.views::med_lab"
		where "TA_TYPE" not in (
		    select "EXTRACTION_ID" as "TA_TYPE"
		    from "hc.hph.plugins.textProcessing.medical.postProcessing::Entities.TA_CONFIG"
		    where "CONFIG_ID"       = :iv_config_id
		      and "EXTRACTION_TYPE" = 'TA_TYPE'
		      and "SELECTED"       <> 'X'
		  )
  ;

  -- Set codes for med_Medication entities
  	call "hc.hph.plugins.textProcessing.medical.postProcessing.lib::SetMedicationCode"(
  		:iv_config_id,
  		:iv_ta_batch_id
  	)
 ;
 
 -- Get criteria on which to filter input to TA_FILTERED
 
  lt_config_type_ids =
    select "EXTRACTION_TYPE",
           "EXTRACTION_ID"
    from "hc.hph.plugins.textProcessing.medical.postProcessing::Entities.TA_CONFIG"
    where "CONFIG_ID" = :iv_config_id
      and "SELECTED"  = 'X'
  ;

  selected_sections = 
    select c."EXTRACTION_ID"
    from :lt_config_type_ids c
    where c."EXTRACTION_TYPE" = 'TA_SECTION'
  ;

  selected_types =
    select c."EXTRACTION_ID"
    from :lt_config_type_ids c
    where c."EXTRACTION_TYPE" = 'TA_TYPE'
    
    union
    
    select * from :selected_sections
  ;

  selected_statuses =
    select c."EXTRACTION_ID"
    from :lt_config_type_ids c
    where c."EXTRACTION_TYPE" = 'TA_STATUS'
  ;

  selected_polarities =
    select c."EXTRACTION_ID"
    from :lt_config_type_ids c
    where c."EXTRACTION_TYPE" = 'TA_POLARITY'
  ;

  selected_subjects =
    select c."EXTRACTION_ID"
    from :lt_config_type_ids c
    where c."EXTRACTION_TYPE" = 'TA_SUBJECT'
  ;

  -- Clear TA_FILTERED 
 	delete from "hc.hph.plugins.textProcessing.medical.postProcessing::Entities.TA_FILTERED" 
 	where "CONFIG_ID" = :iv_config_id 
 	  and "DWID" in (select distinct "DWID" from :it_ta_batch) 
 	; 
  
  
  insert into "hc.hph.plugins.textProcessing.medical.postProcessing::Entities.TA_FILTERED"
	SELECT
		"CONFIG_ID",
		"BIN_DWID" as "DWID",
		"TA_RULE",
		"TA_COUNTER",
		"TA_TOKEN",
		"TA_LANGUAGE",
		"TA_TYPE",
		"TA_NORMALIZED",
		"TA_STEM",
		"TA_PARAGRAPH",
		"TA_SENTENCE",
		"TA_CREATED_AT",
		"TA_OFFSET",
		"TA_PARENT",
		"TA_SECTION",
		"TA_STATUS",
		"TA_POLARITY",
		"TA_SUBJECT",
		"TA_TIME_START",
		"TA_TIME_END",
		"TA_TIME_LINK",
		"TA_AMBIGUITY",
		"TA_MEDS_MEDICATION",
		"TA_MEDS_DOSAGE_DOSE",
		"TA_MEDS_FORM",
		"TA_MEDS_INGREDIENT_AMOUNT",
		"TA_MEDS_DOSAGE_ROUTE",
		"TA_MEDS_DOSAGE_RATE",
		"TA_MEDS_DOSAGE_DURATION",
		"TA_MEDS_REASON",
		"TA_AE_SUSPECT_ENTITY",
		"TA_AE_REACTION",
		"TA_COND_CLINICAL_STATUS",
		"TA_COND_SEVERITY",
		"TA_SYMP_CLINICAL_STATUS",
		"TA_SYMP_SEVERITY",
		"TA_OBSERVATION",
		"TA_OBS_VALUE",
		"TA_OBS_UNIT"
		FROM "hc.hph.plugins.textProcessing.medical.postProcessing.lib.views::medical" d
		INNER JOIN :conv_table c
		ON d."DWID" = c."STR_DWID"
		WHERE
		"CONFIG_ID" = :iv_config_id
		AND	"BATCH_ID" = :iv_ta_batch_id
    	AND ( ( d."TA_TYPE" in (
	            select *
	            from :selected_types
	           )
              )
       and (  d."TA_SECTION" in (
              select *
              from :selected_sections
              )
          )
       and (  d."TA_STATUS" in (
              select *
              from :selected_statuses
              )
          )
       and (  d."TA_POLARITY" in (
              select *
              from :selected_polarities
              )
          )            
       and (  d."TA_SUBJECT" in (
              select *
              from :selected_subjects
              )
           )
      )   
  ; 
  
end;
