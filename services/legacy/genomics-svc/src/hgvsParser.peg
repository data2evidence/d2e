/* Grammar for basic HGVS notations
 */

// basic feature definition

hgvsFeature = ws* feature:( hgvsComplexFeature / hgvsBareFeature ) endOfFeature {
	return feature;
}

hgvsBareFeature = feature:featureName {
	return { feature: feature };
}

hgvsComplexFeature = feature:featureName ":" variant:variant {
	variant.feature = feature;
	return variant;
}

featureName = featureName:$[^ \t:()]i+ ( "(" [^ \t:()]i* ")" )? {
	return featureName;
}

// chromosome location

variant = variant:( rangeOnly / positionOnly / nucleotideChange / proteinChange ) {
	if ( typeof( variant ) === "number" )
	{
		variant = { location: { begin: { position: variant }, end: { position: variant + 1 } } }
	}
	else if ( ! variant.location.end )
	{
		variant.location.end = variant.location.begin;
		variant.location.end.positon += 1;
	}
	return variant;
}

rangeOnly = range:range endOfFeature {
	var result = { location: range };
	return result;
}

positionOnly = position:position endOfFeature {
	return { location: { begin: { position: position }, end: { position: position + 1 } } };
}

// gene and CDS changes

nucleotideChange = location:( geneRegion / cdsRegion ) variant:( nucleotideInDel / nucleotideInsertion / nucleotideDuplication / nucleotideDeletion / nucleotideSubstition )? endOfFeature {
	if ( ! variant )
	{
		variant = {};
	}
	variant.location = location;
	return variant;
}

geneRegion = "g." region:( hgvsRange / hgvsPosition ) {
	if ( ( region.begin.coordinates === "5'UTR" ) || ( region.begin.coordinates === "3'UTR" ) || ( region.end.coordinates === "5'UTR" ) || ( region.end.coordinates === "3'UTR" ) )
	{
		error( "UTR coordinates are not allowed in genomic locations" );
	}
	region.begin.coordinates = "genomic";
	region.end.coordinates = "genomic";
	return region;
}

cdsRegion = "c."? location:( hgvsRangeWithOffset / hgvsPositionWithOffset / hgvsPosition ) {
	if ( location.begin.coordinates !== "3'UTR" )
	{
		location.begin.coordinates = ( location.begin.position <= 0 ? "5'UTR" : "CDS" );
	}
	if ( location.end.coordinates !== "3'UTR" )
	{
		location.end.coordinates = ( location.end.position <= 0 ? "5'UTR" : "CDS" );
	}
	return location;
}

nucleotideSubstition = referenceAllele:nucleotide+ ">" alternativeAllele:nucleotide+ {
	return { type: "substitution", referenceAllele: referenceAllele.join( "" ), alternativeAllele: alternativeAllele.join( "" ) };
}

nucleotideInDel = "delins" alternativeAllele:nucleotide+ {
	return { type: "indel", alternativeAllele: alternativeAllele.join( "" ) };
}

nucleotideInsertion = "ins" alternativeAllele:nucleotide+ {
	return { type: "insertion", referenceAllele: "", alternativeAllele: alternativeAllele.join( "" ) };
}

nucleotideDuplication = "dup" alternativeAllele:nucleotide* {
	return { type: "duplication", referenceAllele: alternativeAllele.length > 0 ? alternativeAllele.join( "" ) : undefined, alternativeAllele: alternativeAllele.length > 0 ? alternativeAllele.join( "" ) + alternativeAllele.join( "" ) : undefined };
}

nucleotideDeletion = "del" referenceAllele:nucleotide* {
	return referenceAllele.length > 0 ? { type: "deletion", referenceAllele: referenceAllele.join( "" ), alternativeAllele: "" } : { type: "deletion", alternativeAllele: "" };
}

nucleotide = nucleotide:[ACGTUBDHKMNRSVWY] {
	return nucleotide.toUpperCase();
}

// protein changes

proteinChange = "p."? location:( proteinRange / proteinPosition ) variant:( proteinInsertion / proteinIndel / proteinDuplication / proteinDeletion / proteinSubstitution ) endOfFeature {
	if ( location.referenceAminoAcid )
	{
		variant.referenceAminoAcid = location.referenceAminoAcid;
		if ( variant.alternativeAminoAcid === "=" )
		{
			variant.alternativeAminoAcid = variant.referenceAminoAcid;
		}
		else if ( variant.type === "duplication" )
		{
			variant.alternativeAminoAcid = variant.referenceAminoAcid + variant.referenceAminoAcid;
		}
		delete location.referenceAminoAcid;
	}
	variant.location = location;
	return variant;
}

proteinSubstitution = alternativeAminoAcid:( "=" / stopCodon / aminoAcid3 / aminoAcid1 ) {
	return { type: "substitution", alternativeAminoAcid: alternativeAminoAcid };
}

proteinInsertion = "ins" alternativeAminoAcids:( stopCodon / aminoAcid3 / aminoAcid1 )+ {
	return { type: "insertion", alternativeAminoAcid: alternativeAminoAcids.join( "" ) };
}

proteinDuplication = "dup" {
	return { type: "duplication" };
}

proteinDeletion = "del" {
	return {type: "deletion", alternativeAminoAcid: "" };
}

proteinIndel = "delins" alternativeAminoAcids:( stopCodon / aminoAcid3 / aminoAcid1 )+ {
	return { type: "indel", alternativeAminoAcid: alternativeAminoAcids.join( "" ) };
}

proteinRange = begin:proteinPosition "_" end:proteinPosition {
	return { begin: { coordinates: begin.begin.coordinates, position: begin.begin.position }, end: { coordinates: end.end.coordinates, position: end.end.position } };
}

proteinPosition = referenceAminoAcid:( stopCodon / aminoAcid3 / aminoAcid1 ) position:hgvsPosition {
	return { begin: { coordinates: "protein", position: position.begin.position }, end: { coordinates: "protein", position: position.end.position }, referenceAminoAcid: referenceAminoAcid };
}

aminoAcid1 = aminoAcid:[ABCDEFGHIKLMNPQRSTUVWXYZ] {
	return aminoAcid.toUpperCase();
}

aminoAcid3 = ( "Ala" { return "A"; } / "Asx" { return "B"; } / "Cys" { return "C"; } / "Asp" { return "D"; } / "Glu" { return "E"; } / "Phe" { return "F"; } / "Gly" { return "G"; } / "His" { return "H"; } /
               "Ile" { return "I"; } / "Lys" { return "K"; } / "Leu" { return "L"; } / "Met" { return "M"; } / "Asn" { return "N"; } / "Pro" { return "P"; } / "Gln" { return "Q"; } / "Arg" { return "R"; } /
               "Ser" { return "S"; } / "Thr" { return "T"; } / "Sec" { return "U"; } / "Val" { return "V"; } / "Trp" { return "W"; } / "Xaa" { return "X"; } / "Tyr" { return "Y"; } / "Glx" { return "Z"; } );

stopCodon = ( "*" / "Ter" ) {
	return ".";
}

// general position and range definitions

hgvsRange = begin:hgvsPosition "_" end:hgvsPosition {
	return { begin: begin.begin, end: end.end };
}

hgvsRangeWithOffset = begin:( hgvsPositionWithOffset / hgvsPosition ) "_" end:( hgvsPositionWithOffset / hgvsPosition ) {
	return { begin: { coordinates: begin.begin.coordinates, position: begin.begin.position, offset: begin.begin.offset }, end: { coordinates: end.end.coordinates, position: end.end.position, offset: end.end.offset } };
}

hgvsPositionWithOffset = position:hgvsPosition sign:( "+" / "-" ) offset:$[0-9]+ {
	return { begin: { position: position.begin.position, offset: ( sign === "-" ? -parseInt( offset, 10 ) : parseInt( offset, 10 ) ) }, end: { position: position.end.position, offset: ( sign === "-" ? -parseInt( offset, 10 ) : parseInt( offset, 10 ) ) } };
}

hgvsPosition = sign:( "-" / "+" / "*" )? position:position {
	var result = { begin: { position: ( sign === "-" ? -position : position ), offset: 0 }, end: { position: ( sign === "-" ? -position : position ) + 1, offset: 0 } };
	if ( sign === "*" )
	{
		result.begin.coordinates = "3'UTR";
		result.end.coordinates = "3'UTR";
	}
	return result;
}

range = begin:position separator:( ( "." "."+ ) / "-" / "_" / "+" ) end:position {
	return { begin: { position: begin }, end: { position: ( separator === "+" ? begin + end + 1: end ) + 1 } };
}

position = position:$[0-9]+ {
	return parseInt( position, 10 ) - 1;
}

endOfFeature = ( ws+ / !. )

ws = [ \t\n\r]
