namespace legacy.cdw.db.models;

using legacy.cdw.db.models::DWEntities as DWEnt;
using legacy.cdw.db.models::Ref as Ref; 
using legacy.cdw.db.models::DWDocuments as DWDoc; 
using legacy.cdw.db.models::Config as Config; 
using legacy.collections.db.models::CollectionModel as CollectionModel;
using legacy.ots::Views as OTSViews;
using legacy.cdw.db.models::Helper as Helper;
using legacy.cdw.db.models::DWViewsEAV as DWViewsEAV;

context DWViews {

    /*********************
     *     CONDITION     *
     *********************/

    view "Condition" as select from DWEnt.Condition_Attr {
        DWID as ConditionID,
        Condition_Key_Assoc.ConditionID as SourceConditionID,
        Condition_Key_Assoc.DWSource as Source,
        ConditionType,
        Description
    } where DWDateTo is null;    

    /*********************
     *      PATIENT      *
     *********************/

    // Returns all allowed Patients with time dependency
    // All required analytic privileges/DCLs shall be applied on this view to restrict patient access.


    // Returns all patients With time dependency
    view PatientTD as select from DWEnt.Patient_Attr mixin {
        TitleVocabulary         : association[1..1] to OTSViews.Vocabularies on TitleVocabulary.ExternalID = Title.CodeSystem;
        GenderVocabulary        : association[1..1] to OTSViews.Vocabularies on GenderVocabulary.ExternalID = Gender.CodeSystem;
        MaritalStatusVocabulary : association[1..1] to OTSViews.Vocabularies on MaritalStatusVocabulary.ExternalID = MaritalStatus.CodeSystem;
        NationalityVocabulary   : association[1..1] to OTSViews.Vocabularies on NationalityVocabulary.ExternalID = Nationality.CodeSystem;
        CountryVocabulary       : association[1..1] to OTSViews.Vocabularies on CountryVocabulary.ExternalID = Address.Country.CodeSystem;
    } into {
        DWID as PatientID,
        Patient_Key_Assoc.PatientID as SourcePatientID,
        Patient_Key_Assoc.DWSource as Source,
        ValidFrom,
        ValidTo,
        OrgID,  
        FamilyName,
        GivenName,
        Title.OriginalValue as TitleValue,
        Title.Code as TitleCode,
        TitleVocabulary.ID as TitleVocabularyID,
        Title.CodeSystem as TitleCodeSystem,
        Title.CodeSystemVersion as TitleCodeSystemVersion,
        Gender.OriginalValue as GenderValue,
        Gender.Code as GenderCode,
        GenderVocabulary.ID as GenderVocabularyID,
        Gender.CodeSystem as GenderCodeSystem,
        Gender.CodeSystemVersion as GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatus.OriginalValue as MaritalStatusValue,
        MaritalStatus.Code as MaritalStatusCode,
        MaritalStatusVocabulary.ID as MaritalStatusVocabularyID,
        MaritalStatus.CodeSystem as MaritalStatusCodeSystem,
        MaritalStatus.CodeSystemVersion as MaritalStatusCodeSystemVersion,
        Nationality.OriginalValue as NationalityValue,
        Nationality.Code as NationalityCode,
        NationalityVocabulary.ID as NationalityVocabularyID,
        Nationality.CodeSystem as NationalityCodeSystem,
        Nationality.CodeSystemVersion as NationalityCodeSystemVersion,
        Address.StreetName,
        Address.StreetNumber,
        Address.PostOfficeBox,
        Address.City,
        Address.PostalCode,
        Address.State,
        Address.Region,
        Address.Country.OriginalValue as CountryValue,
        Address.Country.Code as CountryCode,
        CountryVocabulary.ID as CountryVocabularyID,
        Address.Country.CodeSystem as CountryCodeSystem,
        Address.Country.CodeSystemVersion as CountryCodeSystemVersion,
        Telecom.Phone,
        Telecom.Mobile,
        Telecom.Fax,
        Telecom.Email
    } where DWDateTo is null;

    // Patients that are semantically valid in current_utctimestamp
    // The time intervall is left-closed and right-open
    view Patient as select from DWViews.PatientTD {
        PatientID,
        SourcePatientID,
        Source,
        OrgID,
        FamilyName,
        GivenName,   
        TitleValue,
        TitleCode,
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email
    } where (ValidFrom is null or ValidFrom = to_date('0000-00-00') or ValidFrom <= current_utcdate)
        and (current_utcdate < ValidTo or ValidTo IS NULL or ValidTo = to_date('0000-00-00'));

    view V_GuardedPatient as select from DWViews.PatientTD {
        PatientID,
        SourcePatientID,
        Source,
        OrgID,
        FamilyName,
        GivenName,   
        TitleValue,
        TitleCode,
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        BirthDate,
        MultipleBirthOrder,
        DeceasedDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email
    } where (ValidFrom is null or ValidFrom = to_date('0000-00-00') or ValidFrom <= current_utcdate)
        and (current_utcdate < ValidTo or ValidTo IS NULL or ValidTo = to_date('0000-00-00'));



    /*********************
    *    PRACTITIONER    *
    *********************/

    // Returns all practitioners With time dependency
    view PractitionerTD as select from DWEnt.Practitioner_Attr mixin {
        TitleVocabulary         : association[1..1] to OTSViews.Vocabularies on TitleVocabulary.ExternalID = Title.CodeSystem;
        GenderVocabulary        : association[1..1] to OTSViews.Vocabularies on GenderVocabulary.ExternalID = Gender.CodeSystem;
        RoleVocabulary          : association[1..1] to OTSViews.Vocabularies on RoleVocabulary.ExternalID = Role.CodeSystem;
        SpecialityVocabulary    : association[1..1] to OTSViews.Vocabularies on SpecialityVocabulary.ExternalID = Speciality.CodeSystem;
        MaritalStatusVocabulary : association[1..1] to OTSViews.Vocabularies on MaritalStatusVocabulary.ExternalID = MaritalStatus.CodeSystem;
        NationalityVocabulary   : association[1..1] to OTSViews.Vocabularies on NationalityVocabulary.ExternalID = Nationality.CodeSystem;
        CountryVocabulary       : association[1..1] to OTSViews.Vocabularies on CountryVocabulary.ExternalID = Address.Country.CodeSystem;
    } into {
        DWID as PractitionerID,
        Practitioner_Key_Assoc.PractitionerID as SourcePractitionerID,
        Practitioner_Key_Assoc.DWSource as Source,
        ValidFrom,
        ValidTo,
        OrgID,  
        FamilyName,
        GivenName,   
        BirthDate,
        Title.OriginalValue as TitleValue,
        Title.Code as TitleCode,
        TitleVocabulary.ID as TitleVocabularyID,
        Title.CodeSystem as TitleCodeSystem,
        Title.CodeSystemVersion as TitleCodeSystemVersion,
        Gender.OriginalValue as GenderValue,
        Gender.Code as GenderCode,
        GenderVocabulary.ID as GenderVocabularyID,
        Gender.CodeSystem as GenderCodeSystem,
        Gender.CodeSystemVersion as GenderCodeSystemVersion,
        Role.OriginalValue as RoleValue,
        Role.Code as RoleCode,
        RoleVocabulary.ID as RoleVocabularyID,
        Role.CodeSystem as RoleCodeSystem,
        Role.CodeSystemVersion as RoleCodeSystemVersion,
        Speciality.OriginalValue as SpecialityValue,
        Speciality.Code as SpecialityCode,
        SpecialityVocabulary.ID as SpecialityVocabularyID,
        Speciality.CodeSystem as SpecialityCodeSystem,
        Speciality.CodeSystemVersion as SpecialityCodeSystemVersion,
        MaritalStatus.OriginalValue as MaritalStatusValue,
        MaritalStatus.Code as MaritalStatusCode,
        MaritalStatusVocabulary.ID as MaritalStatusVocabularyID,
        MaritalStatus.CodeSystem as MaritalStatusCodeSystem,
        MaritalStatus.CodeSystemVersion as MaritalStatusCodeSystemVersion,
        Nationality.OriginalValue as NationalityValue,
        Nationality.Code as NationalityCode,
        NationalityVocabulary.ID as NationalityVocabularyID,
        Nationality.CodeSystem as NationalityCodeSystem,
        Nationality.CodeSystemVersion as NationalityCodeSystemVersion,
        Address.StreetName,
        Address.StreetNumber,
        Address.PostOfficeBox,
        Address.City,
        Address.PostalCode,
        Address.State,
        Address.Region,
        Address.Country.OriginalValue as CountryValue,
        Address.Country.Code as CountryCode,
        CountryVocabulary.ID as CountryVocabularyID,
        Address.Country.CodeSystem as CountryCodeSystem,
        Address.Country.CodeSystemVersion as CountryCodeSystemVersion,
        Telecom.Phone,
        Telecom.Mobile,
        Telecom.Fax,
        Telecom.Email,
        PreferredLanguage
    } where DWDateTo is null;

    // Semantically valid Practitioner records
    view Practitioner as select from DWViews.PractitionerTD {
        PractitionerID,
        SourcePractitionerID,
        Source,
        OrgID,
        FamilyName,
        GivenName,   
        TitleValue,  
        TitleCode,  
        TitleVocabularyID,
        TitleCodeSystem,
        TitleCodeSystemVersion,
        GenderValue,
        GenderCode,
        GenderVocabularyID,
        GenderCodeSystem,
        GenderCodeSystemVersion,
        RoleValue,  
        RoleCode,  
        RoleVocabularyID,
        RoleCodeSystem,
        RoleCodeSystemVersion,
        SpecialityValue,
        SpecialityCode,
        SpecialityVocabularyID,
        SpecialityCodeSystem,
        SpecialityCodeSystemVersion,
        BirthDate,
        MaritalStatusValue,
        MaritalStatusCode,
        MaritalStatusVocabularyID,
        MaritalStatusCodeSystem,
        MaritalStatusCodeSystemVersion,
        NationalityValue,
        NationalityCode,
        NationalityVocabularyID,
        NationalityCodeSystem,
        NationalityCodeSystemVersion,
        StreetName,
        StreetNumber,        
        PostOfficeBox,
        City,
        PostalCode,
        State,
        Region,
        CountryValue,
        CountryCode,
        CountryVocabularyID,
        CountryCodeSystem,
        CountryCodeSystemVersion,
        Phone,
        Mobile,
        Fax,
        Email,
        PreferredLanguage
    } where (ValidFrom is null or ValidFrom = to_date('0000-00-00') or ValidFrom <= current_utcdate)
        and (current_utcdate < ValidTo or ValidTo IS NULL or ValidTo = to_date('0000-00-00'));

    view _Patient_Practitioner_Attr as select from DWEnt.Patient_Practitioner_Link_Attr mixin {
        RoleVocabulary  : association[1..1] to OTSViews.Vocabularies on RoleVocabulary.ExternalID = Role.CodeSystem;
    } into {
        DWLinkID,
        Role.OriginalValue as RoleValue,
        Role.Code as RoleCode,
        RoleVocabulary.ID as RoleVocabularyID,
        Role.CodeSystem as RoleCodeSystem,
        Role.CodeSystemVersion as RoleCodeSystemVersion
    } where DWDateTo is null;       

    view Patient_Practitioner as select from DWEnt.Patient_Practitioner_Link mixin {
        Patient_Practitioner_Link_Attr  : association[1..1] to _Patient_Practitioner_Attr on Patient_Practitioner_Link_Attr.DWLinkID = DWLinkID;
    } into {
        DWLinkID as ID,
        DWID_Patient as PatientID,
        Patient_Key_Assoc.PatientID as SourcePatientID,
        Patient_Key_Assoc.DWSource as SourcePatient,
        DWID_Practitioner as PractitionerID,
        Practitioner_Key_Assoc.PractitionerID as SourcePractitionerID,
        Practitioner_Key_Assoc.DWSource as SourcePractitioner,
        Patient_Practitioner_Link_Attr.RoleValue,
        Patient_Practitioner_Link_Attr.RoleCode,
        Patient_Practitioner_Link_Attr.RoleVocabularyID,
        Patient_Practitioner_Link_Attr.RoleCodeSystem,
        Patient_Practitioner_Link_Attr.RoleCodeSystemVersion
    } where DWDateTo is null;

    /*********************
     *    OBSERVATIONS   *
     *********************/ 

    view Observations as select from DWEnt.Observations_Attr {
        DWID as ObsID,
        Observations_Key_Assoc.ObsID as SourceObsID,
        Observations_Key_Assoc.DWSource as Source,
        ObsType,
        DWID_Patient AS PatientID,
        ObsCharValue,
        ObsNumValue,
        ObsUnit,
        ObsTime,
        OrgID
    } where DWDateTo is null;

         
    /*********************
     *    INTERACTIONS   *
     *********************/

    view Interactions as select from DWEnt.Interactions_Attr mixin {
        InteractionTypeVocabulary : association[1..1] to OTSViews.Vocabularies on InteractionTypeVocabulary.ExternalID = InteractionType.CodeSystem;
    } into {
        DWID as InteractionID,
        Interactions_Key_Assoc.InteractionID as SourceInteractionID,
        Interactions_Key_Assoc.DWSource as Source,
        DWID_Patient as PatientID, 
        DWID_ParentInteraction as ParentInteractionID,        
        DWID_Condition as ConditionID, 
        InteractionType.OriginalValue as InteractionTypeValue,
        InteractionType.Code as InteractionTypeCode,
        InteractionTypeVocabulary.ID as InteractionTypeVocabularyID,
        InteractionType.CodeSystem as InteractionTypeCodeSystem,
        InteractionType.CodeSystemVersion as InteractionTypeCodeSystemVersion,
        InteractionStatus,
        PeriodStart, 
        PeriodEnd,
        OrgID
    } where DWDateTo is null;

    view InteractionDetailsOTS as select from DWViewsEAV.Interaction_Details details
        inner join OTSViews.Classification class
        on  class.VocabularyID = details.ValueVocabularyID
        and class.Code         = details.ValueCode
        inner join OTSViews.ConceptTerms terms
        on  terms.ConceptVocabularyID = class.ClassVocabularyID
        and terms.ConceptCode         = class.ClassCode {
            details.InteractionID                 as InteractionID,
            details.AttributeValue                as AttributeValue,
            details.AttributeCode                 as AttributeCode,
            details.AttributeCodeSystem           as AttributeCodeSystem,
            details.AttributeCodeSystemVersion    as AttributeCodeSystemVersion,
            details.Value                         as Value,
            details.ValueCode                     as ValueCode,
            details.ValueCodeSystem				  as ValueCodeSystem,
            details.ValueCodeSystemVersion        as ValueCodeSystemVersion,
            class.ClassCode                       as TARGET_CODE,
            class.ClassVocabularyID               as TARGET_VOCABULARY_ID,
            class.ClassHierarchyLevel             as HIERARCHY_LEVEL,
            class.Context                         as SUBJECT,
            terms.TermContext                     as TERM_CONTEXT,
            terms.TermText                        as DESCRIPTION,
            terms.TermLanguage                    as LANGUAGE
        };

view CollectionsAsObservation as select from CollectionModel.Collection  C
    inner join CollectionModel.Item I  on C.Id = I.Collection.Id
    inner join Patient P on I.Id = P.PatientID
    inner join CollectionModel.Participant U on U.Collection.Id = C.Id
    {
     P.PatientID,
     C.Title || ' -- ' || U.CreatedBy AS ObsCharValue,
     'COLLECTION' AS ObsType,
     I.Status.Id AS StatusId
    } where U.HANAUserName = SESSION_CONTEXT ( 'APPLICATIONUSER' ) ;

view CohortStatusAsObservation as select from CollectionModel.Collection C
    inner join CollectionModel.Item I on C.Id = I.Collection.Id
    inner join CollectionModel.CohortsStatusConfig S on S.Id = I.Status.Id
    inner join Patient P on I.Id = P.PatientID
    inner join CollectionModel.Participant U on U.Collection.Id = C.Id
    {
     P.PatientID,
     S.TextKey AS ObsCharValue,
     'COLLECTION_STATUS' AS ObsType,
     I.Status.Id AS ObsID,
     S.Language as Language
     } where U.HANAUserName = SESSION_CONTEXT ( 'APPLICATIONUSER' )
        AND S.Language = IFNULL(SUBSTR(session_context('LOCALE'),1,2), 'en') ; 

view CohortAsInteraction as select from CollectionModel.Collection  C
    inner join CollectionModel.Item I  on C.Id = I.Collection.Id
    inner join Patient P on I.Id = P.PatientID
    inner join CollectionModel.Participant U on U.Collection.Id = C.Id
    left join CollectionModel.CohortsStatusConfig S on S.Id = I.Status.Id
    {
     P.PatientID,
     P.PatientID as InteractionID,
     C.Title || ' -- ' || U.CreatedBy as CohortName, 
     U.CreatedBy as CreatedBy, 
     S.TextKey as CohortStatus,
     I.Status.Id AS StatusId,
     S.Language,
     C.CreatedAt as PeriodStart,
     C.CreatedAt as PeriodEnd
    } where U.HANAUserName = SESSION_CONTEXT ( 'APPLICATIONUSER' ) 
        AND S.Language = IFNULL(SUBSTR(session_context('LOCALE'),1,2), 'en');

};