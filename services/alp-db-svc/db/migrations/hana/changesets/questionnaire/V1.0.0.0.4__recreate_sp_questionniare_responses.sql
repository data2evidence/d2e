--liquibase formatted sql
--changeset alp:V1.0.0.0.4__recreate_sp_questionniare_responses.sql splitStatements:false

CREATE OR REPLACE PROCEDURE "SP::GET_QUESTIONNAIRE_RESPONSE" (Questionnaire_ID VARCHAR(1000))
AS
BEGIN
	DECLARE i_COUNT INT = 1;
	DECLARE j_COUNT INT = 1;
	DECLARE TEMP_QUESTION_OUTPUT TABLE (QUESTIONNAIRE_TEXT VARCHAR(5000), ROW_NUM VARCHAR(100));
  	DECLARE TOTAL_QUESTIONS_COUNT INT = 0;
  	DECLARE QUESTIONS_TEMP_TEXT VARCHAR(8000) = '';
  	DECLARE QUESTIONS_COLUMNS VARCHAR(50000) = '';
  	DECLARE TOTAL_ANSWER_COUNT INT = 0;
  	DECLARE ANSWER_COUNT_PER_PERSON INT =  0;
  	DECLARE TEMP_ANSWER_OUTPUT TABLE (ID varchar(1000), QUESTIONNAIRE_RESPONSE_ID VARCHAR(100), LINKID VARCHAR(100), ANSWER_VALUE VARCHAR(5000), ROW_NUM VARCHAR(100));
  	DECLARE RESPONSE_ID VARCHAR(100) = '';
  	DECLARE ANSWER_ROW VARCHAR(5000) = '';
  	DECLARE ANSWER_ROW_t VARCHAR(8000) = '';
  	DECLARE TEMP_TABLE VARCHAR(8000) = '';
  	DECLARE SQLQuery VARCHAR(8000) = '';

 	-- Get Questions
	TEMP_QUESTION_OUTPUT = (SELECT giq."TEXT" AS QUESTIONNAIRE_TEXT, ROW_NUMBER() over(ORDER BY giq.LINKID) AS ROW_NUM
	FROM "GDM.QUESTIONNAIRE" gq
	JOIN "GDM.ITEM_QUESTIONNAIRE" giq ON giq."GDM.QUESTIONNAIRE_ID" = gq.ID AND TYPE !='group'
	WHERE gq.ID = :Questionnaire_ID);
	SELECT COUNT(*) INTO TOTAL_QUESTIONS_COUNT FROM :TEMP_QUESTION_OUTPUT;

	-- Convert questions to columns
	WHILE i_COUNT <= TOTAL_QUESTIONS_COUNT DO
		SELECT '"' || QUESTIONNAIRE_TEXT || '" VARCHAR(5000),' INTO QUESTIONS_TEMP_TEXT FROM :TEMP_QUESTION_OUTPUT WHERE ROW_NUM = i_COUNT;
		i_COUNT = i_COUNT + 1;
		QUESTIONS_COLUMNS = CONCAT(QUESTIONS_COLUMNS, QUESTIONS_TEMP_TEXT);	
	END WHILE;

	--Create a local temporary table with Questions are columns
	TEMP_TABLE = concat(TEMP_TABLE, rtrim(QUESTIONS_COLUMNS, ',') || ');');
	SELECT 'CREATE local temporary table #'|| :Questionnaire_ID || '(' || TEMP_TABLE INTO SQLQuery FROM dummy;
	EXECUTE IMMEDIATE :SQLQuery;

	-- Get Answers
  	TEMP_ANSWER_OUTPUT = (SELECT ROW_NUMBER() OVER(ORDER BY gi.GDM_QUESTIONNAIRE_RESPONSE_ID, gi.LINK_ID) AS ID, gi.GDM_QUESTIONNAIRE_RESPONSE_ID AS QUESTIONNAIRE_RESPONSE_ID, gi.LINK_ID AS LINKID, ga.VALUE AS ANSWER_VALUE, ROW_NUMBER() over(PARTITION BY gi.GDM_QUESTIONNAIRE_RESPONSE_ID ORDER BY gi.GDM_QUESTIONNAIRE_RESPONSE_ID, gi.LINK_ID) AS ROW_NUM
	FROM "GDM.QUESTIONNAIRE_RESPONSE" gqr
	JOIN "GDM.ITEM" gi ON gi.GDM_QUESTIONNAIRE_RESPONSE_ID  = gqr.ID AND SUBSTR_AFTER(QUESTIONNAIRE_REFERENCE, 'Questionnaire/') = :Questionnaire_ID
	JOIN "GDM.ANSWER" ga ON gi.ID = ga.GDM_ITEM_ID
	ORDER BY gi.GDM_QUESTIONNAIRE_RESPONSE_ID, gi.LINK_ID);

	--Convert answers to rows
	i_COUNT = 1;
	SELECT COUNT(*) INTO TOTAL_ANSWER_COUNT FROM :TEMP_ANSWER_OUTPUT;
	SELECT COUNT(*) INTO ANSWER_COUNT_PER_PERSON FROM :TEMP_ANSWER_OUTPUT GROUP BY QUESTIONNAIRE_RESPONSE_ID LIMIT 1;
	WHILE i_COUNT <= TOTAL_ANSWER_COUNT DO
		SELECT QUESTIONNAIRE_RESPONSE_ID INTO RESPONSE_ID
		FROM :TEMP_ANSWER_OUTPUT
		WHERE ID = i_COUNT;
	
		WHILE j_COUNT <= ANSWER_COUNT_PER_PERSON DO
			SELECT '''' || ANSWER_VALUE || ''',' INTO ANSWER_ROW FROM :TEMP_ANSWER_OUTPUT WHERE QUESTIONNAIRE_RESPONSE_ID = RESPONSE_ID AND ROW_NUM = j_COUNT;
			j_COUNT = j_COUNT + 1;
			i_COUNT = i_COUNT + 1;
			ANSWER_ROW_t = CONCAT(ANSWER_ROW_t, ANSWER_ROW);
		END WHILE;
		j_COUNT = 1;

		--Insert answers as rows into temporary table
		SELECT 'INSERT INTO #' || :Questionnaire_ID || ' VALUES(' || rtrim(ANSWER_ROW_t, ',') || ')' INTO SQLQuery FROM dummy;
		EXECUTE IMMEDIATE :SQLQuery;
		ANSWER_ROW = '';
		ANSWER_ROW_t = '';
	END WHILE;
	EXECUTE IMMEDIATE 'select * from #' || :Questionnaire_ID;
	
	--Drop temporary table
	SELECT 'DROP TABLE #' || :Questionnaire_ID into SQLQuery from dummy;
	EXECUTE IMMEDIATE :SQLQuery;
END;


-- rollback DROP PROCEDURE "SP::GET_QUESTIONNAIRE_RESPONSE";