--liquibase formatted sql
--changeset alp:V1.0.0.0.2__alter_schema_cleanup_sp splitStatements:false

-------------------------------------------------------------------------------------------------
-- Purpose:
-- WARNING: THIS STORE PROCEDURE MUST NEVER BE USED IN PRODUCTION!!!!!!!!!
-- This is used to delete a list of schemas for cleaning up purpose in DEV and STAGING DB
-- To use this Store Procedure, pass in a list of comma seperated schemas as a string parameter
-- SP Usage Example: CALL "SP::DELETE_SCHEMA_AND_AUDIT_POLICY" ('SCHEMA_1, SCHEMA_2, SCHEMA_3, AND_SO_ON')
-------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE "SP::DELETE_SCHEMA_AND_AUDIT_POLICY" ("PARAM_SCHEMAS" VARCHAR(10000))
AS
BEGIN
	USING SQLSCRIPT_STRING AS STRING_LIBRARY;
  
  	DECLARE COUNTER INT = 0;
  	DECLARE SCHEMAS_COUNT INT = 0;
  	DECLARE TARGET_SCHEMA VARCHAR(50);
  	DECLARE DELETE_SCHEMA_SQL VARCHAR(500);
    DECLARE DELETE_SCHEMA_AUDIT_POLICY_SQL VARCHAR(500);
	DECLARE TEMP_OUTPUT TABLE (RESULT VARCHAR(100));
  	   
  	TEMP_OUTPUT = STRING_LIBRARY:SPLIT_TO_TABLE(:PARAM_SCHEMAS, ',', -1);
  	SELECT COUNT(*) INTO SCHEMAS_COUNT FROM :TEMP_OUTPUT;

  	WHILE COUNTER < SCHEMAS_COUNT DO
	    DECLARE IF_SCHEMA_EXISTS INT = 0;
		DECLARE IF_AUDIT_POLICY_EXISTS INT = 0;
		DECLARE SCHEMAS VARCHAR(100) ARRAY;
		DECLARE i INT;
		DECLARE DROP_SCHEMA_NAME VARCHAR(100);

  		SELECT TRIM(UPPER(RESULT)) INTO TARGET_SCHEMA FROM :TEMP_OUTPUT LIMIT 1 OFFSET :COUNTER;

		SCHEMAS[1] = :TARGET_SCHEMA;
		IF :TARGET_SCHEMA LIKE 'CDM%' THEN
			SCHEMAS[2] = REPLACE (:TARGET_SCHEMA, 'CDM', 'CUSTOM');
		END IF;

		FOR i in 1 .. CARDINALITY(:SCHEMAS) DO
			DROP_SCHEMA_NAME = :SCHEMAS[:i];
			DELETE_SCHEMA_SQL = 'DROP SCHEMA ' || :DROP_SCHEMA_NAME || ' CASCADE';
			DELETE_SCHEMA_AUDIT_POLICY_SQL = 'DROP AUDIT POLICY ALP_AUDIT_POLICY_' || :DROP_SCHEMA_NAME;

			SELECT COUNT(1) INTO IF_SCHEMA_EXISTS FROM SCHEMAS WHERE SCHEMA_NAME = :DROP_SCHEMA_NAME;
			SELECT COUNT(1) INTO IF_AUDIT_POLICY_EXISTS FROM AUDIT_POLICIES WHERE AUDIT_POLICY_NAME = 'ALP_AUDIT_POLICY_' || :DROP_SCHEMA_NAME;

			IF :IF_SCHEMA_EXISTS > 0 THEN
				EXEC DELETE_SCHEMA_SQL;
			END IF;

			IF :IF_AUDIT_POLICY_EXISTS > 0 THEN
				EXEC DELETE_SCHEMA_AUDIT_POLICY_SQL;
			END IF;
		END FOR;

   		COUNTER = COUNTER + 1;
  	END WHILE;
END;

--rollback DROP PROCEDURE "SP::DELETE_SCHEMA_AND_AUDIT_POLICY";
