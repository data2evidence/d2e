--liquibase formatted sql
--changeset alp:V1.0.0.0.0__create_schema_cleanup_sp splitStatements:false

-------------------------------------------------------------------------------------------------
-- Purpose:
-- WARNING: THIS STORE PROCEDURE MUST NEVER BE USED IN PRODUCTION!!!!!!!!!
-- This is used to delete a list of schemas for cleaning up purpose in DEV and STAGING DB
-- To use this Store Procedure, pass in a list of comma seperated schemas as a string parameter
-- SP Usage Example: CALL "SP::DELETE_SCHEMA_AND_AUDIT_POLICY" ('SCHEMA_1, SCHEMA_2, SCHEMA_3, AND_SO_ON')
-------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE "SP::DELETE_SCHEMA_AND_AUDIT_POLICY" ("PARAM_SCHEMAS" VARCHAR(10000))
AS
BEGIN
	USING SQLSCRIPT_STRING AS STRING_LIBRARY;
  
  	DECLARE COUNTER INT = 0;
  	DECLARE SCHEMAS_COUNT INT = 0;
  	DECLARE TARGET_SCHEMA VARCHAR(50);
  	DECLARE DELETE_SCHEMA_SQL VARCHAR(500);
    DECLARE DELETE_SCHEMA_AUDIT_POLICY_SQL VARCHAR(500);
	DECLARE TEMP_OUTPUT TABLE (RESULT VARCHAR(100));
  	   
  	TEMP_OUTPUT = STRING_LIBRARY:SPLIT_TO_TABLE(:PARAM_SCHEMAS, ',', -1);
  	SELECT COUNT(*) INTO SCHEMAS_COUNT FROM :TEMP_OUTPUT;
  
  	WHILE COUNTER < SCHEMAS_COUNT DO
  		SELECT TRIM(UPPER(RESULT)) INTO TARGET_SCHEMA FROM :TEMP_OUTPUT LIMIT 1 OFFSET :COUNTER;
		
		DELETE_SCHEMA_SQL = 'DROP SCHEMA ' || :TARGET_SCHEMA || ' CASCADE';
		DELETE_SCHEMA_AUDIT_POLICY_SQL = 'DROP AUDIT POLICY ALP_AUDIT_POLICY_' || :TARGET_SCHEMA;

		EXEC DELETE_SCHEMA_SQL;
		EXEC DELETE_SCHEMA_AUDIT_POLICY_SQL;
	
   		COUNTER = COUNTER + 1;
  	END WHILE;
END;

--rollback DROP PROCEDURE "SP::DELETE_SCHEMA_AND_AUDIT_POLICY";