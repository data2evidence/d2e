--liquibase formatted sql
--changeset alp:V1.0.0.0.6__create_schema_cleanup_with_table_sp splitStatements:false

-------------------------------------------------------------------------------------------------
-- Purpose:
-- WARNING: THIS STORE PROCEDURE MUST NEVER BE USED IN PRODUCTION!!!!!!!!!
-- This is used to delete a list of schemas for cleaning up purpose in DEV and STAGING DB
-- To use this Store Procedure, pass in the Jira Ticket Number as a string parameter
-- SP Usage Example: CALL "SP::DELETE_SCHEMA_AND_AUDIT_POLICY_FROM_TABLE" ('SGGREEN-437')
-- DEV_CLEANUP_SCHEMA table was manually created in ALPDEV to track the schemas that were dropped
-- The SP will retrieve a list of schemas to delete from DEV_CLEANUP_SCHEMA, update DELETED wtih 1 if it is has been deleted, and with the time
-------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE "SP::DELETE_SCHEMA_AND_AUDIT_POLICY_FROM_TABLE" ("JIRA_TICKET" VARCHAR(50))
AS
BEGIN
	USING SQLSCRIPT_STRING AS STRING_LIBRARY;
  
  	DECLARE COUNTS INT = 0;
  	DECLARE SCHEMAS_COUNT INT = 0;
  	DECLARE TARGET_SCHEMA VARCHAR(100);
  	DECLARE DELETE_SCHEMA_SQL VARCHAR(500);
    DECLARE DELETE_SCHEMA_AUDIT_POLICY_SQL VARCHAR(500);
	DECLARE TEMP_OUTPUT TABLE (SCHEMA_NAME VARCHAR(100));	

	TEMP_OUTPUT = SELECT SCHEMA_NAME FROM DEV_SCHEMA_CLEANUP WHERE DELETED IS NULL;
  	SELECT COUNT(*) INTO SCHEMAS_COUNT FROM :TEMP_OUTPUT;

  	WHILE COUNTS < SCHEMAS_COUNT DO
	    DECLARE IF_SCHEMA_EXISTS INT = 0;
		DECLARE IF_AUDIT_POLICY_EXISTS INT = 0;
		DECLARE i INT;
		DECLARE DROP_SCHEMA_NAME VARCHAR(100);

  		SELECT TRIM(UPPER(SCHEMA_NAME)) INTO TARGET_SCHEMA FROM :TEMP_OUTPUT LIMIT 1 OFFSET :COUNTS;
		
  		DROP_SCHEMA_NAME = :TARGET_SCHEMA;
  	
  		DELETE_SCHEMA_SQL = 'DROP SCHEMA ' || :DROP_SCHEMA_NAME || ' CASCADE';
  		DELETE_SCHEMA_AUDIT_POLICY_SQL = 'DROP AUDIT POLICY ALP_AUDIT_POLICY_' || :DROP_SCHEMA_NAME;
  	
  		SELECT COUNT(1) INTO IF_SCHEMA_EXISTS FROM SCHEMAS WHERE SCHEMA_NAME = :DROP_SCHEMA_NAME;
  		SELECT COUNT(1) INTO IF_AUDIT_POLICY_EXISTS FROM AUDIT_POLICIES WHERE AUDIT_POLICY_NAME = 'ALP_AUDIT_POLICY_' || :DROP_SCHEMA_NAME;
  	
		IF :IF_SCHEMA_EXISTS > 0 THEN
			EXEC DELETE_SCHEMA_SQL;
			UPDATE DEV_SCHEMA_CLEANUP SET DELETED=1 WHERE SCHEMA_NAME = :DROP_SCHEMA_NAME;
			UPDATE DEV_SCHEMA_CLEANUP SET DATETIME_DELETED=CURRENT_TIMESTAMP WHERE SCHEMA_NAME = :DROP_SCHEMA_NAME;
			UPDATE DEV_SCHEMA_CLEANUP SET DELETED_BY=:JIRA_TICKET WHERE SCHEMA_NAME = :DROP_SCHEMA_NAME;
		END IF;

		IF :IF_AUDIT_POLICY_EXISTS > 0 THEN
			EXEC DELETE_SCHEMA_AUDIT_POLICY_SQL;
		END IF;

   		COUNTS = COUNTS + 1;
  	END WHILE;
END;
--rollback DROP PROCEDURE "SP::DELETE_SCHEMA_AND_AUDIT_POLICY_FROM_TABLE";