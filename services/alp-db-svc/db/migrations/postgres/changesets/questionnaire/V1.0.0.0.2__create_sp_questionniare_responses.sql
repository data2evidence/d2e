--liquibase formatted sql
--changeset alp:V1.0.0.0.2__create_sp_questionniare_responses.sql splitStatements:false

-------------------------------------------------------------------------------------------------
-- Purpose:
-- The result is a temp table that persists only until end of session
-- Example of execution CALL "SP::GET_QUESTIONNAIRE_RESPONSE"('f201');
-- Need to execute DROP TABLE IF EXISTS "#f201" if calling on the same QUESTIONNAIRE_ID_PARAM within a session
-- SELECT * FROM "#f201" to view the temporary table
-- To get the schema of the temporary table,execute SELECT RELNAMESPACE::REGNAMESPACE FROM PG_CLASS WHERE RELNAME = '#f201';
-------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE "SP::GET_QUESTIONNAIRE_RESPONSE" (
	QUESTIONNAIRE_ID_PARAM VARCHAR(1000)
)
LANGUAGE PLPGSQL
AS $$
	DECLARE 
		RESPONSE_ID_REC RECORD;
		COLUMN_NAME_HEADERS VARCHAR(1000);
		ANSWERS VARCHAR (1000);
	BEGIN
		-- GETS QUESTIONS FOR THE GIVEN QUESTIONNAIRE_ID_PARAM
		CREATE TEMP TABLE TEMP_QUESTION_OUTPUT ON COMMIT DROP AS
			(SELECT 
				GIQ."TEXT" AS "QUESTIONNAIRE_TEXT",
				ROW_NUMBER() OVER(ORDER BY GIQ."LINKID") AS "ROW_NUM"
			FROM "GDM.QUESTIONNAIRE" GQ
			JOIN "GDM.ITEM_QUESTIONNAIRE" GIQ 
				ON GIQ."GDM.QUESTIONNAIRE_ID" = GQ."ID"
				AND GIQ."TYPE" !='group'
			WHERE GQ."ID" = QUESTIONNAIRE_ID_PARAM
			);
		

		-- CREATES EMPTY TABLE NAMED '#{$QUESTIONNAIRE_ID_PARAM}' THAT PERSISTS TILL END OF SESSION
		EXECUTE FORMAT('CREATE TEMP TABLE "#%s"();',QUESTIONNAIRE_ID_PARAM);
	
		-- INSERT EACH QUESTION FROM TEMP_QUESTION_OUTPUT AS A COLUMN
		FOR RESPONSE_ID_REC IN 
			SELECT * 
			FROM TEMP_QUESTION_OUTPUT
		LOOP
			EXECUTE FORMAT('ALTER TABLE "#%s" ADD COLUMN "%s" VARCHAR(5000)', QUESTIONNAIRE_ID_PARAM, RESPONSE_ID_REC."QUESTIONNAIRE_TEXT");
		END LOOP;
		
				
		-- GETS ALL THE ANSWERS PER GDM_QUESTIONNAIRE_RESPONSE_ID FOR THE GIVEN QUESTIONNAIRE_ID_PARAM
		CREATE TEMP TABLE TEMP_ANSWER_OUTPUT ON COMMIT DROP as
			(SELECT 
				ROW_NUMBER() OVER(ORDER BY GI."GDM_QUESTIONNAIRE_RESPONSE_ID", GI."LINK_ID") AS "ID", 
				GI."GDM_QUESTIONNAIRE_RESPONSE_ID" AS "QUESTIONNAIRE_RESPONSE_ID", 
				GI."LINK_ID" AS "LINKID",
				GIQ."TEXT" AS "QUESTIONNAIRE_TEXT",
				GA."VALUE" AS "ANSWER_VALUE", 
				ROW_NUMBER() OVER(PARTITION BY GI."GDM_QUESTIONNAIRE_RESPONSE_ID" ORDER BY GI."GDM_QUESTIONNAIRE_RESPONSE_ID", GI."LINK_ID") AS "ROW_NUM"
			FROM "GDM.QUESTIONNAIRE_RESPONSE" GQR
			JOIN "GDM.ITEM" GI ON GI."GDM_QUESTIONNAIRE_RESPONSE_ID" = GQR."ID" 
				AND (REGEXP_MATCH("QUESTIONNAIRE_REFERENCE",'[^/]+$'))[1] = QUESTIONNAIRE_ID_PARAM
			JOIN "GDM.ANSWER" GA ON GI."ID" = GA."GDM_ITEM_ID"
			join "GDM.ITEM_QUESTIONNAIRE" GIQ on GI."LINK_ID" = GIQ."LINKID" and GI."TEXT" = GIQ."TEXT"
			ORDER BY GI."GDM_QUESTIONNAIRE_RESPONSE_ID", GI."LINK_ID"
			);		

		-- GETS UNIQUE GDM_QUESTIONNAIRE_RESPONSE_ID
		CREATE TEMP TABLE UNIQUE_RESPONSE_IDS ON COMMIT DROP AS
		(
			SELECT
				DISTINCT "QUESTIONNAIRE_RESPONSE_ID" AS "RESPONSE_ID"
			FROM TEMP_ANSWER_OUTPUT
		);
		
	
		-- DYNAMICALLY GENERATE STRING OF COLUMN HEADERS FROM TEMP TABLE '#{$QUESTIONNAIRE_ID_PARAM}' 
		SELECT STRING_AGG(CONCAT('"',"QUESTIONNAIRE_TEXT",'"'), ', ') INTO COLUMN_NAME_HEADERS 
		FROM 			
			(
			SELECT 
				GIQ."TEXT" AS "QUESTIONNAIRE_TEXT",
				GIQ."LINKID"
			FROM "GDM.QUESTIONNAIRE" GQ
			JOIN "GDM.ITEM_QUESTIONNAIRE" GIQ 
				ON GIQ."GDM.QUESTIONNAIRE_ID" = GQ."ID"
				AND GIQ."TYPE" !='group'
			WHERE GQ."ID" = QUESTIONNAIRE_ID_PARAM
			ORDER BY GIQ."LINKID") T1;
	
		
		-- INSERT ANSWERS INTO COLUMNS FOR EACH UNIQUE GDM_QUESTIONNAIRE_RESPONSE_ID
		FOR RESPONSE_ID_REC IN
	       SELECT *
	       FROM UNIQUE_RESPONSE_IDS
	    LOOP
		    
		    -- DYNAMICALLY GENERATE STRING OF ANSWERS FOR EACH GDM_QUESTIONNAIRE_RESPONSE_ID
			SELECT STRING_AGG(CONCAT('''',"ANSWER_VALUE",''''), ', ') INTO ANSWERS from 
				(select * from TEMP_ANSWER_OUTPUT where "QUESTIONNAIRE_RESPONSE_ID" = RESPONSE_ID_REC."RESPONSE_ID") T2;		
			
			-- INSERT ANSWERS INTO TEMP TABLE '#{$QUESTIONNAIRE_ID_PARAM}' FOR EACH GDM_QUESTIONNAIRE_RESPONSE_ID
			EXECUTE FORMAT('INSERT INTO "#%s"(%s) VALUES(%s);', QUESTIONNAIRE_ID_PARAM, COLUMN_NAME_HEADERS, ANSWERS);
			
		   END LOOP;
END;
$$;
;

--rollback DROP PROCEDURE "SP::GET_QUESTIONNAIRE_RESPONSE";