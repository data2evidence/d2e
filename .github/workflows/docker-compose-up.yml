name: Docker compose Build & Up

on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  DOCKER_TAG_NAME: ${{ github.sha }}
  ENV_NAME: local
  ENV_TYPE: local
  GIT_COMMIT_ARG: ${{ github.sha }}

# Run only one job per branch
concurrency:
  group: ${{ github.head_ref || github.ref_name }}-docker-compose-up # Run the latest push
  cancel-in-progress: true # Cancel in progress jobs of the workflow of the branch

jobs:
  docker-compose-up:
    runs-on:
      group: dockerup # Custom runner 4 cpus & 14gb ram
    if: (github.ref_name == 'develop' ||  contains('rc-', github.ref_name) || github.event_name == 'workflow_dispatch') || ( github.event_name == 'pull_request' && !github.event.pull_request.draft ) # Should run if branch is develop/rc/workflow_dispatch and doesnt have a PR
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - uses: actions/checkout@v4

      - name: Install 1Password CLI
        uses: 1Password/install-cli-action@v1.0.0

      - name: Generate dotenv
        env:
          DOTENV_FILE: .env.${{ env.ENV_TYPE }}
          DOTENV_YML: .env.${{ env.ENV_NAME }}.yml
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OP_VAULT_NAME: ${{ secrets.OP_VAULT_NAME }}
          OVERWRITE: true
        run: |
          ACTIONS_STEP_DEBUG=false
          ./internal/scripts/get-op-ratelimit.sh

          # get env yml from 1password
          yarn internal op:get:$ENV_TYPE

          # mask sensitive values
          internal/scripts/mask-gha.sh

          # generate dotenv
          yarn internal gen:env

          echo DOCKER_TAG_NAME=$DOCKER_TAG_NAME | tee -a $DOTENV_FILE | tee -a $GITHUB_STEP_SUMMARY

      - name: Load dotenv from 1password
        uses: 1password/load-secrets-action@v2
        id: op-load-secret
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          REGISTRY_USERNAME: "op://${{ secrets.OP_VAULT_NAME }}/az-alpCR/username"
          REGISTRY_PASSWORD: "op://${{ secrets.OP_VAULT_NAME }}/az-alpCR/password"

      - name: 1password ratelimit end
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          ./internal/scripts/get-op-ratelimit.sh

      - name: Upload stats.yml artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: stats
          retention-days: 30
          path: |
            ${{ github.job }}*.yml

      - name: Login to ACR
        uses: docker/login-action@v3.1.0
        with:
          registry: alpcr.azurecr.io
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - uses: docker/setup-buildx-action@v3
        id: builder1
        with:
          config: .github/buildkitd.toml

      - name: Docker
        run: |
          docker system prune -af

      - name: Docker compose build
        run: |
          # Build DataNode services
          yarn build:minerva --builder ${{ steps.builder1.outputs.name }}

      - name: Builder cache cleanup
        run: |
          docker buildx prune -af

      - name: Initalize Logto
        run: |
          yarn init:logto

      - name: Docker compose up Local Mode without UI Container
        run: |
          # Run DataNode services without sql-editor
          BASE_PORT=1 docker compose --file docker-compose.yml --file docker-compose-local.yml --env-file .env.local up --wait
          EXIT_CODE=$?

          docker ps --format "{{.Names}} {{.Status}}" | sort | tee -a $GITHUB_STEP_SUMMARY
          echo | tee -a $GITHUB_STEP_SUMMARY

          if [ $EXIT_CODE != 0 ]; then
            echo "ERROR docker compose exit code $EXIT_CODE" | tee -a $GITHUB_STEP_SUMMARY
          fi

      - name: Logs minerva
        if: success() || failure()
        run: |
          yarn logs:minerva:startup

      - name: Clean Docker compose
        if: always()
        run: |
          # Clean DataNode services
          yarn clean:minerva
          docker system prune -af
