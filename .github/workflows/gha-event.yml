name: Azure Container Registry Prune

on:
  workflow_dispatch:
  push:
  workflow_call:
    inputs:
      AZ_REGISTRY_REPOSITORY:
        required: true
        type: string
      DOCKER_BUILD_CONTEXT:
        required: true
        type: string
      DOCKER_BUILD_FILE_PATH:
        required: true
        type: string
      # DOCKER_BUILD_PULL_BOOL:
      #   required: false
      # default: false
      #   type: string
    secrets:
      AZ_REGISTRY_USERNAME:
        required: true
      AZ_REGISTRY_PASSWORD:
        required: true

jobs:
  az-reg-prune:
    name: azure registry prune
    runs-on: ubuntu-latest
    steps:
      - name: echo
        env:
          AZ_REGISTRY_REPOSITORY: ${{ inputs.AZ_REGISTRY_REPOSITORY || vars.AZ_REGISTRY_REPOSITORY }}
          DOCKER_BUILD_CONTEXT: ${{ inputs.DOCKER_BUILD_CONTEXT }}
          DOCKER_BUILD_FILE_PATH: ${{ inputs.DOCKER_BUILD_FILE_PATH }}
          DOCKER_BUILD_PULL_BOOL: ${{ inputs.DOCKER_BUILD_PULL_BOOL }}
        run: |
          echo AZ_REGISTRY_REPOSITORY=$AZ_REGISTRY_REPOSITORY | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_BUILD_CONTEXT=$DOCKER_BUILD_CONTEXT | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_BUILD_FILE_PATH=$DOCKER_BUILD_FILE_PATH | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_BUILD_PULL_BOOL=$DOCKER_BUILD_PULL_BOOL | tee -a $GITHUB_STEP_SUMMARY

      # - name: prune registry images
        shell: bash
        env:
          AZ_REGISTRY_NAME: ${{ vars.AZ_REGISTRY_NAME }}
          AZ_REGISTRY_PASSWORD: ${{ secrets.AZ_REGISTRY_PASSWORD }}
          AZ_REGISTRY_PRUNE_ENABLE: ${{ vars.AZ_REGISTRY_PRUNE_ENABLE }}
          AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS: ${{ vars.AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS }}
          AZ_REGISTRY_REPOSITORY: ${{ inputs.AZ_REGISTRY_REPOSITORY || vars.AZ_REGISTRY_REPOSITORY }}
          AZ_REGISTRY_USERNAME: ${{ secrets.AZ_REGISTRY_USERNAME }}
          AZ_REGISTRY_WHITELIST_REGEX: ${{ vars.AZ_REGISTRY_WHITELIST_REGEX }}
        run: |
          echo AZ_REGISTRY_PRUNE_ENABLE=$AZ_REGISTRY_PRUNE_ENABLE | tee -a $GITHUB_STEP_SUMMARY
          echo AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS=$AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS | tee -a $GITHUB_STEP_SUMMARY
          echo AZ_REGISTRY_REPOSITORY=$AZ_REGISTRY_REPOSITORY | tee -a $GITHUB_STEP_SUMMARY
          echo AZ_REGISTRY_WHITELIST_REGEX=$AZ_REGISTRY_WHITELIST_REGEX | tee -a $GITHUB_STEP_SUMMARY
          echo AZ_REGISTRY_NAME=$AZ_REGISTRY_NAME | tee -a $GITHUB_STEP_SUMMARY

          if [ $AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS = 0 ]; then
            AZ_REGISTRY_PRUNE_TIMESTAMP=$(date -u -Is)
          else
            TODAY=$(date +%Y-%m-%d)
            AZ_REGISTRY_PRUNE_TIMESTAMP="$(date -d "$TODAY - ${AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS} days" +%Y-%m-%d)"
          fi

          echo AZ_REGISTRY_PRUNE_TIMESTAMP=$AZ_REGISTRY_PRUNE_TIMESTAMP | tee -a $GITHUB_STEP_SUMMARY

          echo ". 1 - GET manifest metadata -  deprecated warning is not relevant"
          az acr manifest metadata list --name ${AZ_REGISTRY_REPOSITORY} --registry ${AZ_REGISTRY_NAME} --username "${AZ_REGISTRY_USERNAME}" --password "${AZ_REGISTRY_PASSWORD}" --orderby time_asc --query "[?lastUpdateTime < '${AZ_REGISTRY_PRUNE_TIMESTAMP}' && not_null(tags)]" > private.json
          wc -l private.json

          echo ". 2 - ANALYZE each tag as deletable True/False - show first 20"
          cat private.json | yq -rP 'map({"digest":.digest, "tags":(.tags|@json),"count":(.tags|length),"lengths":([.tags[]|length]|@json),"deletable":(.tags|map(test(env(AZ_REGISTRY_WHITELIST_REGEX))|not)|@json)})' | tee private1-analysis.yml | yq '.[0:20]'

          echo ". 3 - SELECT images to be deleted i.e. manifests excepting deletable False tags"
          cat private1-analysis.yml | yq 'map(select(.deletable|contains("false")|not))' > private2-todelete.yml
          echo . INFO for deletion - BranchNames
          cat private2-todelete.yml | yq -P 'map(select(.lengths!="[40]") | .tags | @jsond)'
          echo . INFO for deletion - single tag commitIds
          cat private2-todelete.yml | yq -P 'map(select(.lengths=="[40]") | .tags | @jsond)'

          if [ "${AZ_REGISTRY_PRUNE_ENABLE}" = true ]; then
            echo ". 4 - ACTION delete digests ..."
            yq '.[].digest' private2-todelete.yml | sort -u | xargs -I% az acr repository delete -u ${AZ_REGISTRY_USERNAME} -p ${AZ_REGISTRY_PASSWORD} --name ${AZ_REGISTRY_NAME} --image ${AZ_REGISTRY_REPOSITORY}@% --yes
          else
            echo ". 4 - SKIPPED delete digests ..."
          fi
