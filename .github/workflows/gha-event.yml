name: Docker Build, Push, Prune (called)

on:
  workflow_dispatch:
    inputs:
      AZ_REGISTRY_REPOSITORY:
        required: true
        type: string
      DOCKER_BUILD_CONTEXT_PATH:
        required: true
        type: string
      DOCKER_BUILD_FILE_PATH:
        required: true
        type: string
      DOCKER_BUILD_PULL_BOOL:
        default: false
        type: boolean
      DOCKER_IMG_IS_PUSH:
        required: false
        default: true
        type: boolean
      DOCKER_IMG_TAG_NAME:
        required: true
        type: string
      GIT_BRANCH_NAME:
        required: true
        type: string
      GIT_REPO_FULL_NAME:
        required: true
        type: string
  workflow_call:
    inputs:
      AZ_REGISTRY_REPOSITORY:
        required: true
        type: string
      DOCKER_BUILD_CONTEXT_PATH:
        required: true
        type: string
      DOCKER_BUILD_FILE_PATH:
        required: true
        type: string
      DOCKER_BUILD_PULL_BOOL:
        required: true
        type: boolean
      DOCKER_IMG_IS_PUSH:
        required: false
        default: true
        type: boolean
      DOCKER_IMG_TAG_NAME:
        required: true
        type: string
      GIT_BRANCH_NAME:
        required: true
        type: string
      GIT_REPO_FULL_NAME:
        required: true
        type: string

jobs:
  build-push-prune:
    name: ${{ inputs.AZ_REGISTRY_REPOSITORY }}
    runs-on: ubuntu-latest
    steps:
      - name: inputs
        shell: bash
        env:
          AZ_REGISTRY_REPOSITORY: ${{ inputs.AZ_REGISTRY_REPOSITORY || vars.AZ_REGISTRY_REPOSITORY }}
          DOCKER_BUILD_CONTEXT_PATH: ${{ inputs.DOCKER_BUILD_CONTEXT_PATH }}
          DOCKER_BUILD_FILE_PATH: ${{ inputs.DOCKER_BUILD_FILE_PATH }}
          DOCKER_BUILD_PULL_BOOL: ${{ inputs.DOCKER_BUILD_PULL_BOOL }}
          DOCKER_IMG_IS_PUSH: ${{ inputs.DOCKER_IMG_IS_PUSH }}
          DOCKER_IMG_TAG_NAME: ${{ inputs.DOCKER_IMG_TAG_NAME }}
          GIT_BRANCH_NAME: ${{ inputs.GIT_BRANCH_NAME }}
          GIT_REPO_FULL_NAME: ${{ inputs.GIT_REPO_FULL_NAME }}
        run: |
          echo AZ_REGISTRY_REPOSITORY=$AZ_REGISTRY_REPOSITORY | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_BUILD_CONTEXT_PATH=$DOCKER_BUILD_CONTEXT_PATH
          echo DOCKER_BUILD_FILE_PATH=$DOCKER_BUILD_FILE_PATH
          echo DOCKER_BUILD_PULL_BOOL=$DOCKER_BUILD_PULL_BOOL
          echo GIT_BRANCH_NAME=$GIT_BRANCH_NAME | tee -a $GITHUB_STEP_SUMMARY
          echo GIT_REPO_FULL_NAME=$GIT_REPO_FULL_NAME | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_IMG_TAG_NAME=$DOCKER_IMG_TAG_NAME | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_IMG_IS_PUSH=$DOCKER_IMG_IS_PUSH | tee -a $GITHUB_STEP_SUMMARY

      - uses: actions/checkout@v4.1.7
        with:
          ref: ${{ inputs.GIT_BRANCH_NAME }}
          repository: ${{ inputs.GIT_REPO_FULL_NAME }}
          token: ${{ secrets.CI_PAT }}

      - name: Login to ACR
        uses: docker/login-action@v3.3.0
        with:
          registry: alpcr.azurecr.io
          username: ${{ secrets.AZ_REGISTRY_USERNAME }}
          password: ${{ secrets.AZ_REGISTRY_PASSWORD }}

      - uses: docker/setup-buildx-action@v3.6.1
        id: builder

      - name: Purge docker images and cache
        run: |
          docker image prune -af
          docker buildx prune -af

      - name: Build and push
        uses: docker/build-push-action@v6.7.0
        with:
          builder: ${{ steps.builder.outputs.name }}
          platforms: "linux/amd64"
          context: ${{ inputs.DOCKER_BUILD_CONTEXT_PATH }}
          pull: ${{ inputs.DOCKER_BUILD_PULL_BOOL }}
          file: ${{ inputs.DOCKER_BUILD_FILE_PATH }}
          push: ${{ inputs.DOCKER_IMG_IS_PUSH }}
          tags: alpcr.azurecr.io/${{ inputs.AZ_REGISTRY_REPOSITORY }}:${{ inputs.DOCKER_IMG_TAG_NAME }}
          build-args: |
            docker_image_prefix=alpcr.azurecr.io
            GIT_COMMIT_ARG=${{ github.sha }}

      - name: Post purge
        if: always()
        run: |
          docker system prune -af

          - name: Prune old images
          shell: bash
          env:
            ENABLE_REGISTRY_PRUNE: ${{ vars.ENABLE_REGISTRY_PRUNE }} # true|false - enable/disable as needed
            AZ_REGISTRY_NAME: ${{ vars.AZ_REGISTRY_NAME }}
            AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS: ${{ vars.AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS }}
            AZ_REGISTRY_PASSWORD: ${{ secrets.AZ_REGISTRY_PASSWORD }}
            AZ_REGISTRY_USERNAME: ${{ secrets.AZ_REGISTRY_USERNAME }}
            AZ_REGISTRY_WHITELIST_REGEX: ${{ vars.AZ_REGISTRY_WHITELIST_REGEX }}
            AZ_REPOSITORY: ${{ inputs.AZ_REPOSITORY }}
            TENANT_NAME: ${{ vars.AZ_TENANT_NAME }}
          run: |
            echo AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS=$AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS | tee -a $GITHUB_STEP_SUMMARY
            echo AZ_REGISTRY_WHITELIST_REGEX=$AZ_REGISTRY_WHITELIST_REGEX | tee -a $GITHUB_STEP_SUMMARY
            echo AZ_REPOSITORY=$AZ_REPOSITORY | tee -a $GITHUB_STEP_SUMMARY
            echo ENABLE_REGISTRY_PRUNE=$ENABLE_REGISTRY_PRUNE | tee -a $GITHUB_STEP_SUMMARY

            if [ $AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS = 0 ]; then
              AZ_REGISTRY_PRUNE_TIMESTAMP=$(date -u -Is)
            else
              TODAY=$(date +%Y-%m-%d)
              AZ_REGISTRY_PRUNE_TIMESTAMP="$(date -d "$TODAY - ${AZ_REGISTRY_PRUNE_NUMBER_OF_DAYS} days" +%Y-%m-%d)"
            fi

            echo AZ_REGISTRY_PRUNE_TIMESTAMP=$AZ_REGISTRY_PRUNE_TIMESTAMP | tee -a $GITHUB_STEP_SUMMARY

            echo ". 1 - GET manifest metadata -  deprecated warning is not relevant"
            az acr manifest metadata list --name ${AZ_REPOSITORY} --registry ${AZ_REGISTRY_NAME} --username "${AZ_REGISTRY_USERNAME}" --password "${AZ_REGISTRY_PASSWORD}" --orderby time_asc --query "[?lastUpdateTime < '${AZ_REGISTRY_PRUNE_TIMESTAMP}' && not_null(tags)]" > private.json
            wc -l private.json

            echo ". 2 - ANALYZE each tag as deletable True/False - show first 20"
            cat private.json | yq -rP 'map({"digest":.digest, "tags":(.tags|@json),"count":(.tags|length),"lengths":([.tags[]|length]|@json),"deletable":(.tags|map(test(env(AZ_REGISTRY_WHITELIST_REGEX))|not)|@json)})' | tee private1-analysis.yml | yq '.[0:20]'

            echo ". 3 - SELECT images to be deleted i.e. manifests excepting deletable False tags"
            cat private1-analysis.yml | yq 'map(select(.deletable|contains("false")|not))' > private2-todelete.yml
            echo . INFO for deletion - BranchNames
            cat private2-todelete.yml | yq -P 'map(select(.lengths!="[40]") | .tags | @jsond)'
            echo . INFO for deletion - single tag commitIds
            cat private2-todelete.yml | yq -P 'map(select(.lengths=="[40]") | .tags | @jsond)'

            if [ "${ENABLE_REGISTRY_PRUNE}" = true ]; then
              echo ". 4 - ACTION delete digests ..."
              yq '.[].digest' private2-todelete.yml | sort -u | xargs -I% az acr repository delete -u ${AZ_REGISTRY_USERNAME} -p ${AZ_REGISTRY_PASSWORD} --name ${AZ_REGISTRY_NAME} --image ${AZ_REPOSITORY}@% --yes
            else
              echo ". 4 - SKIPPED delete digests ..."
            fi
