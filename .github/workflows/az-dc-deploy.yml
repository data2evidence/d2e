name: DC Deploy AzureDev
run-name: ${{ github.event.inputs.env }} ${{ github.event.inputs.repo_full_name }}

on:
  workflow_dispatch:
    inputs:
      repo_full_name:
        description: Select RepoName
        options:
          - alp-os/d2e
          - alp-os/d2e-dev-afreen
          - alp-os/d2e-dev-alicia
          - alp-os/d2e-dev-brandan
          - alp-os/d2e-dev-brian
          - alp-os/d2e-dev-hengxian
          - alp-os/d2e-dev-jerome
          - alp-os/d2e-dev-khairul
          - alp-os/d2e-dev-mwaiyee
          - alp-os/d2e-dev-nicholas
          - alp-os/d2e-dev-peter
          - alp-os/d2e-dev-ragavan
          - alp-os/d2e-dev-santan
          - alp-os/d2e-dev-satish
          - alp-os/d2e-dev-suwarno
        required: true
        type: choice
      env:
        default: alp-dev-sg-3
        description: Select the environment
        required: true
        type: environment
      force-cleanup-containers:
        description: Force cleanup all containers
        type: boolean
        default: false
      docker-tag-develop:
        description: tag:*:develop
        type: boolean
      docker-tag-textbox:
        description: tag:fromTextbox (precedence)
        type: string
        required: false
      dotenv-boolean:
        description: boolean:dotenv
        type: boolean
        default: true

env:
  DOCKER_TAG_NAME: ${{ github.event.inputs.docker-tag-textbox || 'develop' }}
  ENV_NAME: ${{ github.event.inputs.env }}
  ENV_TYPE: remote

concurrency:
  group: az-dc-deploy-${{ github.event.inputs.env }}
  cancel-in-progress: true

jobs:
  deploy:
    environment: ${{ github.event.inputs.env }}
    name: ${{ github.event.inputs.env }}
    runs-on: ["${{ github.event.inputs.env }}", self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v4.1.1
        name: checkout d2e repo
        with:
          clean: false
          ref: ${{ env.DOCKER_TAG_NAME }}
          repository: ${{ github.event.inputs.repo_full_name }}
          token: ${{ secrets.CI_PAT }}

      - name: Force cleanup containers
        if: github.event.inputs.force-cleanup-containers
        continue-on-error: true
        run: docker rm -v -f $(docker ps -qa)

      - name: Generate dotenv
        env:
          DOTENV_FILE: .env.${{ env.ENV_TYPE }}
          DOTENV_YML: .env.${{ env.ENV_NAME }}.yml
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OP_VAULT_NAME: ${{ secrets.OP_VAULT_NAME }}
          OVERWRITE: true
        run: |
          ACTIONS_STEP_DEBUG=false
          ./internal/scripts/get-op-ratelimit.sh

          # get env yml from 1password
          if [ ${{ github.event.inputs.dotenv-boolean }} = true ]
          then
            yarn --cwd internal op:get:$ENV_TYPE
          else
            echo dotenv-boolean=false | tee -a $GITHUB_STEP_SUMMARY
          fi

          # mask sensitive values
          internal/scripts/gha-mask.sh

          # generate dotenv
          yarn --cwd internal gen:env
          echo CADDY__ALP__PUBLIC_FQDN=$(yq '.CADDY__ALP__PUBLIC_FQDN' $DOTENV_YML) | tee -a $GITHUB_ENV | tee -a $GITHUB_STEP_SUMMARY

          cp $DOTENV_FILE ../$DOTENV_FILE-${GITHUB_RUN_ID:-ghRunId}-$(date '+%Y%m%dT%H%M%S')

          [ "${{ github.event.inputs.docker-tag-develop }}" = true ] && DOCKER_TAG_NAME=develop
          UI_DOCKER_TAG_NAME=$DOCKER_TAG_NAME
          [ "${{ github.event.inputs.ui-docker-tag-develop }}" = true ] && UI_DOCKER_TAG_NAME=develop
          [ "${{ github.event.inputs.ui-docker-tag-textbox }}" != '' ] && UI_DOCKER_TAG_NAME=${{ github.event.inputs.ui-docker-tag-textbox }}

          echo DOCKER_TAG_NAME=$DOCKER_TAG_NAME | tee -a $DOTENV_FILE | tee -a $GITHUB_ENV | tee -a $GITHUB_STEP_SUMMARY
          echo UI_DOCKER_TAG_NAME=$UI_DOCKER_TAG_NAME | tee -a $DOTENV_FILE | tee -a $GITHUB_ENV | tee -a $GITHUB_STEP_SUMMARY
          echo HEAD_COMMIT_MESSAGE=$(git show -s --format=%s) | tee -a "$GITHUB_STEP_SUMMARY"
          echo GITHUB_SHA_SHORT=$(git rev-parse --short HEAD) | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Load dotenv from 1password
        uses: 1password/load-secrets-action@v2
        id: op-load-secret
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          REGISTRY_USERNAME: "op://${{ secrets.OP_VAULT_NAME }}/az-alpCR/username"
          REGISTRY_PASSWORD: "op://${{ secrets.OP_VAULT_NAME }}/az-alpCR/password"

      - name: 1password ratelimit end
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          ./internal/scripts/get-op-ratelimit.sh

      - name: Upload stats.yml artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: stats
          retention-days: 30
          path: |
            ${{ github.job }}*.yml

      - name: Login to ACR
        uses: docker/login-action@v3.1.0
        with:
          registry: alpcr.azurecr.io
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Pull docker images
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 1800
          retry_wait_seconds: 60
          max_attempts: 10
          retry_on: any
          command: |
            # customize dc.yml
            yq -i '.services.alp-minerva-postgres.ports=["41190:5432"]' docker-compose.yml # expose PG port
            yarn remote:minerva pull

      - name: docker compose up
        env:
          GATEWAY_NAME: alp-minerva-gateway-1
        run: |
          yarn remote:minerva up --remove-orphans --force-recreate --wait
          DC_EXIT_CODE=$?
          echo DC_EXIT_CODE=$DC_EXIT_CODE | tee -a $GITHUB_STEP_SUMMARY

          DOCKER_STATUS_FILE=../docker-status-${GITHUB_RUN_ID:-ghRunId}-$(date '+%Y%m%dT%H%M%S').txt
          docker ps --format {{.Names}},{{.Status}} 2> /dev/null | sort | tee $DOCKER_STATUS_FILE | tee -a $GITHUB_STEP_SUMMARY

          DC_FAIL_COUNT=$(grep -icE "starting|unhealthy" $DOCKER_STATUS_FILE|| true)
          echo DC_FAIL_COUNT=$DC_FAIL_COUNT | tee -a $GITHUB_STEP_SUMMARY
          [ $DC_EXIT_CODE = 0 ] || { echo EXIT DC_EXIT_CODE=$DC_EXIT_CODE && exit $DC_EXIT_CODE; }

      - name: Logs minerva
        if: success() || failure()
        run: |
          yarn ci:logs:minerva

      - name: Post cleanup
        if: always()
        run: |
          docker rm -f alp-caddy-certs-mgmt || true # Cleanup cert mgmt container if job aborted
