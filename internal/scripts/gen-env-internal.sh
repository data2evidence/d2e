#!/usr/bin/env bash
# generate random dotenv secrets - internal
set -o nounset
set -o errexit

# inputs
ENV_NAME=${ENV_NAME:-local}
ENV_TYPE=${ENV_TYPE:-local}

# vars
DOTENV_FILE_OUT=.env.$ENV_TYPE
DOTENV_KEYS_OUT=.env.local.keys
DOTENV_YML_IN=$GIT_BASE_DIR/.env.$ENV_NAME.yml
GIT_BASE_DIR=$(git rev-parse --show-toplevel)

# functions
function count {
	cat $DOTENV_FILE_OUT | grep = | awk -F= '{print $1}' | grep _ | sort -u > $DOTENV_KEYS_OUT
	wc -l $DOTENV_FILE_OUT $DOTENV_KEYS_OUT | sed '$d'
	echo
}

# action
cd $GIT_BASE_DIR

echo ". INFO generate random secrets - public"
ENV_NAME=$ENV_NAME ENV_TYPE=$ENV_TYPE yarn --cwd .. gen:env

echo ". INFO generate random secrets - internal"
source $DOTENV_FILE_OUT
source scripts/lib.sh
source internal/scripts/lib.sh

POSTGRES_TENANT_ADMIN_PASSWORD_PLAIN=$(random-password 25)
POSTGRES_TENANT_ADMIN_PASSWORD_SALT=$(random-password 22)
POSTGRES_TENANT_ADMIN_PASSWORD=$(public-encrypt ${POSTGRES_TENANT_ADMIN_PASSWORD_SALT} ${POSTGRES_TENANT_ADMIN_PASSWORD_PLAIN})
POSTGRES_TENANT_READ_PASSWORD_PLAIN=$(random-password 25)
POSTGRES_TENANT_READ_PASSWORD_SALT=$(random-password 22)
POSTGRES_TENANT_READ_PASSWORD=$(public-encrypt ${POSTGRES_TENANT_READ_PASSWORD_SALT} ${POSTGRES_TENANT_READ_PASSWORD_PLAIN})

# sorted
echo ALP_RELEASE=local >> $DOTENV_FILE_OUT
echo DOCKER__RESTART_POLICY=no >> $DOTENV_FILE_OUT
echo DOCKER_TAG_NAME=local >> $DOTENV_FILE_OUT
echo ENV_TYPE=local >> $DOTENV_FILE_OUT
echo POSTGRES_TENANT_ADMIN_PASSWORD_PLAIN=$POSTGRES_TENANT_ADMIN_PASSWORD_PLAIN >> $DOTENV_FILE_OUT
echo POSTGRES_TENANT_ADMIN_PASSWORD_SALT=$POSTGRES_TENANT_ADMIN_PASSWORD_SALT >> $DOTENV_FILE_OUT
echo POSTGRES_TENANT_ADMIN_PASSWORD=$POSTGRES_TENANT_ADMIN_PASSWORD >> $DOTENV_FILE_OUT
echo POSTGRES_TENANT_READ_PASSWORD_PLAIN=$POSTGRES_TENANT_READ_PASSWORD_PLAIN >> $DOTENV_FILE_OUT
echo POSTGRES_TENANT_READ_PASSWORD_SALT=$POSTGRES_TENANT_READ_PASSWORD_SALT >> $DOTENV_FILE_OUT
echo POSTGRES_TENANT_READ_PASSWORD=$POSTGRES_TENANT_READ_PASSWORD >> $DOTENV_FILE_OUT
echo SQL_RETURN_ON=true >> $DOTENV_FILE_OUT
echo TLS__CADDY_DIRECTIVE=\'tls internal\' >> $DOTENV_FILE_OUT
count

echo ". INFO add non-randomized - internal"
set -a && source $DOTENV_FILE_OUT && set +a # export vars for envsubst
cat $DOTENV_YML_IN | yq -o sh 'with_entries(select(.key|test("CADDY__ALP__PUBLIC_FQDN|DATABASE_CREDENTIALS|GH_TOKEN|GIT_TOKEN__PLUGINS_REPO_READ|HANA__CRT|HANA__HOSTNAME|HANA__TENANT_ADMIN_PASSWORD|HANA__TENANT_ADMIN_PASSWORD_SALT|HANA__TENANT_READ_PASSWORD|HANA__TENANT_READ_PASSWORD_SALT|DICOM__HEALTH_CHECK_PASSWORD")))' | envsubst >> $DOTENV_FILE_OUT
# todo: remove DICOM__HEALTH_CHECK_PASSWORD upon new release candidate version. it has already removed from develop
# cat $DOTENV_YML_IN | yq 'with_entries(select(.key|test("CADDY__ALP__PUBLIC_FQDN|DATABASE_CREDENTIALS|GH_TOKEN|GIT_TOKEN__PLUGINS_REPO_READ|HANA__CRT|HANA__HOSTNAME|HANA__TENANT_ADMIN_PASSWORD|HANA__TENANT_ADMIN_PASSWORD_SALT|HANA__TENANT_READ_PASSWORD|HANA__TENANT_READ_PASSWORD_SALT|DICOM__HEALTH_CHECK_PASSWORD")))' | yq '.DATABASE_CREDENTIALS' | yq '.[1].values.credentials.adminPassword' | envsubst # test

count
echo
