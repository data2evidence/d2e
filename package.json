{
  "name": "alp-data-node",
  "version": "1.0.0",
  "description": "ALP Data Node",
  "license": "MIT",
  "scripts": {
    "gen:dotenv": "scripts/gen-dotenv.sh && yarn gen:tls",
    "gen:tls": "scripts/gen-tls.sh",

    "start:local:caddy": "yarn local:minerva up alp-caddy --force-recreate --wait",
    "start:remote:caddy": "yarn remote:minerva up alp-caddy --wait",
    "logs:caddy": "yarn base:minerva logs alp-caddy -t --until 1s",

    "base:minerva": "BASE_PORT=1 docker compose --file docker-compose.yml --profile minerva-s3",
    "remote:minerva": "ENV_TYPE=remote yarn base:minerva --env-file .env.remote --profile minerva-ui --profile cube",
    "local:minerva": "ENV_TYPE=local yarn base:minerva --file docker-compose-local.yml ${ADDITIONAL_DC_FILES} --env-file .env.local",

    "local:standalone:cube:minerva": "yarn local:minerva --profile cube",

    "start:minerva": "yarn build:nest-prod:minerva && yarn local:minerva up --renew-anon-volumes",
    "start:nest-dev:minerva": "yarn build:nest-dev:minerva && ADDITIONAL_DC_FILES='--file docker-compose-nest-dev-local.yml' yarn local:minerva up --renew-anon-volumes alp-minerva-dataflow-mgmt alp-minerva-portal-server alp-minerva-terminology-svc --wait --force-recreate --no-deps",
    "start:nest-prod:minerva": "yarn build:nest-prod:minerva && yarn local:minerva up --renew-anon-volumes alp-minerva-dataflow-mgmt alp-minerva-portal-server alp-minerva-terminology-svc --wait --force-recreate --no-deps",

    "start:logto": "yarn local:minerva up alp-caddy alp-logto alp-minerva-postgres alp-logto-post-init --renew-anon-volumes",

    
    "build:minerva": "yarn local:minerva build --build-arg GIT_COMMIT_ARG=$(git rev-parse HEAD)",
    "build:nest-dev:minerva": "ADDITIONAL_DC_FILES='--file docker-compose-nest-dev-local.yml' yarn build:minerva alp-minerva-dataflow-mgmt alp-minerva-portal-server alp-minerva-terminology-svc",
    "build:nest-prod:minerva": "yarn build:minerva alp-minerva-dataflow-mgmt alp-minerva-portal-server alp-minerva-terminology-svc",
    
    "stop:minerva": "yarn local:minerva stop",
    "clean:minerva": "yarn local:minerva down --volumes --remove-orphans",
    "config:minerva": "yarn local:minerva config",
    "ps:minerva": "yarn local:minerva ps",
    "logs:minerva": "yarn base:minerva logs -t --until 1s",

    "base:ui": "DN_REPO_RELATIVE_PATH='.' && GIT_HEAD_COMMIT_ALP_UI_REPO=$(git -C $UI_REPO_RELATIVE_PATH rev-parse HEAD) docker compose --file ${DN_REPO_RELATIVE_PATH}/docker-compose.yml --file ${DN_REPO_RELATIVE_PATH}/docker-compose-local.yml --profile minerva-s3",
    "az:start:ui": "yarn base:ui up alp-local-ui-file-server",
    "start:ui": "UI_REPO_RELATIVE_PATH='../d2e-ui' yarn az:start:ui",
    "build:start:ui": "UI_REPO_RELATIVE_PATH='../d2e-ui' && yarn base:ui --file ${UI_REPO_RELATIVE_PATH}/docker-compose-ui.yml up alp-local-ui-file-server",
    "build:ui": "UI_REPO_RELATIVE_PATH='../d2e-ui' && yarn base:ui --file ${UI_REPO_RELATIVE_PATH}/docker-compose-ui.yml build --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} alp-local-ui-file-server",

    "build:minerva-test": "yarn local:minerva build",

    "start:minerva-test": "yarn local:minerva start",


    "local:cube:minerva": "yarn local:minerva --profile cube",
    "build:cube:minerva": "yarn local:cube:minerva build --build-arg GIT_COMMIT_ARG=$(git rev-parse HEAD)",
    "start:cube:minerva": "yarn local:standalone:cube:minerva up --renew-anon-volumes",

    "seed-postgres-cdm-schemas": "sh -c 'docker exec -it alp-dataflow-gen-agent-1 prefect deployment run execute-seed-postgres-data-flow/alp-db-svc-seed --param database_code=${0} --param vocab_schema_name=cdmvocab --param cdm_schema_name=${1}'",

    "build": "ts-node internal/build/buildservices.ts build",
    "tsc": "ts-node internal/build/buildservices.ts build --only-tsc",
    "inittestdb": "node internal/build/initdb.js test",
    "removetestdb": "node internal/build/initdb.js rmonly",

    "gen:env": "internal/scripts/gen-env.sh",
    "op:create:all": "for env_name in ${npm_package_config_env_names_all[@]}; do yarn op:create $env_name; done",
    "op:create": "internal/scripts/create-op.sh",
    "op:get:all": "for env_name in ${npm_package_config_env_names_all[@]}; do overwrite=$overwrite env_name=$env_name yarn op:get; done",
    "op:get:dev": "for env_name in ${npm_package_config_env_names_dev[@]}; do overwrite=$overwrite env_name=$env_name yarn op:get; done",
    "op:get:local": "for env_name in base-all base-local local; do overwrite=$overwrite env_name=$env_name yarn op:get; done",
    "op:get:remote": "sh -c 'for env_name in base-all base-remote ${0}; do overwrite=$overwrite env_name=$env_name yarn op:get; done'",
    "op:get": "internal/scripts/get-op.sh",
    "op:put:all": "for env_name in ${npm_package_config_env_names_all[@]}; do overwrite=$overwrite env_name=$env_name yarn op:put; done",
    "op:put:dev": "for env_name in ${npm_package_config_env_names_dev[@]}; do overwrite=$overwrite env_name=$env_name yarn op:put; done",
    "op:put": "internal/scripts/put-op.sh",
    "x:setup": "internal/scripts/setup.sh"
  },  
  "devDependencies": {
    "@types/node": "^18",
    "yarn": "1.22.10",
    "ts-node": "9.1.1"
  },
  "optionalDependencies": {
    "@alp/alp-dbcli": "file:internal/build/alp-dbcli-private-v1.0.0.tgz"
  },
  "private": true,
  "workspaces": {
    "packages": [
      "alp-libs/nodejs/*",
      "services/alp-db-svc",
      "services/analytics-svc",
      "services/query-gen-svc",
      "services/bookmark-svc",
      "services/envConverter",
      "services/mri-pg-config",
      "services/cdw-svc"
    ]}
}