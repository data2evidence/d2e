{
  "name": "@data2evidence/cli",
  "version": "0.5.0",
  "description": "D2E setup script",
  "license": "Apache-2.0",
  "bin": {
    "d2e": "scripts/cli.sh"
  },
  "config": {
    "env_names_all": "local remote base-all base-local base-remote alp-dev-sg-3 alp-dev-sg-2 alp-stg-de-1 alp-stg-sg-1 alp-stg-sg-2",
    "env_names_dev": "local remote base-all base-local base-remote alp-dev-sg-3"
  },
  "scripts": {
    "gen:dotenv": "scripts/gen-dotenv.sh && yarn gen:tls && yarn gen:resource-limits",
    "gen:tls": "scripts/gen-tls.sh",
    "gen:resource-limits": "scripts/gen-resource-limits.sh",
    "genenv": "ENV_TYPE=${ENV_TYPE:-remote} scripts/gen-dotenv.sh && scripts/gen-tls.sh && scripts/gen-resource-limits.sh",
    "init": "ENV_TYPE=${ENV_TYPE:-local} && npm run start -- alp-minerva-postgres alp-logto --wait && sleep 10 && npm run start -- alp-logto-post-init",
    "start": "ENV_TYPE=remote docker compose --file docker-compose.yml --env-file .env up",
    "start:demo": "ENV_TYPE=remote docker compose --file docker-compose.yml --file docker-compose-atlas.yml --env-file .env up",
    "start:dev": "ENV_TYPE=local docker compose --file docker-compose.yml --file docker-compose-atlas.yml --file docker-compose-local.yml --env-file .env.local up",
    "base:minerva": "BASE_PORT=1 docker compose --file docker-compose.yml --file docker-compose-atlas.yml",
    "base:minerva:fhir": "BASE_PORT=1 docker compose --file docker-compose.yml --file docker-compose-atlas.yml --file docker-compose-fhir.yml",
    "remote:minerva": "ENV_TYPE=remote yarn base:minerva --env-file .env.remote --profile perseus",
    "remote:minerva:fhir": "ENV_TYPE=remote yarn base:minerva:fhir --env-file .env.remote --profile perseus",
    "local:minerva": "ENV_TYPE=local yarn base:minerva --file docker-compose-local.yml ${ADDITIONAL_DC_FILES} --env-file .env.local",
    "local:minerva:fhir": "ENV_TYPE=local yarn base:minerva:fhir --file docker-compose-local.yml --file docker-compose-fhir-local.yml ${ADDITIONAL_DC_FILES} --env-file .env.local",
    "build:minerva": "yarn local:minerva build --build-arg GIT_COMMIT_ARG=$(git rev-parse HEAD)",
    "init:logto": "ENV_TYPE=${ENV_TYPE:-local} && yarn $ENV_TYPE:minerva up alp-minerva-postgres alp-logto --wait && sleep 10 && yarn $ENV_TYPE:minerva up alp-logto-post-init",
    "start:minerva": "yarn local:minerva up --renew-anon-volumes --wait",
    "start:minerva:fhir": "yarn local:minerva:fhir up --renew-anon-volumes --wait",
    "start:minerva:perseus": "yarn local:minerva --profile perseus up --renew-anon-volumes --wait",
    "stop:minerva": "yarn local:minerva stop",
    "clean:minerva": "yarn local:minerva down --volumes --remove-orphans",
    "config:minerva": "yarn local:minerva config",
    "ps:minerva": "yarn local:minerva ps",
    "ci:logs:minerva": "yarn base:minerva logs -t --until 1s",
    "logs:minerva": "yarn base:minerva logs -f -t",
    "create-postgres-cdm-schemas": "bash scripts/create-cdm-schema.sh",
    "build": "ts-node internal/build/buildservices.ts build",
    "tsc": "ts-node internal/build/buildservices.ts build --only-tsc",
    "inittestdb": "node internal/build/initdb.js test",
    "removetestdb": "node internal/build/initdb.js rmonly",
    "internal": "npm run-script --prefix internal"
  },
  "optionalDependencies": {
    "@alp/alp-dbcli": "file:cache/drivers/alp-dbcli-v1.0.0.tgz"
  },
  "devDependencies": {
    "@types/node": "^18",
    "ts-node": "10.9.2",
    "yarn": "1.22.10"
  }
}